[JVMCI properties]
jvmci.Compiler := "graal"                                                 [String]
          Selects the system compiler. This must match the getCompilerName() value returned by a jdk.vm.ci.runtime.JVMCICompilerFactory provider. An empty string or the value "null" selects a compiler that will raise an exception upon receiving a compilation request. This property can also be defined by the contents of <java.home>/lib/jvmci/compiler-name.
jvmci.InitTimer = false                                                  [Boolean]
          Specifies if initialization timing is enabled.
jvmci.PrintConfig = false                                                [Boolean]
          Prints VM configuration available via JVMCI.
jvmci.AuditHandles = false                                               [Boolean]
          Record stack trace along with scoped foreign object reference wrappers to debug issue with a wrapper being used after its scope has closed.
jvmci.TraceMethodDataFilter = null                                        [String]
          Enables tracing of profiling info when read by JVMCI.
          Empty value: trace all methods
          Non-empty value: trace methods whose fully qualified name contains the value.
jvmci.UseProfilingInformation = true                                     [Boolean]
          
[Graal properties]
graal.AOTInliningDepthToSizeRate = 2.5                                    [Double]
graal.AOTInliningSizeMaximum = 300                                       [Integer]
graal.AOTInliningSizeMinimum = 50                                        [Integer]
graal.AOTVerifyOops = false                                              [Boolean]
          Generate verify oop checks in AOT code
graal.ASMInstructionProfiling = null                                      [String]
          Enables instruction profiling on assembler level. Valid values are a
          comma separated list of supported instructions. Compare with subclasses
          of Assembler.InstructionCounter.
graal.AbortOnBenchmarkCounterOverflow = false                            [Boolean]
          Abort VM with SIGILL if benchmark counters controlled by the
          (Generic|Timed|Benchmark)DynamicCounters
          option overflow. This feature is only supported on AMD64.
          WARNING: No descriptive error message will be printed! In case of an overflow,
          manual inspection of the emitted code is required.
graal.ActiveProcessorCount = -1                                          [Integer]
          Overwrites the available number of processors provided by the OS. Any
          value <= 0 means using the processor count from the OS.
graal.AggregatedMetricsFile = null                                        [String]
          File to which aggregated metrics are dumped at shutdown. A CSV format
          is used if the file ends with .csv otherwise a more human readable
          format is used. If not specified, metrics are dumped to the console.
graal.AliasArrayTypeFlows = true                                         [Boolean]
          Model all array type flows using a unique elements type flow
          abstraction.
graal.AllocationProfilingThreshold = 1048576                             [Integer]
          The minimum size in bytes required for printing an allocation profiling
          entry
graal.AllocationSiteSensitiveHeap = false                                [Boolean]
          A context sensitive heap means that each heap allocated object is
          modeled by using at least the allocation site.
graal.AlwaysInlineIntrinsics = false                                     [Boolean]
          Unconditionally inline intrinsics
graal.AlwaysInlineVTableStubs = false                                    [Boolean]
graal.AnalysisContextSensitivity = "insens"                               [String]
          Controls the static analysis context sensitivity. Available values:
          insens (context insensitive analysis), allocsens (context insensitive
          analysis, context insensitive heap, allocation site sensitive heap),
          _1obj (1 object sensitive analysis with a context insensitive heap),
          _2obj1h (2 object sensitive with a 1 context sensitive heap)
graal.AnalysisSizeCutoff = 8                                             [Integer]
          The maximum size of type and method profiles returned by the static
          analysis. -1 indicates no limitation.
graal.AnalysisStatisticsFile = null                                       [String]
          Analysis results statistics file.
graal.BenchmarkCounterPrintingCutoff = true                              [Boolean]
          Use a cutoff to print only most significant counters.
graal.BenchmarkCountersDumpDynamic = true                                [Boolean]
          Dump dynamic counters
graal.BenchmarkCountersDumpStatic = false                                [Boolean]
          Dump static counters
graal.BenchmarkCountersFile = null                                        [String]
          File to which benchmark counters are dumped. A CSV format is used if
          the file ends with .csv otherwise a more human readable format is used.
          The fields in the CSV format are: category, group, name, value
graal.BenchmarkDynamicCounters = null                                     [String]
          Turn on the benchmark counters. The format of this option is:
          
            (err|out),start pattern,end pattern
            
          Start counting when the start pattern matches on the given stream and stop when the end pattern occurs.
          You can use "~" to match 1 or more digits.
          Examples:
          
            err, starting =====, PASSED in
            out,Iteration ~ (~s) begins:,Iteration ~ (~s) ends:
            
          The first pattern matches DaCapo output and the second matches SPECjvm2008 output.
          
          As a more detailed example, here are the options to use for getting statistics
          about allocations within the DaCapo pmd benchmark:
          
            -XX:JVMCICounterSize=<value> -XX:-JVMCICountersExcludeCompiler \
            -Dgraal.BenchmarkDynamicCounters="err, starting ====, PASSED in " \
            -Dgraal.ProfileAllocations=true
            
          The JVMCICounterSize value depends on the granularity of the profiling -
          10000 should be sufficient. Omit JVMCICountersExcludeCompiler to exclude
          counting allocations on the compiler threads.
          The counters can be further configured by the ProfileAllocationsContext option.
          
          We highly recommend the use of -Dgraal.AbortOnBenchmarkCounterOverflow=true to
          detect counter overflows eagerly.
graal.BootstrapInitializeOnly = false                                    [Boolean]
          Do not compile anything on bootstrap but just initialize the compiler.
graal.BootstrapTimeout = 15.0                                             [Double]
          Maximum time in minutes to spend bootstrapping (0 to disable this
          limit).
graal.BootstrapWatchDogCriticalRateRatio = 0.25                           [Double]
          Ratio of the maximum compilation rate below which the bootstrap
          compilation rate must not fall (0 or less disables monitoring).
graal.CanOmitFrame = true                                                [Boolean]
graal.CanonicalGraphStringsCheckConstants = false                        [Boolean]
          Exclude virtual nodes when dumping canonical text for graphs.
graal.CanonicalGraphStringsExcludeVirtuals = true                        [Boolean]
          Exclude virtual nodes when dumping canonical text for graphs.
graal.CanonicalGraphStringsRemoveIdentities = true                       [Boolean]
          Attempts to remove object identity hashes when dumping canonical text
          for graphs.
graal.ClearMetricsAfterBootstrap = false                                 [Boolean]
          Clear the debug metrics after bootstrap.
graal.CollectYoungGenerationSeparately = false                           [Boolean]
          Determines if a full GC collects the young generation separately or
          together with the old generation.
graal.CompilationBailoutAsFailure = false                                [Boolean]
          Treat compilation bailouts like compilation failures.
graal.CompilationCountLimit = 0                                          [Integer]
          The number of compilations allowed for any method before the VM exits
          (a value of 0 means there is no limit).
graal.CompilationExcludePhases = null                                     [String]
          Exclude certain phases from compilation, either unconditionally or with
          a method filter
graal.CompilationExpirationPeriod = 300                                  [Integer]
          Time limit in seconds before a compilation expires (0 to disable the
          limit). The compilation alarm will be implicitly disabled if assertions
          are enabled.
graal.CompilationFailureAction = Silent                                   [String]
          Specifies the action to take when compilation fails.
          
          The accepted values are:
              Silent  - Print nothing to the console.
               Print  - Print a stack trace to the console.
            Diagnose* - Retry the compilation with extra diagnostics.
              ExitVM  - Same as Diagnose except that the VM process exits after retrying.
              
          * If "Diagnose" is set compilation will be retried with extra diagnostics enabled including dumping (see file:doc-files/DumpHelp.txt). 
            In such a scenario DiagnoseDumpLevel can be used to specify the dump level (DebugContext dump levels) accordingly.
                
graal.CompilationIsolateAddressSpaceSize = 0                                [Long]
          Size of the reserved address space of each compilation isolate (0:
          default for new isolates).
graal.CompilationWatchDogStackTraceInterval = 60.0                        [Double]
          Interval in seconds between a watch dog reporting stack traces for long
          running compilations.
graal.CompilationWatchDogStartDelay = 0.0                                 [Double]
          Delay in seconds before watch dog monitoring a compilation (0 disables
          monitoring).
graal.CompileGraalWithC1Only = true                                      [Boolean]
          In tiered mode compile Graal and JVMCI using optimized first tier code.
graal.CompileInIsolates = true                                           [Boolean]
          Activate runtime compilation in separate isolates (enable support
          during image build with option SupportCompileInIsolates).
graal.CompilerConfiguration = null                                        [String]
          Names the compiler configuration to use. If omitted, the compiler
          configuration with the highest auto-selection priority is used. To see
          the set of available configurations, supply the value 'help' to this
          option.
graal.ConditionalElimination = true                                      [Boolean]
graal.ConditionalEliminationMaxIterations = 4                            [Integer]
graal.Count = null                                                        [String]
          Pattern for specifying scopes in which counters are enabled. See the
          Dump option for the pattern syntax. An empty value enables all counters
          unconditionally.
graal.Counters = null                                                     [String]
          Comma separated names of counters that are enabled irrespective of the
          value for Count option. An empty value enables all counters
          unconditionally.
graal.CrashAt = null                                                      [String]
          Pattern for method(s) that will trigger an exception when compiled.
          This option exists to test handling compilation crashes gracefully. See
          the MethodFilter option for the pattern syntax. A ':Bailout' suffix
          will raise a bailout exception and a ':PermanentBailout' suffix will
          raise a permanent bailout exception.
graal.CrashAtIsFatal = false                                             [Boolean]
          Converts an exception triggered by the CrashAt option into a fatal
          error if a non-null pointer was passed in the _fatal option to
          JNI_CreateJavaVM. This option exists for the purpose of testing fatal
          error handling in libgraal.
graal.DebugStubsAndSnippets = false                                      [Boolean]
          Enable debug output for stub code generation and snippet preparation.
graal.DeoptALot = false                                                  [Boolean]
graal.DeoptAfterOSR = true                                               [Boolean]
          Deoptimize OSR compiled code when the OSR entry loop is finished if
          there is no mature profile available for the rest of the method.
graal.DeoptsToDisableOptimisticOptimization = 40                         [Integer]
graal.DetailedAsserts = false                                            [Boolean]
          Enable expensive assertions if normal assertions (i.e. -ea or -esa) are
          enabled.
graal.DiagnoseDumpLevel = 3                                              [Integer]
          Specify the DumpLevel if CompilationFailureAction#Diagnose is used.See
          CompilationFailureAction for details.
          file:doc-files/CompilationFailureActionHelp.txt
graal.DisableExplicitGC = false                                          [Boolean]
          Ignore calls to System.gc()
graal.DisableIntercept = false                                           [Boolean]
          Disable intercepting exceptions in debug scopes.
graal.DivertParameterReturningMethod = true                              [Boolean]
          Analysis: Detect methods that return one of their parameters and
          hardwire the parameter straight to the return.
graal.Dump = null                                                         [String]
          Filter pattern for specifying scopes in which dumping is enabled.
          
          A filter is a list of comma-separated terms of the form:
           
            <pattern>[:<level>]
           
          If <pattern> contains a "*" or "?" character, it is interpreted as a glob pattern.
          Otherwise, it is interpreted as a substring. If <pattern> is empty, it
          matches every scope. If :<level> is omitted, it defaults to 1. The term
          ~<pattern> is a shorthand for <pattern>:0 to disable a debug facility for a pattern.
          
          The default log level is 0 (disabled). Terms with an empty pattern set
          the default log level to the specified value. The last
          matching term with a non-empty pattern selects the level specified. If
          no term matches, the log level is the default level. A filter with no
          terms matches every scope with a log level of 1.
          
          Examples of debug filters:
          --------- 
            (empty string)
          
            Matches any scope with level 1.
          --------- 
            :1
          
            Matches any scope with level 1.
          --------- 
            *
          
            Matches any scope with level 1.
          --------- 
            CodeGen,CodeInstall
          
            Matches scopes containing "CodeGen" or "CodeInstall", both with level 1.
          --------- 
            CodeGen:2,CodeInstall:1
          
            Matches scopes containing "CodeGen" with level 2, or "CodeInstall" with level 1.
          ---------
            Outer:2,Inner:0}
          
            Matches scopes containing "Outer" with log level 2, or "Inner" with log level 0. If the scope
            name contains both patterns then the log level will be 0. This is useful for silencing subscopes.
          ---------
            :1,Dead:2
          
            Matches scopes containing "Dead" with level 2, and all other scopes with level 1.
          --------- 
            Dead:0,:1
          
            Matches all scopes with level 1, except those containing "Dead".   Note that the location of
            the :1 doesn't matter since it's specifying the default log level so it's the same as
            specifying :1,Dead:0.
          --------- 
            Code*
          
            Matches scopes starting with "Code" with level 1.
          --------- 
            Code,~Dead
          
            Matches scopes containing "Code" but not "Dead", with level 1.
graal.DumpOnError = false                                                [Boolean]
          Send compiler IR to dump handlers on error.
graal.DumpOnPhaseChange = null                                            [String]
          Dump a before and after graph if the named phase changes the
          graph.%nThe argument is substring matched against the simple name of
          the phase class
graal.DumpPath = "graal_dumps"                                            [String]
          The directory where various Graal dump files are written.
graal.DumpingErrorsAreFatal = false                                      [Boolean]
          Treat any exceptions during dumping as fatal.
graal.DuplicateIrreducibleLoops = true                                   [Boolean]
          When enabled, some limited amount of duplication will be performed in
          order compile code containing irreducible loops.
graal.DynamicCountersPrintGroupSeparator = true                          [Boolean]
          Use grouping separators for number printing
graal.EagerSnippets := true                                              [Boolean]
          Eagerly construct extra snippet info.
graal.EscapeAnalysisIterations = 2                                       [Integer]
graal.EscapeAnalysisLoopCutoff = 20                                      [Integer]
graal.EscapeAnalyzeOnly = null                                            [String]
graal.ExactFullUnrollMaxNodes = 800                                      [Integer]
graal.ExactPartialUnrollMaxNodes = 200                                   [Integer]
graal.ExhaustiveHeapScan = false                                         [Boolean]
          Scan all objects reachable from roots for analysis. By default false.
graal.ExitVMOnException = false                                          [Boolean]
          Alias for CompilationFailureAction=ExitVM.
graal.ExtendedAsserts = false                                            [Boolean]
          Enable extended asserts which slow down analysis.
graal.FailedLoopExplosionIsFatal = false                                 [Boolean]
          Do not bail out but throw an exception on failed loop explosion.
graal.FallbackExecutorRuntimeJavaArg = ""                               [String[]]
          Internal option used to specify runtime java arguments for
          FallbackExecutor.
graal.ForceDumpGraphsBeforeCompilation = false                           [Boolean]
          Force-dump graphs before compilation
graal.FullUnroll = true                                                  [Boolean]
graal.FullUnrollConstantCompareBoost = 15                                [Integer]
graal.FullUnrollMaxApplication = 60                                      [Integer]
graal.FullUnrollMaxIterations = 600                                      [Integer]
graal.FullUnrollMaxNodes = 400                                           [Integer]
graal.GCDebugStartCycle = -1                                             [Integer]
          Start tracing compiled GC barriers after N garbage collections
          (disabled if N <= 0).
graal.GenLoopSafepoints = true                                           [Boolean]
graal.GeneratePIC = false                                                [Boolean]
          Generate position independent code
graal.GenericDynamicCounters = false                                     [Boolean]
          Turn on the benchmark counters, and displays the results on VM shutdown
graal.GraalArithmeticStubs = false                                       [Boolean]
          Use Graal arithmetic stubs instead of HotSpot stubs where possible
graal.GraalCompileOnly = null                                             [String]
          A filter applied to a method the VM has selected for compilation by
          Graal. A method not matching the filter is redirected to a lower tier
          compiler. The filter format is the same as for the MethodFilter option.
graal.GraphCompressionThreshold = 70                                     [Integer]
          Graal graph compression is performed when percent of live nodes falls
          below this value
graal.GuardPriorities = true                                             [Boolean]
graal.HeapVerificationFailureIsFatal = true                              [Boolean]
          Failed verification of the heap (if enabled) causes termination.
graal.HotSpotDeoptExplicitExceptions = false                             [Boolean]
          Testing only option that forces deopts for exception throws
graal.HotSpotPostOnExceptions = false                                    [Boolean]
          Testing only option that forces deopts for exception throws
graal.HotSpotPrintInlining = false                                       [Boolean]
          Print inlining optimizations
graal.HybridStaticContext = false                                        [Boolean]
          Enable hybrid context for static methods, i.e. uses invocation site as
          context for static methods.
graal.ImageObjectTreeExpandRoots = ""                                     [String]
          Override the default suppression of specified roots. See: Reports.md.
graal.ImageObjectTreeExpandTypes = ""                                     [String]
          Override the default suppression of specified types. See: Reports.md.
graal.ImageObjectTreeSuppressRoots = ""                                   [String]
          Suppress the expansion of specified roots. See: Reports.md.
graal.ImageObjectTreeSuppressTypes = ""                                   [String]
          Suppress the expansion of specified types. See: Reports.md.
graal.ImmutableCode = false                                              [Boolean]
          Try to avoid emitting code where patching is required
graal.Inline = true                                                      [Boolean]
          Enable inlining
graal.InlineDuringParsing = true                                         [Boolean]
          Inlines trivial methods during bytecode parsing.
graal.InlineDuringParsingMaxDepth = 10                                   [Integer]
          Maximum depth when inlining during bytecode parsing.
graal.InlineEverything = false                                           [Boolean]
graal.InlineIntrinsicsDuringParsing = true                               [Boolean]
          Inlines intrinsic methods during bytecode parsing.
graal.InlineMegamorphicCalls = true                                      [Boolean]
          Inline calls with megamorphic type profile (i.e., not all types could
          be recorded).
graal.InlineMonomorphicCalls = true                                      [Boolean]
          Inline calls with monomorphic type profile.
graal.InlinePartialIntrinsicExitDuringParsing = true                     [Boolean]
          Inlines partial intrinsic exits during bytecode parsing when possible.
          A partial intrinsic exit is a call within an intrinsic to the method
          being intrinsified and denotes semantics of the original method that
          the intrinsic does not support.
graal.InlinePolymorphicCalls = true                                      [Boolean]
          Inline calls with polymorphic type profile.
graal.InlineVTableStubs = true                                           [Boolean]
graal.InliningDepthError = 1000                                          [Integer]
          Maximum inlining depth during partial evaluation before reporting an
          infinite recursion
graal.InspectServerContentPath = "inspect"                                [String]
          Path to the contents of the Inspect web server.
graal.InstallSegfaultHandler = null                                      [Boolean]
          Install segfault handler that prints register contents and full Java
          stacktrace. Default: enabled for an executable, disabled for a shared
          library.
graal.InterceptBailout = false                                           [Boolean]
          Intercept also bailout exceptions
graal.Intrinsify = true                                                  [Boolean]
          Use compiler intrinsifications.
graal.LIRDynMoveProfileMethod = false                                    [Boolean]
          Enable dynamic move profiling per method.
graal.LIROptConstantLoadOptimization = true                              [Boolean]
          Enable constant load optimization.
graal.LIROptControlFlowOptimizer = true                                  [Boolean]
graal.LIROptEdgeMoveOptimizer = true                                     [Boolean]
graal.LIROptLSRAEliminateSpillMoves = true                               [Boolean]
          Enable spill move elimination.
graal.LIROptLSRAOptimizeSpillPosition = true                             [Boolean]
          Enable spill position optimization
graal.LIROptLSStackSlotAllocator = true                                  [Boolean]
          Use linear scan stack slot allocation.
graal.LIROptNullCheckOptimizer = true                                    [Boolean]
graal.LIROptRedundantMoveElimination = true                              [Boolean]
graal.LIROptStackMoveOptimizer = true                                    [Boolean]
graal.LIROptimization = true                                             [Boolean]
          Enable LIR level optimiztations.
graal.LIRProfileMethods = false                                          [Boolean]
          Enables profiling of methods.
graal.LIRProfileMoves = false                                            [Boolean]
          Enables profiling of move types on LIR level. Move types are for
          example stores (register to stack), constant loads (constant to
          register) or copies (register to register).
graal.LSRAOptSplitOnly = false                                           [Boolean]
          LSRA optimization: Only split but do not reassign
graal.LSRAOptimization = false                                           [Boolean]
          Enable LSRA optimization
graal.LibGraalManagementDelay = 1000                                     [Integer]
          Milliseconds to delay initialization of the libgraal JMX interface.
          Specify a negative value to disable the interface altogether.
graal.LimitInlinedInvokes = 5.0                                           [Double]
graal.LimitObjectArrayLength = false                                     [Boolean]
          Enable a limit for the number of objects recorded for each type of a
          type state before disabling heap sensitivity for that type. The
          analysis must be heap sensitive.
graal.ListMetrics = false                                                [Boolean]
          Lists on the console at VM shutdown the metric names available to the
          Timers, Counters and MemUseTrackers options. Note that this only lists
          the metrics that were initialized during the VM execution and so will
          not include metrics for compiler code that is not executed.
graal.LoadExceptionObjectInVM = false                                    [Boolean]
          Use a VM runtime call to load and clear the exception object from the
          thread at the start of a compiled exception handler.
graal.Log = null                                                          [String]
          Pattern for specifying scopes in which logging is enabled. See the Dump
          option for the pattern syntax.
graal.LogFile = null                                                      [String]
          File to which logging is sent. A %p in the name will be replaced with a
          string identifying the process, usually the process id and %t will be
          replaced by System.currentTimeMillis(). If the current runtime is in an
          isolate, then %i will be replaced by '<isolate id>' otherwise %i is
          removed. An %I is the same as %i except that the replacement is
          '<isolate id>@<isolate address>'. Using %o as filename sends logging to
          System.out whereas %e sends logging to System.err.
graal.LogVerbose = false                                                 [Boolean]
          Enable more verbose log output when available
graal.LoopHeaderAlignment = 16                                           [Integer]
          Alignment in bytes for loop header blocks.
graal.LoopMaxUnswitch = 3                                                [Integer]
graal.LoopPeeling = true                                                 [Boolean]
graal.LoopPredication = true                                             [Boolean]
graal.LoopPredicationMainPath = true                                     [Boolean]
graal.LoopUnswitch = true                                                [Boolean]
graal.LoopUnswitchFrequencyBoost = 10.0                                   [Double]
graal.LoopUnswitchMaxIncrease = 500                                      [Integer]
graal.LoopUnswitchTrivial = 10                                           [Integer]
graal.MatchExpressions = true                                            [Boolean]
          Allow backend to match complex expressions.
graal.MaxCallingContextDepth = 0                                         [Integer]
          The maximum length of the methods context chains.
graal.MaxCallingContextWidth = 0                                         [Integer]
          The maximum number of contexts to record for a method. It only affects
          the analysis when the max and min calling context depth are different.
graal.MaxCompilationProblemsPerAction = 2                                [Integer]
          The maximum number of compilation failures to handle with the action
          specified by CompilationFailureAction before changing to a less verbose
          action. This does not apply to the ExitVM action.
graal.MaxConstantObjectsPerType = 100                                    [Integer]
          The maximum number of constant objects recorded for each type before
          merging the constants into one unique constant object per type. The
          analysis must be heap sensitive. It has a minimum value of 1.
graal.MaxDirectMemorySize = 0                                               [Long]
          Maximum total size of NIO direct-buffer allocations
graal.MaxDuplicationFactor = 2.0                                          [Double]
          How much duplication can happen because of irreducible loops before
          bailing out.
graal.MaxHeapContextDepth = 0                                            [Integer]
          The maximum length of the context used to model a heap object in
          addition to the allocation site; used only when ContextSensitiveHeap is
          enabled.
graal.MaxHeapContextWidth = 0                                            [Integer]
          The maximum number of contexts to record for a heap object. It only
          affects the analysis when the max and min calling context depth are
          different.
graal.MaxHeapSize = 0                                                       [Long]
          The maximum heap size at run-time, in bytes.
graal.MaxJavaStackTraceDepth = 1024                                      [Integer]
          The maximum number of lines in the stack trace for Java exceptions (0
          means all)
graal.MaxNewSize = 0                                                        [Long]
          The maximum size of the young generation at run-time, in bytes
graal.MaxObjectSetSize = 100                                             [Integer]
          The maximum number of objects recorded for each type of a type state
          before disabling heap sensitivity for that type. The analysis must be
          heap sensitive. It has a minimum value of 1.
graal.MaxTemplatesPerSnippet = 50                                        [Integer]
graal.MaximumDesiredSize = 20000                                         [Integer]
          Maximum desired size of the compiler graph in nodes.
graal.MaximumEscapeAnalysisArrayLength = 128                             [Integer]
          The maximum length of an array that will be escape analyzed.
graal.MaximumHeapSizePercent = 80                                        [Integer]
          The maximum heap size as percent of physical memory
graal.MaximumInliningSize = 300                                          [Integer]
          Inlining is explored up to this number of nodes in the graph for each
          call site.
graal.MaximumLoopExplosionCount = 10000                                  [Integer]
          Max number of loop explosions per method.
graal.MaximumRecursiveInlining = 5                                       [Integer]
          Maximum level of recursive inlining.
graal.MaximumYoungGenerationSizePercent = 10                             [Integer]
          The maximum size of the young generation as a percentage of the maximum
          heap size
graal.MegamorphicInliningMinMethodProbability = 0.33                      [Double]
          Minimum probability for methods to be inlined for megamorphic type
          profiles.
graal.MemUseTrackers = null                                               [String]
          Comma separated names of memory usage trackers that are enabled
          irrespective of the value for TrackMemUse option. An empty value
          enables all memory usage trackers unconditionally.
graal.MethodFilter = null                                                 [String]
          Pattern for matching methods. The syntax for a pattern is:
          
            SourcePatterns = SourcePattern ["," SourcePatterns] .
            SourcePattern = [ "~" ] [ Class "." ] method [ "(" [ Parameter { ";" Parameter } ] ")" ] .
            Parameter = Class | "int" | "long" | "float" | "double" | "short" | "char" | "boolean" .
            Class = { package "." } class .
          
          Glob pattern matching (*, ?) is allowed in all parts of the source pattern.
          The "~" prefix negates the pattern.
          
          Positive patterns are joined by an "or" operator: "A,B" matches anything
          matched by "A" or "B". Negative patterns are joined by "and not": "~A,~B"
          matches anything not matched by "A" and not matched by "B". "A,~B,~C,D"
          matches anything matched by "A" or "D" and not matched by "B" and not
          matched by "C".
          
          A set of patterns containing negative patterns but no positive ones contains
          an implicit positive "*" pattern: "~A,~B" is equivalent to "*,~A,~B".
          
          Examples of method filters:
          ---------
            *
          
            Matches all methods in all classes.
          ---------
            canonical(CanonicalizerTool;LogicNode;LogicNode)
          
            Matches all methods named "canonical", with the first parameter of type
            "CanonicalizerTool", and the second and third parameters of type
            "LogicNode".
            The packages of the parameter types are irrelevant.
          ---------
            arraycopy(Object;;;;)
          
            Matches all methods named "arraycopy", with the first parameter
            of type "Object", and four more parameters of any type. The
            packages of the parameter types are irrelevant.
          ---------
            org.graalvm.compiler.nodes.PhiNode.*
          
            Matches all methods in the class "org.graalvm.compiler.nodes.PhiNode".
          ---------
            org.graalvm.compiler.nodes.*.canonical
          
            Matches all methods named "canonical" in classes in the package
            "org.graalvm.compiler.nodes".
          ---------
            arraycopy,toString
          
            Matches all methods named "arraycopy" or "toString", meaning that ',' acts
            as an "or" operator.
          ---------
            java.util.*.*.,~java.util.*Array*.*
            java.util.*.*.,~*Array*.*
          
            These patterns are equivalent and match all methods in the package
            "java.util" except for classes that have "Array" in their name.
          ---------
            ~java.util.*.*
          
            Matches all methods in all classes in all packages except for anything in
            the "java.util" package.
graal.MethodFilterRootOnly = false                                       [Boolean]
          Only check MethodFilter against the root method in the context if true,
          otherwise check all methods
graal.MethodInlineBailoutLimit = 5000                                    [Integer]
          Per-compilation method inlining exploration limit before giving up (use
          0 to disable)
graal.MetricsFile = null                                                  [String]
          File to which metrics are dumped per compilation.
          A CSV format is used if the file ends with .csv otherwise a more
          human readable format is used. The fields in the CSV format are:
                     compilable - method being compiled
            compilable_identity - identity hash code of compilable
                 compilation_nr - where this compilation lies in the ordered
                                  sequence of all compilations identified by
                                  compilable_identity
                 compilation_id - runtime issued identifier for the compilation
                    metric_name - name of metric
                   metric_value - value of metric
graal.MinCallingContextDepth = 0                                         [Integer]
          The minimum length of the methods context chains.
graal.MinHeapContextDepth = 0                                            [Integer]
          The minimum length of the context used to model a heap object in
          addition to the allocation site; used only when ContextSensitiveHeap is
          enabled.
graal.MinHeapSize = 0                                                       [Long]
          The minimum heap size at run-time, in bytes.
graal.MinimalBulkZeroingSize = 2048                                      [Integer]
          If applicable, use bulk zeroing instructions when the zeroing size in
          bytes exceeds this threshold.
graal.MinimumPeelFrequency = 0.35                                          [Float]
graal.NDCV = 0                                                           [Integer]
          Run level for NoDeadCodeVerifyHandler (0 = off, 1 = info, 2 = verbose,
          3 = fatal)
graal.NodeCounters = false                                               [Boolean]
          Counts the number of instances of each node class.
graal.NonFatalIdenticalCompilationSnapshots = 20                         [Integer]
          Number of contiguous identical compiler thread stack traces allowed
          before the VM exits on the basis of a stuck compilation.
graal.ObjdumpExecutables = null                                           [String]
          Comma separated list of candidate GNU objdump executables. If not
          specified, disassembling via GNU objdump is disabled. Otherwise, the
          first existing executable in the list is used.
graal.OmitHotExceptionStacktrace = false                                 [Boolean]
graal.OptAssumptions = true                                              [Boolean]
graal.OptConvertDeoptsToGuards = true                                    [Boolean]
graal.OptDeoptimizationGrouping = true                                   [Boolean]
graal.OptDevirtualizeInvokesOptimistically = true                        [Boolean]
graal.OptEarlyReadElimination = true                                     [Boolean]
graal.OptEliminateGuards = true                                          [Boolean]
graal.OptFloatingReads = true                                            [Boolean]
graal.OptImplicitNullChecks = true                                       [Boolean]
graal.OptReadElimination = true                                          [Boolean]
graal.OptScheduleOutOfLoops = true                                       [Boolean]
graal.PartialEscapeAnalysis = true                                       [Boolean]
graal.PartialUnroll = true                                               [Boolean]
graal.PeelALot = false                                                   [Boolean]
graal.PercentTimeInIncrementalCollection = 50                            [Integer]
          Percentage of total collection time that should be spent on young
          generation collections.
graal.PreferContainerQuotaForCPUCount = true                             [Boolean]
          Calculate the container CPU availability based on the value of quotas
          (if set), when true. Otherwise, use the CPU shares value, provided it
          is less than quota.
graal.PrintAnalysisCallTree = false                                      [Boolean]
          Print analysis call tree, a breadth-first tree reduction of the call
          graph.
graal.PrintAnalysisStatistics = false                                    [Boolean]
          Print analysis results statistics.
graal.PrintBackendCFG = false                                            [Boolean]
          Enable dumping LIR, register allocation and code generation info to the
          C1Visualizer.
graal.PrintBlockMapping = false                                          [Boolean]
          Enable dumping CFG built during initial BciBlockMapping
graal.PrintCFG = false                                                   [Boolean]
          Enable dumping to the C1Visualizer. Enabling this option implies
          PrintBackendCFG.
graal.PrintCanonicalGraphStringFlavor = 0                                [Integer]
          Choose format used when dumping canonical text for graphs: 0 gives a
          scheduled graph (better for spotting changes involving the schedule)
          while 1 gives a CFG containing expressions rooted at fixed nodes
          (better for spotting small structure differences)
graal.PrintCanonicalGraphStrings = false                                 [Boolean]
          Enable dumping canonical text from for graphs.
graal.PrintCompilation = false                                           [Boolean]
          Print an informational line to the console for each completed
          compilation.
graal.PrintDetailedAllocationProfiling = true                            [Boolean]
          Print detailed information for each allocation site
graal.PrintFlags = null                                                   [String]
          Show available options based on comma-separated option-types (allowed
          categories: User, Expert, Debug).
graal.PrintFlagsWithExtraHelp = null                                      [String]
          Print extra help, if available, based on comma-separated option names.
          Pass * to show all options that contain extra help.
graal.PrintGC = false                                                    [Boolean]
          Print summary GC information after each collection
graal.PrintGCSummary = false                                             [Boolean]
          Print summary GC information after application main method returns.
graal.PrintGCTimeStamps = false                                          [Boolean]
          Print a time stamp at each collection, if +PrintGC or +VerboseGC.
graal.PrintGCTimes = false                                               [Boolean]
          Print the time for each of the phases of each collection, if
          +VerboseGC.
graal.PrintGraph = File                                                   [String]
          Where IdealGraphVisualizer graph dumps triggered by Dump or DumpOnError
          should be written.
          The accepted values are:
                File - Dump IGV graphs to the local file system (see DumpPath).
             Network - Dump IGV graphs to the network destination specified by PrintGraphHost and PrintGraphPort.
                       If a network connection cannot be opened, dumping falls back to file dumping. 
             Disable - Do not dump IGV graphs.
graal.PrintGraphFile = true                                              [Boolean]
          Setting to true sets PrintGraph=file, setting to false sets
          PrintGraph=network
graal.PrintGraphHost = "127.0.0.1"                                        [String]
          Host part of the address to which graphs are dumped.
graal.PrintGraphPort = 4445                                              [Integer]
          Port part of the address to which graphs are dumped in binary format.
graal.PrintGraphWithSchedule = false                                     [Boolean]
          Schedule graphs as they are dumped.
graal.PrintHeapShape = false                                             [Boolean]
          Print the shape of the heap before and after each collection, if
          +VerboseGC.
graal.PrintIRWithLIR = false                                             [Boolean]
          Print HIR along side LIR as the latter is generated
graal.PrintImageObjectTree = false                                       [Boolean]
          Print boot image object hierarchy.
graal.PrintLIRWithAssembly = false                                       [Boolean]
          Include the LIR as comments with the final assembly.
graal.PrintPointsToStatistics = false                                    [Boolean]
          Report analysis statistics.
graal.PrintProfilingInformation = false                                  [Boolean]
          Print profiling information when parsing a method's bytecode
graal.PrintSynchronizedAnalysis = false                                  [Boolean]
          Print types used for Java synchronization.
graal.ProbabilisticProfiling = true                                      [Boolean]
          Control probabilistic profiling on AMD64
graal.ProfileAllocations = false                                         [Boolean]
          Enable profiling of allocation sites.
graal.ProfileAllocationsContext = AllocatingMethod                        [String]
          Control the naming and granularity of the counters when using
          ProfileAllocations.
          The accepted values are:
                  AllocatingMethod - a counter per method
                   InstanceOrArray - one counter for all instance allocations and
                                     one counter for all array allocations 
                     AllocatedType - one counter per allocated type
            AllocatedTypesInMethod - one counter per allocated type, per method
           
graal.ProfileAnalysisOperations = false                                  [Boolean]
          Track the progress of the static analysis.
graal.ProfileBackedges = true                                            [Boolean]
          Emit profiling of backedges
graal.ProfileCompiledMethods = false                                     [Boolean]
graal.ProfileConstantObjects = false                                     [Boolean]
          Track the creation of constant objects.
graal.ProfileInvokes = true                                              [Boolean]
          Emit profiling of invokes
graal.ProfileMonitors = false                                            [Boolean]
          Enable profiling of monitor operations.
graal.ProfileSimpleMethods = true                                        [Boolean]
          Profile simple methods
graal.RawConditionalElimination = true                                   [Boolean]
graal.ReadEliminationMaxLoopVisits = 5                                   [Integer]
graal.ReassociateExpressions = true                                      [Boolean]
          Re-associate loop invariants and constants.
graal.ReduceDCE = true                                                   [Boolean]
          Disable optional dead code eliminations
graal.RegisterPressure = null                                             [String]
          Comma separated list of registers that register allocation is limited
          to.
graal.RelaxTypeFlowStateConstraints = true                               [Boolean]
          Allow a type flow state to contain types not compatible with its
          declared type.
graal.RemoveNeverExecutedCode = true                                     [Boolean]
graal.RemoveSaturatedTypeFlows = true                                    [Boolean]
          Enable the type flow saturation analysis performance optimization.
graal.ReplaceInputsWithConstantsBasedOnStamps = true                     [Boolean]
graal.SafepointPromptnessFailureNanos = 0                                   [Long]
          Exit the VM if I can not come to a safepoint in this many nanoseconds.
          0 implies forever.
graal.SafepointPromptnessWarningNanos = 0                                   [Long]
          Print a warning if I can not come to a safepoint in this many
          nanoseconds. 0 implies forever.
graal.ScanObjectsParallel = true                                         [Boolean]
          Object scanning in parallel
graal.ShowConfiguration = none                                            [String]
          Writes to the VM log information about the compiler configuration
          selected.
graal.ShowDumpFiles = false                                              [Boolean]
          Print the name of each dump file path as it's created.
graal.ShowSubstitutionSourceInfo = false                                 [Boolean]
          Controls whether the source position information of snippets and method
          substitutions are exposed to HotSpot. Can be useful when profiling to
          get more precise position information.
graal.SimpleFastInflatedLocking = true                                   [Boolean]
          Handle simple cases for inflated monitors in the fast-path.
graal.SimpleMethodCalls = 1                                              [Integer]
          Maximum number of calls in a simple method
graal.SimpleMethodGraphSize = 256                                        [Integer]
          Maximum number of nodes in a graph for a simple method
graal.SimpleMethodIndirectCalls = 0                                      [Integer]
          Maximum number of indirect calls in a simple moethod
graal.SmallCompiledLowLevelGraphSize = 330                               [Integer]
          If the previous low-level graph size of the method exceeds the
          threshold, it is not inlined.
graal.SnippetCounters = false                                            [Boolean]
          Enable counters for various paths in snippets.
graal.SpectrePHTBarriers = None                                           [String]
          Select a strategy to mitigate speculative bounds check bypass (aka
          Spectre-PHT or Spectre V1).
          This is an experimental option - execution of untrusted code is not supported by GraalVM CE.
          The accepted values are:
                            None - No mitigations are used in JIT compiled code.
                      AllTargets - Speculative execution on all conditional branch targets is
                                   stopped using speculative execution barrier instructions.
                    GuardTargets - Branch targets relevant to Java memory safety are instrumented
                                   with barrier instructions. This option has less performance impact
                                   than AllTargets. 
            NonDeoptGuardTargets - Same as GuardTargets, except that branches which deoptimize are not
                                   protected since they can not be executed repeatedly and are thus less
                                   likely to be successfully exploited in an attack.
          
                                   
          Note that all modes except "None" will also instrument branch target blocks containing UNSAFE memory accesses
          with barrier instructions.
graal.SpectrePHTIndexMasking = false                                     [Boolean]
          Mask indices to scope access to allocation size after bounds check.
graal.StackSize = 0                                                         [Long]
          The size of each thread stack at run-time, in bytes.
graal.StressExplicitExceptionCode = false                                [Boolean]
          Stress the code emitting explicit exception throwing code.
graal.StressInvokeWithExceptionNode = false                              [Boolean]
          Stress the code emitting invokes with explicit exception edges.
graal.StressTestEarlyReads = false                                       [Boolean]
          Stress the code by emitting reads at earliest instead of latest point.
graal.StringIndexOfLimit = 4096                                          [Integer]
          String.indexOf invocations will be evaluated at compile time if the
          receiver is a constant and its length is lower than this value.
graal.SupportJsrBytecodes = true                                         [Boolean]
graal.SupportOSRWithLocks = true                                         [Boolean]
          Support OSR compilations with locks. If DeoptAfterOSR is true we can
          per definition not have unbalanced enter/exits mappings. If
          DeoptAfterOSR is false insert artificial monitor enters after the
          OSRStart to have balanced enter/exits in the graph.
graal.TearDownFailureNanos = 0                                              [Long]
          The number of nanoseconds before tearing down an isolate gives a
          failure message. 0 implies no message.
graal.TearDownWarningNanos = 0                                              [Long]
          The number of nanoseconds before and between which tearing down an
          isolate gives a warning message. 0 implies no warning.
graal.TierABackedgeNotifyFreqLog = 16                                    [Integer]
          Backedge notification frequency
graal.TierABackedgeProfileProbabilityLog = 12                            [Integer]
          Backedge profile probability
graal.TierAInvokeInlineeNotifyFreqLog = -1                               [Integer]
          Inlinee invocation notification frequency (-1 means count, but do not
          notify)
graal.TierAInvokeNotifyFreqLog = 13                                      [Integer]
          Invocation notification frequency
graal.TierAInvokeProfileProbabilityLog = 8                               [Integer]
          Invocation profile probability
graal.TieredAOT = false                                                  [Boolean]
          Do profiling and callbacks to tiered runtime
graal.Time = null                                                         [String]
          Pattern for specifying scopes in which timing is enabled. See the Dump
          option for the pattern syntax. An empty value enables all timers
          unconditionally.
graal.TimedDynamicCounters = -1                                          [Integer]
          Turn on the benchmark counters, and displays the results every n
          milliseconds
graal.Timers = null                                                       [String]
          Comma separated names of timers that are enabled irrespective of the
          value for Time option. An empty value enables all timers
          unconditionally.
graal.TraceBytecodeParserLevel = 0                                       [Integer]
          The trace level for the bytecode parser. A value of 1 enables
          instruction tracing and any greater value emits a frame state trace
          just prior to each instruction trace.Instruction tracing output from
          multiple compiler threads will be interleaved so use of this option
          make most sense for single threaded compilation. The MethodFilter
          option can be used to refine tracing to selected methods.
graal.TraceCodeCache = false                                             [Boolean]
          Print logging information for runtime code cache modifications
graal.TraceDeoptimization = false                                        [Boolean]
          Print logging information for every deoptimization
graal.TraceDeoptimizationDetails = false                                 [Boolean]
          Print verbose logging information for every deoptimization
graal.TraceEscapeAnalysis = false                                        [Boolean]
graal.TraceExceptionHandlerStub = false                                  [Boolean]
          Trace execution of stub used to handle an exception thrown by a callee.
graal.TraceHeapChunks = false                                            [Boolean]
          Trace heap chunks during collections, if +VerboseGC and
          +PrintHeapShape.
graal.TraceInlineDuringParsing = false                                   [Boolean]
          Traces inlining performed during bytecode parsing.
graal.TraceInlining = false                                              [Boolean]
          Enable tracing of inlining decisions.
          Output format:
            compilation of 'Signature of the compilation root method':
              at 'Signature of the root method' ['Bytecode index']: <'Phase'> 'Child method signature': 'Decision made about this callsite'
                at 'Signature of the child method' ['Bytecode index']: 
                   |--<'Phase 1'> 'Grandchild method signature': 'First decision made about this callsite'
                   \--<'Phase 2'> 'Grandchild method signature': 'Second decision made about this callsite'
                at 'Signature of the child method' ['Bytecode index']: <'Phase'> 'Another grandchild method signature': 'The only decision made about this callsite.'
graal.TraceInliningForStubsAndSnippets = false                           [Boolean]
          Enable inlining decision tracing in stubs and snippets.
graal.TraceLIRGeneratorLevel = 0                                         [Integer]
          The trace level for the LIR generator
graal.TraceMonitorsMethodFilter = null                                    [String]
          Trace monitor operations in methods whose fully qualified name contains
          this substring.
graal.TraceMonitorsTypeFilter = null                                      [String]
          Trace monitor operations on objects whose type contains this substring.
graal.TraceParserPlugins = false                                         [Boolean]
          Traces use of plugins during bytecode parsing.
graal.TraceUnwindStub = false                                            [Boolean]
          Trace execution of the stub that routes an exception to a handler in
          the calling frame.
graal.TrackAccessChain = false                                           [Boolean]
          Track the callers for methods and accessing methods for fields.
graal.TrackInputFlows = false                                            [Boolean]
          Track the input for type flows.
graal.TrackMemUse = null                                                  [String]
          Pattern for specifying scopes in which memory use tracking is enabled.
          See the Dump option for the pattern syntax. An empty value enables all
          memory use trackers unconditionally.
graal.TrackNodeInsertion = false                                         [Boolean]
          Track source stack trace where a node was inserted into the graph.
graal.TrackNodeSourcePosition = false                                    [Boolean]
          Track the NodeSourcePosition.
graal.TrivialInliningSize = 10                                           [Integer]
          Graphs with less than this number of nodes are trivial and therefore
          always inlined.
graal.TruffleCompilerConfiguration = null                                 [String]
          Select a compiler configuration for Truffle compilation (default: use
          Graal system compiler configuration).
graal.TrustFinalDefaultFields = true                                     [Boolean]
          Determines whether to treat final fields with default values as
          constant.
graal.TypeCheckMaxHints = 2                                              [Integer]
          The maximum number of profiled types that will be used when compiling a
          profiled type check. Note that TypeCheckMinProfileHitProbability also
          influences whether profiling info is used in compiled type checks.
graal.TypeCheckMinProfileHitProbability = 0.5                             [Double]
          If the probability that a type check will hit one the profiled types
          (up to TypeCheckMaxHints) is below this value, the type check will be
          compiled without profiling info
graal.TypeFlowSaturationCutoff = 20                                      [Integer]
          The maximum number of types recorded in a type flow. -1 indicates no
          limitation.
graal.UnresolvedIsError = true                                           [Boolean]
          Report unresolved elements as errors.
graal.UnrollMaxIterations = 16                                           [Integer]
graal.UseBranchesWithin32ByteBoundary = false                            [Boolean]
          Force branch instructions to align with 32-bytes boundary, to mitigate
          the jcc erratum. See
          https://www.intel.com/content/dam/support/us/en/documents/processors/mitigations-jump-conditional-code-erratum.pdf
          for more details. If not set explicitly, the default value will be
          determined according to the CPU model.
graal.UseCompilationStatistics = false                                   [Boolean]
          Enables CompilationStatistics.
graal.UseEncodedGraphs = false                                           [Boolean]
          Encode and decode snippets and substitutions before parsing to test
          libgraal code path. This option is ignored in the context of libgraal.
graal.UseExceptionProbability = true                                     [Boolean]
graal.UseGraalStubs = true                                               [Boolean]
          Use Graal-generated stubs for complicated LIR operations instead of
          embedding all the emitted code.
graal.UseLoopLimitChecks = true                                          [Boolean]
graal.UseSnippetGraphCache = true                                        [Boolean]
          Use a cache for snippet graphs.
graal.UseSnippetTemplateCache = true                                     [Boolean]
          Use a LRU cache for snippet templates.
graal.UseTrappingNullChecks = true                                       [Boolean]
          Use traps for null checks instead of explicit null-checks
graal.UseTypeCheckHints = true                                           [Boolean]
graal.VerboseGC = false                                                  [Boolean]
          Print more information about the heap before and after each collection
graal.Verify = null                                                       [String]
          Pattern for specifying scopes in which logging is enabled. See the Dump
          option for the pattern syntax.
graal.VerifyBalancedMonitors = false                                     [Boolean]
          Emit extra code to dynamically check monitor operations are balanced.
graal.VerifyGraalGraphEdges = false                                      [Boolean]
          Perform expensive verification of graph inputs, usages, successors and
          predecessors
graal.VerifyGraalGraphs = true                                           [Boolean]
          Verify graphs often during compilation when assertions are turned on
graal.VerifyGraalPhasesSize = false                                      [Boolean]
          Verify before - after relation of the relative, computed, code size of
          a graph
graal.VerifyHeapAtReturn = false                                         [Boolean]
          Perform platform dependent validation of the Java heap at returns
graal.VerifyKillCFGUnusedNodes = false                                   [Boolean]
          Verify that there are no new unused nodes when performing killCFG
graal.VerifyPhases = false                                               [Boolean]
graal.WriteableCodeCache = false                                         [Boolean]
          Allocate code cache with write access, allowing inlining of objects
graal.ZapStackOnMethodEntry = false                                      [Boolean]
