{ "switches" : [ {"prefix":"-XX:","name":"AOTInline","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Perform method inlining in the AOT compiled native image.<\/pre>"},
{"prefix":"-XX:","name":"AOTInliningDepthToSizeRate","type":"double","defaultValue":"2.5","availability":"Runtime"},
{"prefix":"-XX:","name":"AOTInliningSizeMaximum","type":"int","defaultValue":"300","availability":"Runtime"},
{"prefix":"-XX:","name":"AOTInliningSizeMinimum","type":"int","defaultValue":"50","availability":"Runtime"},
{"prefix":"-XX:","name":"AOTPriorityInline","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Enable use of priority inlining during AOT compilation.<\/pre>"},
{"prefix":"-XX:","name":"AOTTrivialInline","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Perform trivial method inlining in the AOT compiled native image.<\/pre>"},
{"prefix":"-XX:","name":"AOTVerifyOops","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Generate verify oop checks in AOT code.<\/pre>"},
{"prefix":"-XX:","name":"APIFunctionPrefix","type":"String","defaultValue":"\"graal_\"","availability":"Hosted","description":"<pre>Prefix that is added to the names of API functions. <\/pre>"},
{"prefix":"-XX:","name":"ASMInstructionProfiling","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Enables instruction profiling on assembler level. Valid values are a comma separated list of supported instructions. \nCompare with subclasses of Assembler.InstructionCounter.<\/pre>"},
{"prefix":"-XX:","name":"AbortOnBenchmarkCounterOverflow","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Abort VM with SIGILL if benchmark counters controlled by the (Generic|Timed|Benchmark)DynamicCounters.<\/pre>"},
{"prefix":"-XX:","name":"ActiveProcessorCount","type":"int","defaultValue":"-1","availability":"Runtime","description":"<pre>Overwrites the available number of processors provided by the OS. Any value <= 0 means using the processor count from \nthe OS.<\/pre>"},
{"prefix":"-XX:","name":"AddAllCharsets","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Make all hosted charsets available at run time.<\/pre>"},
{"prefix":"-XX:","name":"AddAllFileSystemProviders","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Make all supported providers returned by FileSystemProvider.installedProviders() available at run time.<\/pre>"},
{"prefix":"-XX:","name":"AdditionalLinkerOptions","type":"","defaultValue":"\"\"","availability":"Hosted","description":"<pre>String which would be appended to the linker call. <\/pre>"},
{"prefix":"-XX:","name":"AggregatedMetricsFile","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>File to which aggregated metrics are dumped at shutdown. A CSV format is used if the file ends with .csv otherwise a \nmore human readable format is used. If not specified, metrics are dumped to the console.<\/pre>"},
{"prefix":"-XX:","name":"AliasArrayTypeFlows","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Model all array type flows using a unique elements type flow abstraction.<\/pre>"},
{"prefix":"-XX:","name":"AlignedHeapChunkSize","type":"int","defaultValue":"1048576","availability":"Hosted","description":"<pre>The size of an aligned chunk. <\/pre>"},
{"prefix":"-XX:","name":"AllocateInstancePrefetchLines","type":"int","defaultValue":"1","availability":"Hosted","description":"<pre>Number of cache lines to load after the object address using prefetch instructions. <\/pre>"},
{"prefix":"-XX:","name":"AllocatePrefetchDistance","type":"int","defaultValue":"256","availability":"Hosted","description":"<pre>Sets the size (in bytes) of the prefetch distance for object allocation. Memory about to be written with the value of \nnew objects is prefetched up to this distance starting from the address of the last allocated object. Each Java thread\nhas its own allocation point.<\/pre>"},
{"prefix":"-XX:","name":"AllocatePrefetchInstr","type":"int","defaultValue":"0","availability":"Hosted","description":"<pre>Sets the prefetch instruction to prefetch ahead of the allocation pointer. Possible values are from 0 to 3. The actual \ninstructions behind the values depend on the platform.<\/pre>"},
{"prefix":"-XX:","name":"AllocatePrefetchLines","type":"int","defaultValue":"3","availability":"Hosted","description":"<pre>Number of cache lines to load after the array allocation using prefetch instructions. <\/pre>"},
{"prefix":"-XX:","name":"AllocatePrefetchStepSize","type":"int","defaultValue":"16","availability":"Hosted","description":"<pre>Sets the step size (in bytes) for sequential prefetch instructions. <\/pre>"},
{"prefix":"-XX:","name":"AllocatePrefetchStyle","type":"int","defaultValue":"1","availability":"Hosted","description":"<pre>Generated code style for prefetch instructions: for 0 or less no prefetch instructions are generated and for 1 or more \nprefetch instructions are introduced after each allocation.<\/pre>"},
{"prefix":"-XX:","name":"AllocationBeforePhysicalMemorySize","type":"int","defaultValue":"1048576","availability":"Hosted","description":"<pre>\nBytes that can be allocated before (re-)querying the physical memory size.<\/pre>"},
{"prefix":"-XX:","name":"AllocationProfilingThreshold","type":"int","defaultValue":"1048576","availability":"Runtime","description":"<pre>The minimum size in bytes required for printing an allocation profiling entry. <\/pre>"},
{"prefix":"-XX:","name":"AllocationProfiling","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Enable runtime profiling of allocation.<\/pre>"},
{"prefix":"-XX:","name":"AllocationSiteSensitiveHeap","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>A context sensitive heap means that each heap allocated object is modeled by using at least the allocation site.<\/pre>"},
{"prefix":"-XX:","name":"AllowFoldMethods","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Allow MethodTypeFlow to see @Fold methods.<\/pre>"},
{"prefix":"-XX:","name":"AllowIncompleteClasspath","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Allow image building with an incomplete class path: report type resolution errors at run time when they are accessed the \nfirst time, instead of during image building.<\/pre>"},
{"prefix":"-XX:","name":"AllowJRTFileSystem","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Enable support for reading Java modules (jimage format) and the jrt:// file system. Requires java.home to be set at \nruntime.<\/pre>"},
{"prefix":"-XX:","name":"AllowVMInspection","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Enables features that allow the VM to be inspected during runtime.<\/pre>"},
{"prefix":"-XX:","name":"AllowedNumberOfInaccurateProfiles","type":"int","defaultValue":"30","availability":"Hosted","description":"<pre>Threshold for number of points with inaccurate profiles. <\/pre>"},
{"prefix":"-XX:","name":"AlwaysInlineIntrinsics","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Unconditionally inline intrinsics.<\/pre>"},
{"prefix":"-XX:","name":"AlwaysInlineVTableStubs","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"AlwaysPreTouch","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Force all freshly committed pages to be pre-touched.<\/pre>"},
{"prefix":"-XX:","name":"AnalysisContextSensitivity","type":"String","defaultValue":"\"insens\"","availability":"Runtime","description":"<pre>Controls the static analysis context sensitivity. Available values: insens (context insensitive analysis), allocsens \n(context insensitive analysis, context insensitive heap, allocation site sensitive heap), _1obj (1 object sensitive\nanalysis with a context insensitive heap), _2obj1h (2 object sensitive with a 1 context sensitive heap).<\/pre>"},
{"prefix":"-XX:","name":"AnalysisSizeCutoff","type":"int","defaultValue":"8","availability":"Runtime","description":"<pre>The maximum size of type and method profiles returned by the static analysis. -1 indicates no limitation. <\/pre>"},
{"prefix":"-XX:","name":"AnalysisStatisticsFile","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Analysis results statistics file.<\/pre>"},
{"prefix":"-XX:","name":"AuxiliaryEngineCache","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Enable the auxiliary engine cache features at runtime.<\/pre>"},
{"prefix":"-XX:","name":"BaseTargetSpending","type":"int","defaultValue":"120","availability":"Runtime","description":"<pre>The base target spending used to estimate the inlining threshold; the higher, the likelier it is to inline. <\/pre>"},
{"prefix":"-XX:","name":"BenchmarkCounterPrintingCutoff","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Use a cutoff to print only most significant counters.<\/pre>"},
{"prefix":"-XX:","name":"BenchmarkCountersDumpDynamic","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Dump dynamic counters.<\/pre>"},
{"prefix":"-XX:","name":"BenchmarkCountersDumpStatic","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Dump static counters.<\/pre>"},
{"prefix":"-XX:","name":"BenchmarkCountersFile","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>File to which benchmark counters are dumped. A CSV format is used if the file ends with .csv otherwise a more human \nreadable format is used. The fields in the CSV format are: category, group, name, value.<\/pre>"},
{"prefix":"-XX:","name":"BenchmarkDynamicCounters","type":"String","defaultValue":"None [Extra help available]","availability":"Runtime","description":"<pre>Turn on the benchmark counters. The format of this option is:.<\/pre>"},
{"prefix":"-XX:","name":"BitcodeOptimizations","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Enable LLVM bitcode optimizations.<\/pre>"},
{"prefix":"-XX:","name":"BlockZeroingLowLimit","type":"int","defaultValue":"512","availability":"Runtime","description":"<pre>Minimum amount of bytes when block zeroing used. (SPARC only). <\/pre>"},
{"prefix":"-XX:","name":"BootstrapInitializeOnly","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Do not compile anything on bootstrap but just initialize the compiler.<\/pre>"},
{"prefix":"-XX:","name":"BootstrapTimeout","type":"double","defaultValue":"15.0","availability":"Runtime","description":"<pre>Maximum time in minutes to spend bootstrapping (0 to disable this limit). <\/pre>"},
{"prefix":"-XX:","name":"BootstrapWatchDogCriticalRateRatio","type":"double","defaultValue":"0.25","availability":"Runtime","description":"<pre>Ratio of the maximum compilation rate below which the bootstrap compilation rate must not fall (0 or less disables \nmonitoring).<\/pre>"},
{"prefix":"-XX:","name":"BreakChainedPhis","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Break chained phis.<\/pre>"},
{"prefix":"-XX:","name":"CAPCacheDir","type":"","defaultValue":"\"\"","availability":"Hosted","description":"<pre>Directory where information generated by the CAnnotation Processor are cached. <\/pre>"},
{"prefix":"-XX:","name":"CCompilerOption","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Provide custom C compiler option used for query code compilation.<\/pre>"},
{"prefix":"-XX:","name":"CCompilerPath","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Provide custom path to C compiler used for query code compilation and linking.<\/pre>"},
{"prefix":"-XX:","name":"CLibraryPath","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Search path for C libraries passed to the linker (list of comma-separated directories).<\/pre>"},
{"prefix":"-XX:","name":"CPUFeatures","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Comma separated list of CPU features that will be used for image generation. The specific options available are platform \ndependent. For AMD64, SSE and SSE2 are enabled by default. Available features are: CX8, CMOV, FXSR, HT, MMX,\nAMD_3DNOW_PREFETCH, SSE3, SSSE3, SSE4A, SSE4_1, SSE4_2, POPCNT, LZCNT, TSC, TSCINV, AVX, AVX2, AES, ERMS, CLMUL, BMI1,\nBMI2, RTM, ADX, AVX512F, AVX512DQ, AVX512PF, AVX512ER, AVX512CD, AVX512BW, AVX512VL, SHA, FMA. On AArch64, no features\nare enabled by default. Available features are: FP, ASIMD, EVTSTRM, AES, PMULL, SHA1, SHA2, CRC32, LSE, STXR_PREFETCH,\nA53MAC.<\/pre>"},
{"prefix":"-XX:","name":"CStandard","type":"String","defaultValue":"\"C89\"","availability":"Hosted","description":"<pre>C standard to use in header files. Possible values are: [C89, C99, C11]. <\/pre>"},
{"prefix":"-XX:","name":"CallGraphCompilerNodeLimit","type":"int","defaultValue":"35000","availability":"Runtime","description":"<pre>Controls the maximum number of compiler nodes that can appear in the call graph. <\/pre>"},
{"prefix":"-XX:","name":"CallGraphSizeLimit","type":"int","defaultValue":"1200","availability":"Runtime","description":"<pre>Controls the maximum size of the call graph before ceasing inlining. <\/pre>"},
{"prefix":"-XX:","name":"CallGraphSizePenaltyCoefficient","type":"double","defaultValue":"0.001","availability":"Runtime","description":"<pre>Reduces the likelihood of exploring call graph subtrees that are large. <\/pre>"},
{"prefix":"-XX:","name":"CanOmitFrame","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"CanonicalGraphStringsCheckConstants","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Exclude virtual nodes when dumping canonical text for graphs.<\/pre>"},
{"prefix":"-XX:","name":"CanonicalGraphStringsExcludeVirtuals","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Exclude virtual nodes when dumping canonical text for graphs.<\/pre>"},
{"prefix":"-XX:","name":"CanonicalGraphStringsRemoveIdentities","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Attempts to remove object identity hashes when dumping canonical text for graphs.<\/pre>"},
{"prefix":"-XX:","name":"CheckRecurringCallbackOnNativeToJavaTransition","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Test whether a thread's recurring callback is pending on each transition from native code to Java.<\/pre>"},
{"prefix":"-XX:","name":"CheckToolchain","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Check if native-toolchain is known to work with native-image.<\/pre>"},
{"prefix":"-XX:","name":"ClassInitialization","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>A comma-separated list of classes appended with their initialization strategy (':build_time', ':rerun', or ':run_time').<\/pre>"},
{"prefix":"-XX:","name":"Class","type":"","defaultValue":"\"\"","availability":"Hosted","description":"<pre>Class containing the default entry point method. Optional if --shared is used. <\/pre>"},
{"prefix":"-XX:","name":"ClearMetricsAfterBootstrap","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Clear the debug metrics after bootstrap.<\/pre>"},
{"prefix":"-XX:","name":"CodeAlignment","type":"int","defaultValue":"16","availability":"Hosted","description":"<pre>Alignment of AOT and JIT compiled code in bytes. <\/pre>"},
{"prefix":"-XX:","name":"CodeCacheCounters","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Count accesses to the image and runtime code info table.<\/pre>"},
{"prefix":"-XX:","name":"CodeInfoEncoderCounters","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Statistics about code and deoptimization information.<\/pre>"},
{"prefix":"-XX:","name":"CodeInfoIndexGranularity","type":"int","defaultValue":"256","availability":"Hosted","description":"<pre>The granularity of the index for looking up code metadata. Should be a power of 2. Larger values make the index smaller, \nbut access slower.<\/pre>"},
{"prefix":"-XX:","name":"CollectYoungGenerationSeparately","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Determines if a full GC collects the young generation separately or together with the old generation.<\/pre>"},
{"prefix":"-XX:","name":"CompilationBailoutAsFailure","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Treat compilation bailouts like compilation failures.<\/pre>"},
{"prefix":"-XX:","name":"CompilationCountLimit","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>The number of compilations allowed for any method before the VM exits (a value of 0 means there is no limit). <\/pre>"},
{"prefix":"-XX:","name":"CompilationExcludePhases","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Exclude certain phases from compilation, either unconditionally or with a method filter.<\/pre>"},
{"prefix":"-XX:","name":"CompilationExpirationPeriod","type":"int","defaultValue":"300","availability":"Runtime","description":"<pre>Time limit in seconds before a compilation expires (0 to disable the limit). The compilation alarm will be implicitly \ndisabled if assertions are enabled.<\/pre>"},
{"prefix":"-XX:","name":"CompilationFailureAction","type":"String","defaultValue":"Silent","availability":"Runtime","description":"<pre>Specifies the action to take when compilation fails. [Extra help available] <\/pre>"},
{"prefix":"-XX:","name":"CompilationIsolateAddressSpaceSize","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>Size of the reserved address space of each compilation isolate (0: default for new isolates). <\/pre>"},
{"prefix":"-XX:","name":"CompilationWatchDogStackTraceInterval","type":"double","defaultValue":"60.0","availability":"Runtime","description":"<pre>\nInterval in seconds between a watch dog reporting stack traces for long running compilations.<\/pre>"},
{"prefix":"-XX:","name":"CompilationWatchDogStartDelay","type":"double","defaultValue":"0.0","availability":"Runtime","description":"<pre>Delay in seconds before watch dog monitoring a compilation (0 disables monitoring). <\/pre>"},
{"prefix":"-XX:","name":"CompileGraalWithC1Only","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>In tiered mode compile Graal and JVMCI using optimized first tier code.<\/pre>"},
{"prefix":"-XX:","name":"CompileInIsolates","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Activate runtime compilation in separate isolates (enable support during image build with option \nSupportCompileInIsolates).<\/pre>"},
{"prefix":"-XX:","name":"CompileInPerThreadReusedIsolates","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Create one reusable isolate per compilation thread as opposed to one isolate per compilation (enable through \nCompileInIsolates).<\/pre>"},
{"prefix":"-XX:","name":"CompilerBackend","type":"String","defaultValue":"\"lir\"","availability":"Hosted","description":"<pre>Backend used by the compiler. <\/pre>"},
{"prefix":"-XX:","name":"CompilerConfiguration","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Names the compiler configuration to use. If omitted, the compiler configuration with the highest auto-selection priority \nis used. To see the set of available configurations, supply the value 'help' to this option.<\/pre>"},
{"prefix":"-XX:","name":"CompilerNodePenaltyCoefficient","type":"double","defaultValue":"0.006","availability":"Runtime","description":"<pre>Controls the likelihood of exploring subtrees that already have a lot of code during inlining. <\/pre>"},
{"prefix":"-XX:","name":"ConcGCThreads","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>Number of threads concurrent gc will use. <\/pre>"},
{"prefix":"-XX:","name":"ConditionalEliminationMaxIterations","type":"int","defaultValue":"4","availability":"Runtime"},
{"prefix":"-XX:","name":"ConditionalElimination","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"ConfigurationFileDirectories","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Directories directly containing configuration files for dynamic features at runtime.<\/pre>"},
{"prefix":"-XX:","name":"ConfigurationResourceRoots","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Resource path above configuration resources for dynamic features at runtime.<\/pre>"},
{"prefix":"-XX:","name":"ConsiderVectorizableLoops","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Consider the vectorizability of loop during the duplication of a merge inside a loop.There are rare cases where \nduplication can destroy vectorization.<\/pre>"},
{"prefix":"-XX:","name":"CostNewLiveVariable","type":"int","defaultValue":"4","availability":"Runtime","description":"<pre>PullThroughPhiOptimization: Abstract cost for the creation of a new live value: new values can have a negativeimpact on \nregister allocation, therefore we penalize it.<\/pre>"},
{"prefix":"-XX:","name":"CostReductionFactor","type":"double","defaultValue":"32.0","availability":"Runtime","description":"<pre>PullThroughPhiOptimization: Cost/Benefit heuristic for EE floating node duplication: reduce cost by a constant factor \nwhen comparing with relative benefit.<\/pre>"},
{"prefix":"-XX:","name":"CountWriteBarriers","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Instrument write barriers with counters.<\/pre>"},
{"prefix":"-XX:","name":"Count","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Pattern for specifying scopes in which counters are enabled. See the Dump option for the pattern syntax. An empty value \nenables all counters unconditionally.<\/pre>"},
{"prefix":"-XX:","name":"Counters","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Comma separated names of counters that are enabled irrespective of the value for Count option. An empty value enables \nall counters unconditionally.<\/pre>"},
{"prefix":"-XX:","name":"CrashAt","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Pattern for method(s) that will trigger an exception when compiled. This option exists to test handling compilation \ncrashes gracefully. See the MethodFilter option for the pattern syntax. A ':Bailout' suffix will raise a bailout\nexception and a ':PermanentBailout' suffix will raise a permanent bailout exception.<\/pre>"},
{"prefix":"-XX:","name":"CustomLD","type":"","defaultValue":"\"\"","availability":"Hosted","description":"<pre>Path to a custom ld binary for LLVM linking. <\/pre>"},
{"prefix":"-XX:","name":"CutoffCodeSizePenaltyCoefficient","type":"String","defaultValue":"1.0E-5","availability":"Runtime","description":"<pre>Controls the likelihood of further exploring subtrees with a lot of code during inlining. <\/pre>"},
{"prefix":"-XX:","name":"DashboardAll","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>In the dashboard dump, include all available information about the native image (this takes precedence over more \nspecific flags).<\/pre>"},
{"prefix":"-XX:","name":"DashboardBgv","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Set dashboard to use BGV format for dump.<\/pre>"},
{"prefix":"-XX:","name":"DashboardCode","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>In the dashboard dump, include the breakdown of the code size across different packages.<\/pre>"},
{"prefix":"-XX:","name":"DashboardDump","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Enable dashboard dumps to the specified file.<\/pre>"},
{"prefix":"-XX:","name":"DashboardHeap","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>In the dashboard dump, include the breakdown of the object sizes in the heap across different classes.<\/pre>"},
{"prefix":"-XX:","name":"DashboardJson","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Set dashboard to use JSON format for dump.<\/pre>"},
{"prefix":"-XX:","name":"DashboardPointsTo","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>In the dashboard dump, include the information about the points-to analysis.<\/pre>"},
{"prefix":"-XX:","name":"DashboardPretty","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Set dashboard to use pretty print in JSON format.<\/pre>"},
{"prefix":"-XX:","name":"DeadlockWatchdogExitOnTimeout","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Exit the image builder VM after printing call stacks.<\/pre>"},
{"prefix":"-XX:","name":"DeadlockWatchdogInterval","type":"int","defaultValue":"10","availability":"Hosted","description":"<pre>The interval in minutes between watchdog checks (0 disables the watchdog). <\/pre>"},
{"prefix":"-XX:","name":"DebugInfoSourceCacheRoot","type":"String","defaultValue":"\"sources\"","availability":"Hosted","description":"<pre>Directory under which to create source file cache for Application or GraalVM classes. <\/pre>"},
{"prefix":"-XX:","name":"DebugInfoSourceSearchPath","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Search path for source files for Application or GraalVM classes (list of comma-separated directories or jar files).<\/pre>"},
{"prefix":"-XX:","name":"DebugLoopInversion","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Debug the loop inversion transformation.<\/pre>"},
{"prefix":"-XX:","name":"DebugPeelingSynonyms","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Debug simulation synonyms during simulation-based loop peeling.<\/pre>"},
{"prefix":"-XX:","name":"DebugStubsAndSnippets","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enable debug output for stub code generation and snippet preparation.<\/pre>"},
{"prefix":"-XX:","name":"Debug","type":"int","defaultValue":"0","availability":"Hosted","description":"<pre>Control debug information output: 0 - no debuginfo, 1 - AOT code debuginfo, 2 - AOT and runtime code debuginfo. <\/pre>"},
{"prefix":"-XX:","name":"DeleteLocalSymbols","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Use linker option to remove all local symbols from image.<\/pre>"},
{"prefix":"-XX:","name":"DeoptALot","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"DeoptAfterOSR","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Deoptimize OSR compiled code when the OSR entry loop is finished if there is no mature profile available for the rest of \nthe method.<\/pre>"},
{"prefix":"-XX:","name":"DeoptimizeAll","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Compiles all methods as deoptimization targets for testing.<\/pre>"},
{"prefix":"-XX:","name":"DeoptsToDisableOptimisticOptimization","type":"int","defaultValue":"40","availability":"Runtime"},
{"prefix":"-XX:","name":"DetailedAsserts","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enable expensive assertions if normal assertions (i.e. -ea or -esa) are enabled.<\/pre>"},
{"prefix":"-XX:","name":"DetectUserDirectoriesInImageHeap","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>When set to true, the image generator verifies that the image heap does not contain a home directory as a substring.<\/pre>"},
{"prefix":"-XX:","name":"DiagnoseDumpLevel","type":"int","defaultValue":"3","availability":"Runtime","description":"<pre>Specify the DumpLevel if CompilationFailureAction#Diagnose is used.See CompilationFailureAction for details. \nfile:doc-files/CompilationFailureActionHelp.txt.<\/pre>"},
{"prefix":"-XX:","name":"DisableExplicitGC","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Ignore calls to System.gc().<\/pre>"},
{"prefix":"-XX:","name":"DisableIntercept","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Disable intercepting exceptions in debug scopes.<\/pre>"},
{"prefix":"-XX:","name":"DivertParameterReturningMethod","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Analysis: Detect methods that return one of their parameters and hardwire the parameter straight to the return.<\/pre>"},
{"prefix":"-XX:","name":"DominatorUsageTreeMaxDepth","type":"int","defaultValue":"16","availability":"Runtime"},
{"prefix":"-XX:","name":"DumpHeap","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Dump the heap at a specific time during image building.The option accepts a list of comma separated phases, any of: \nafter-analysis, before-compilation.<\/pre>"},
{"prefix":"-XX:","name":"DumpLLVMStackMap","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Dump contents of the generated stackmap to the specified file.<\/pre>"},
{"prefix":"-XX:","name":"DumpOnError","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Send compiler IR to dump handlers on error.<\/pre>"},
{"prefix":"-XX:","name":"DumpOnPhaseChange","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Dump a before and after graph if the named phase changes the graph.%nThe argument is substring matched against the \nsimple name of the phase class.<\/pre>"},
{"prefix":"-XX:","name":"DumpPath","type":"String","defaultValue":"\"graal_dumps\"","availability":"Runtime","description":"<pre>The directory where various Graal dump files are written. <\/pre>"},
{"prefix":"-XX:","name":"DumpTargetInfo","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Show native-toolchain information and image-build settings.<\/pre>"},
{"prefix":"-XX:","name":"DumpThreadStacksOnSignal","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Dumps all thread stacktraces on SIGQUIT/SIGBREAK.<\/pre>"},
{"prefix":"-XX:","name":"Dump","type":"String","defaultValue":"None [Extra help available]","availability":"Runtime","description":"<pre>Filter pattern for specifying scopes in which dumping is enabled.<\/pre>"},
{"prefix":"-XX:","name":"DumpingErrorsAreFatal","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Treat any exceptions during dumping as fatal.<\/pre>"},
{"prefix":"-XX:","name":"DuplicateALot","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Perform Duplications as long as there is any sane improvement.<\/pre>"},
{"prefix":"-XX:","name":"DuplicateIrreducibleLoops","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>When enabled, some limited amount of duplication will be performed in order compile code containing irreducible loops.<\/pre>"},
{"prefix":"-XX:","name":"DuplicationBudgetFactorLate","type":"double","defaultValue":"0.5","availability":"Runtime","description":"<pre>Percentage in node cost graph size for the late duplication budget. Computed relative to the methods code size. <\/pre>"},
{"prefix":"-XX:","name":"DuplicationBudgetFactor","type":"double","defaultValue":"0.25","availability":"Runtime","description":"<pre>Percentage in node cost graph size for the duplication budget. Computed relative to the methods code size. <\/pre>"},
{"prefix":"-XX:","name":"DuplicationCostReductionFactor","type":"int","defaultValue":"64","availability":"Runtime","description":"<pre>Cost/Benefit heuristic for EE simulation-based code duplication: reduce cost by a constant factor when comparing with \nrelative benefit.<\/pre>"},
{"prefix":"-XX:","name":"DuplicationMinBranchFrequency","type":"double","defaultValue":"0.66","availability":"Runtime","description":"<pre>Ignore low frequency branches during duplication. <\/pre>"},
{"prefix":"-XX:","name":"DynamicCountersPrintGroupSeparator","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Use grouping separators for number printing.<\/pre>"},
{"prefix":"-XX:","name":"DynamicProxyConfigurationFiles","type":"String","defaultValue":"None [Extra help available]","availability":"Hosted","description":"<pre>One or several (comma-separated) paths to JSON files that specify lists of interfaces that define Java proxy classes.<\/pre>"},
{"prefix":"-XX:","name":"DynamicProxyConfigurationResources","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Resources describing program elements to be made available for reflection (see ProxyConfigurationFiles).<\/pre>"},
{"prefix":"-XX:","name":"DynamicProxyTracing","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Enable trace logging for dynamic proxy.<\/pre>"},
{"prefix":"-XX:","name":"EagerSnippets","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Eagerly construct extra snippet info.<\/pre>"},
{"prefix":"-XX:","name":"EmitStringEncodingSubstitutions","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Emit substitutions for UTF16 and latin1 compression.<\/pre>"},
{"prefix":"-XX:","name":"EnableAllSecurityServices","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Add all security service classes to the generated image.<\/pre>"},
{"prefix":"-XX:","name":"EnableLoggingFeature","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Enable the feature that provides support for logging.<\/pre>"},
{"prefix":"-XX:","name":"EnablePGOContextSensitivity","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Enables context sensitivity in PGO.<\/pre>"},
{"prefix":"-XX:","name":"EnableSecurityServicesFeature","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Enable the feature that provides support for security services.<\/pre>"},
{"prefix":"-XX:","name":"EnableURLProtocols","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>List of comma separated URL protocols to enable.<\/pre>"},
{"prefix":"-XX:","name":"EnforceMaxRuntimeCompileMethods","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Enforce checking of maximum number of methods allowed for runtime compilation. Useful for checking in the gate that the \nnumber of methods does not go up without a good reason.<\/pre>"},
{"prefix":"-XX:","name":"EnterpriseCloneReadElimination","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Try to eliminate array clone operations by handling clone operations in early read elimination.<\/pre>"},
{"prefix":"-XX:","name":"EnterpriseEarlyReadElimination","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Run more read eliminations early in the compilation pipeline.<\/pre>"},
{"prefix":"-XX:","name":"EnterprisePartialUnroll","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Enable EE version of partial loop unrolling that considers more loop shapes for unrolling.<\/pre>"},
{"prefix":"-XX:","name":"EntryPointNamePrefix","type":"","defaultValue":"\"\"","availability":"Hosted","description":"<pre>Prefix that is added to the names of entry point methods. <\/pre>"},
{"prefix":"-XX:","name":"ErgoHeapSizeLimit","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>Maximum ergonomically set heap size (in bytes); zero means use MaxRAM * MaxRAMPercentage / 100. <\/pre>"},
{"prefix":"-XX:","name":"EscapeAnalysisIterations","type":"int","defaultValue":"2","availability":"Runtime"},
{"prefix":"-XX:","name":"EscapeAnalysisLoopCutoff","type":"int","defaultValue":"20","availability":"Runtime"},
{"prefix":"-XX:","name":"EscapeAnalyzeOnly","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"ExactFullUnrollMaxNodes","type":"int","defaultValue":"800","availability":"Runtime"},
{"prefix":"-XX:","name":"ExactPartialUnrollMaxNodes","type":"int","defaultValue":"200","availability":"Runtime"},
{"prefix":"-XX:","name":"ExcludeFunctionFromDuplication","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Exclude compilations that MethodFilter.match this string from the duplication optimization.<\/pre>"},
{"prefix":"-XX:","name":"ExcludeResources","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Regexp to match names of resources to be excluded from the image.<\/pre>"},
{"prefix":"-XX:","name":"ExhaustiveHeapScan","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Scan all objects reachable from roots for analysis. By default false.<\/pre>"},
{"prefix":"-XX:","name":"ExitAfterAnalysis","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Exit after analysis.<\/pre>"},
{"prefix":"-XX:","name":"ExitAfterCAPCache","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Exit image generation after C Annotation Processor Cache creation.<\/pre>"},
{"prefix":"-XX:","name":"ExitAfterQueryCodeGeneration","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Output query code for target platform without executing it.<\/pre>"},
{"prefix":"-XX:","name":"ExitAfterRelocatableImageWrite","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Exit after writing relocatable file.<\/pre>"},
{"prefix":"-XX:","name":"ExitVMOnException","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Alias for CompilationFailureAction=ExitVM.<\/pre>"},
{"prefix":"-XX:","name":"ExpandAllProximityBonusInertia","type":"double","defaultValue":"2.0","availability":"Runtime","description":"<pre>The inertia at which the expand-all proximity bonus decreases with the number of yet unexpanded nodes. <\/pre>"},
{"prefix":"-XX:","name":"ExpandAllProximityBonus","type":"double","defaultValue":"6.0","availability":"Runtime","description":"<pre>The decrease in call graph expansion pressure when there are few call nodes left to explore. <\/pre>"},
{"prefix":"-XX:","name":"ExpansionInertiaBaseValue","type":"int","defaultValue":"550","availability":"Runtime","description":"<pre>The slowness at which the expansion pressure grows with code size; the higher it is, the slower the pressure growth. <\/pre>"},
{"prefix":"-XX:","name":"ExpansionInertiaInvokeBonus","type":"int","defaultValue":"14","availability":"Runtime","description":"<pre>The extra slowness at which the expansion pressure grows with the code size, for each extra invoke node. <\/pre>"},
{"prefix":"-XX:","name":"ExpansionInertiaMax","type":"int","defaultValue":"2000","availability":"Runtime","description":"<pre>The max slowness at which the expansion pressure grows with the code size. <\/pre>"},
{"prefix":"-XX:","name":"ExplicitGCInvokesConcurrent","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>A System.gc() request invokes a concurrent collection.<\/pre>"},
{"prefix":"-XX:","name":"ExtendedAsserts","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enable extended asserts which slow down analysis.<\/pre>"},
{"prefix":"-XX:","name":"ExtendedLinuxHeaders","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Enable support for linux-specific headers.<\/pre>"},
{"prefix":"-XX:","name":"FailedLoopExplosionIsFatal","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Do not bail out but throw an exception on failed loop explosion.<\/pre>"},
{"prefix":"-XX:","name":"FallbackExecutorClasspath","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Internal option used to specify Classpath for FallbackExecutor.<\/pre>"},
{"prefix":"-XX:","name":"FallbackExecutorJavaArg","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Internal option used to specify java arguments for FallbackExecutor.<\/pre>"},
{"prefix":"-XX:","name":"FallbackExecutorMainClass","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Internal option used to specify MainClass for FallbackExecutor.<\/pre>"},
{"prefix":"-XX:","name":"FallbackExecutorRuntimeJavaArg","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Internal option used to specify runtime java arguments for FallbackExecutor.<\/pre>"},
{"prefix":"-XX:","name":"FallbackExecutorSystemProperty","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Internal option used to specify system properties for FallbackExecutor.<\/pre>"},
{"prefix":"-XX:","name":"FallbackThreshold","type":"int","defaultValue":"5","availability":"Hosted","description":"<pre>Define when fallback-image generation should be used. <\/pre>"},
{"prefix":"-XX:","name":"Features","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>A comma-separated list of fully qualified Feature implementation classes.<\/pre>"},
{"prefix":"-XX:","name":"FlightRecorder","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enable Java Flight Recorder.<\/pre>"},
{"prefix":"-XX:","name":"FoldSecurityManagerGetter","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Fold SecurityManager getter.<\/pre>"},
{"prefix":"-XX:","name":"ForceDumpGraphsBeforeCompilation","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Force-dump graphs before compilation.<\/pre>"},
{"prefix":"-XX:","name":"ForceNoROSectionRelocations","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Use only a writable native image heap (requires ld.gold linker).<\/pre>"},
{"prefix":"-XX:","name":"ForceUnroll","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Force partial unrolling of loops if at all possible.<\/pre>"},
{"prefix":"-XX:","name":"FullUnrollAsPEACleanup","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Perform full unrolling as a Partial Escape Analysis Cleanup.<\/pre>"},
{"prefix":"-XX:","name":"FullUnrollConstantCompareBoost","type":"int","defaultValue":"15","availability":"Runtime"},
{"prefix":"-XX:","name":"FullUnrollMaxApplication","type":"int","defaultValue":"60","availability":"Runtime"},
{"prefix":"-XX:","name":"FullUnrollMaxIterations","type":"int","defaultValue":"600","availability":"Runtime"},
{"prefix":"-XX:","name":"FullUnrollMaxNodes","type":"int","defaultValue":"400","availability":"Runtime"},
{"prefix":"-XX:","name":"FullUnroll","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"G1ConcMarkStepDurationMillis","type":"double","defaultValue":"10.0","availability":"Runtime","description":"<pre>Target duration of individual concurrent marking steps in milliseconds. <\/pre>"},
{"prefix":"-XX:","name":"G1ConcRSHotCardLimit","type":"int","defaultValue":"4","availability":"Runtime","description":"<pre>The threshold that defines (>=) a hot card. <\/pre>"},
{"prefix":"-XX:","name":"G1ConcRSLogCacheSize","type":"int","defaultValue":"10","availability":"Runtime","description":"<pre>Log base 2 of the length of conc RS hot-card cache. <\/pre>"},
{"prefix":"-XX:","name":"G1ConcRefinementGreenZone","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>The number of update buffers that are left in the queue by the concurrent processing threads. Will be selected \nergonomically by default.<\/pre>"},
{"prefix":"-XX:","name":"G1ConcRefinementRedZone","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>Maximum number of enqueued update buffers before mutator threads start processing new ones instead of enqueueing them. \nWill be selected ergonomically by default.<\/pre>"},
{"prefix":"-XX:","name":"G1ConcRefinementServiceIntervalMillis","type":"int","defaultValue":"300","availability":"Runtime","description":"<pre>The last concurrent refinement thread wakes up every specified number of milliseconds to do miscellaneous work. <\/pre>"},
{"prefix":"-XX:","name":"G1ConcRefinementThreads","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>The number of parallel rem set update threads. Will be set ergonomically by default. <\/pre>"},
{"prefix":"-XX:","name":"G1ConcRefinementThresholdStep","type":"int","defaultValue":"2","availability":"Runtime","description":"<pre>Each time the rset update queue increases by this amount activate the next refinement thread if available. The actual \nstep size will be selected ergonomically by default, with this value used to determine a lower bound.<\/pre>"},
{"prefix":"-XX:","name":"G1ConcRefinementYellowZone","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>Number of enqueued update buffers that will trigger concurrent processing. Will be selected ergonomically by default. <\/pre>"},
{"prefix":"-XX:","name":"G1ConfidencePercent","type":"int","defaultValue":"50","availability":"Runtime","description":"<pre>Confidence level for MMU/pause predictions. <\/pre>"},
{"prefix":"-XX:","name":"G1DebugLevel","type":"String","defaultValue":"\"product\"","availability":"Hosted","description":"<pre>Specifies the debug level of the linked G1 GC [product, fastdebug, or debug]. <\/pre>"},
{"prefix":"-XX:","name":"G1HeapRegionSize","type":"int","defaultValue":"1048576","availability":"Hosted","description":"<pre>Size of the G1 regions in bytes. Supported values are 1, 2, 4, 8, 16, or 32M. <\/pre>"},
{"prefix":"-XX:","name":"G1HeapWastePercent","type":"int","defaultValue":"5","availability":"Runtime","description":"<pre>Amount of space, expressed as a percentage of the heap size, that G1 is willing not to collect to avoid expensive GCs. <\/pre>"},
{"prefix":"-XX:","name":"G1MixedGCCountTarget","type":"int","defaultValue":"8","availability":"Runtime","description":"<pre>The target number of mixed GCs after a marking cycle. <\/pre>"},
{"prefix":"-XX:","name":"G1PeriodicGCInterval","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>Number of milliseconds after a previous GC to wait before triggering a periodic gc. A value of zero disables \nperiodically enforced gc cycles.<\/pre>"},
{"prefix":"-XX:","name":"G1PeriodicGCInvokesConcurrent","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Determines the kind of periodic GC. Set to true to have G1 perform a concurrent GC as periodic GC, otherwise use a STW \nFull GC.<\/pre>"},
{"prefix":"-XX:","name":"G1PeriodicGCSystemLoadThreshold","type":"double","defaultValue":"0.0","availability":"Runtime","description":"<pre>Maximum recent system wide load as returned by the 1m value of getloadavg() at which G1 triggers a periodic GC. A load \nabove this value cancels a given periodic GC. A value of zero disables this check.<\/pre>"},
{"prefix":"-XX:","name":"G1RSetRegionEntries","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>Max number of regions for which we keep bitmaps. Will be set ergonomically by default. <\/pre>"},
{"prefix":"-XX:","name":"G1RSetSparseRegionEntries","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>Max number of entries per region in a sparse table. Will be set ergonomically by default. <\/pre>"},
{"prefix":"-XX:","name":"G1RSetUpdatingPauseTimePercent","type":"int","defaultValue":"10","availability":"Runtime","description":"<pre>A target percentage of time that is allowed to be spend on process RS update buffers during the collection pause. <\/pre>"},
{"prefix":"-XX:","name":"G1RefProcDrainInterval","type":"int","defaultValue":"1000","availability":"Runtime","description":"<pre>The number of discovered reference objects to process before draining concurrent marking work queues. <\/pre>"},
{"prefix":"-XX:","name":"G1ReservePercent","type":"int","defaultValue":"10","availability":"Runtime","description":"<pre>It determines the minimum reserve we should have in the heap to minimize the probability of promotion failure. <\/pre>"},
{"prefix":"-XX:","name":"G1SATBBufferEnqueueingThresholdPercent","type":"int","defaultValue":"60","availability":"Runtime","description":"<pre>Before enqueueing them, each mutator thread tries to do some filtering on the SATB buffers it generates. If \npost-filtering the percentage of retained entries is over this threshold the buffer will be enqueued for processing. A\nvalue of 0 specifies that mutator threads should not do such filtering.<\/pre>"},
{"prefix":"-XX:","name":"G1SATBBufferSize","type":"int","defaultValue":"1024","availability":"Runtime","description":"<pre>Number of entries in an SATB log buffer. <\/pre>"},
{"prefix":"-XX:","name":"G1UpdateBufferSize","type":"int","defaultValue":"256","availability":"Runtime","description":"<pre>Size of an update buffer. <\/pre>"},
{"prefix":"-XX:","name":"G1UseAdaptiveConcRefinement","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Select green, yellow and red zones adaptively to meet the the pause requirements.<\/pre>"},
{"prefix":"-XX:","name":"G1UseAdaptiveIHOP","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Adaptively adjust the initiating heap occupancy from the initial value of InitiatingHeapOccupancyPercent. The policy \nattempts to start marking in time based on application behavior.<\/pre>"},
{"prefix":"-XX:","name":"G1VerifyBitmaps","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Verifies the consistency of the marking bitmaps.<\/pre>"},
{"prefix":"-XX:","name":"G1VerifyHeapRegionCodeRoots","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Verify the code root lists attached to each heap region.<\/pre>"},
{"prefix":"-XX:","name":"G1VerifyRSetsDuringFullGC","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>If true, perform verification of each heap region's remembered set when verifying the heap during a full GC.<\/pre>"},
{"prefix":"-XX:","name":"GCDebugStartCycle","type":"int","defaultValue":"-1","availability":"Runtime","description":"<pre>Start tracing compiled GC barriers after N garbage collections (disabled if N <= 0). <\/pre>"},
{"prefix":"-XX:","name":"GCDrainStackTargetSize","type":"int","defaultValue":"64","availability":"Runtime","description":"<pre>Number of entries we will try to leave on the stack during parallel gc. <\/pre>"},
{"prefix":"-XX:","name":"GCPauseIntervalMillis","type":"int","defaultValue":"201","availability":"Runtime","description":"<pre>Time slice for MMU specification. <\/pre>"},
{"prefix":"-XX:","name":"GCTimeRatio","type":"int","defaultValue":"12","availability":"Runtime","description":"<pre>Adaptive size policy application time to GC time ratio. <\/pre>"},
{"prefix":"-XX:","name":"GatherSafepointStatistics","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Gather statistics about each safepoint.<\/pre>"},
{"prefix":"-XX:","name":"GenLoopSafepoints","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"GenerateDebugInfo","type":"int","defaultValue":"0","availability":"Hosted","description":"<pre>Insert debug info into the generated native image or library. <\/pre>"},
{"prefix":"-XX:","name":"GeneratePIC","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Generate position independent code.<\/pre>"},
{"prefix":"-XX:","name":"GenerateRuntimeDebugInfo","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Generate debuginfo for runtime-compiled code.<\/pre>"},
{"prefix":"-XX:","name":"GenericDynamicCounters","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Turn on the benchmark counters, and displays the results on VM shutdown.<\/pre>"},
{"prefix":"-XX:","name":"GraalArithmeticStubs","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Use Graal arithmetic stubs instead of HotSpot stubs where possible.<\/pre>"},
{"prefix":"-XX:","name":"GraalCompileOnly","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>A filter applied to a method the VM has selected for compilation by Graal. A method not matching the filter is \nredirected to a lower tier compiler. The filter format is the same as for the MethodFilter option.<\/pre>"},
{"prefix":"-XX:","name":"GraphCompressionThreshold","type":"int","defaultValue":"70","availability":"Runtime","description":"<pre>Graal graph compression is performed when percent of live nodes falls below this value. <\/pre>"},
{"prefix":"-XX:","name":"GreyToBlackObjRefDemographics","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Develop demographics of the object references visited.<\/pre>"},
{"prefix":"-XX:","name":"GreyToBlackObjectVisitorDiagnosticHistory","type":"int","defaultValue":"0","availability":"Hosted","description":"<pre>\nLength of GreyToBlackObjectVisitor history for diagnostics. 0 implies no history is kept.<\/pre>"},
{"prefix":"-XX:","name":"GuardPriorities","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"HeapChunkHeaderPadding","type":"int","defaultValue":"0","availability":"Hosted","description":"<pre>Number of bytes at the beginning of each heap chunk that are not used for payload data, i.e., can be freely used as \nmetadata by the heap chunk provider.<\/pre>"},
{"prefix":"-XX:","name":"HeapSizePerGCThread","type":"int","defaultValue":"44040192","availability":"Runtime","description":"<pre>Size of heap (bytes) per GC thread used in calculating the number of GC threads. <\/pre>"},
{"prefix":"-XX:","name":"HeapVerificationFailureIsFatal","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Failed verification of the heap (if enabled) causes termination.<\/pre>"},
{"prefix":"-XX:","name":"HighTierPartialUnrolling","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Enable EE partial unrolling in high tier.<\/pre>"},
{"prefix":"-XX:","name":"HotSpotDeoptExplicitExceptions","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Testing only option that forces deopts for exception throws.<\/pre>"},
{"prefix":"-XX:","name":"HotSpotPostOnExceptions","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Testing only option that forces deopts for exception throws.<\/pre>"},
{"prefix":"-XX:","name":"HotSpotPrintInlining","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Print inlining optimizations.<\/pre>"},
{"prefix":"-XX:","name":"HybridStaticContext","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enable hybrid context for static methods, i.e. uses invocation site as context for static methods.<\/pre>"},
{"prefix":"-XX:","name":"IgnoreBadDuplications","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Ignore duplications with a bad benefit cost relation.<\/pre>"},
{"prefix":"-XX:","name":"ImageHeapCardMarking","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Enables card marking for image heap objects, which arranges them in chunks. Automatically enabled when supported. <\/pre>"},
{"prefix":"-XX:","name":"ImageObjectTreeExpandRoots","type":"","defaultValue":"\"\"","availability":"Runtime","description":"<pre>Override the default suppression of specified roots. See: Reports.md. <\/pre>"},
{"prefix":"-XX:","name":"ImageObjectTreeExpandTypes","type":"","defaultValue":"\"\"","availability":"Runtime","description":"<pre>Override the default suppression of specified types. See: Reports.md. <\/pre>"},
{"prefix":"-XX:","name":"ImageObjectTreeSuppressRoots","type":"","defaultValue":"\"\"","availability":"Runtime","description":"<pre>Suppress the expansion of specified roots. See: Reports.md. <\/pre>"},
{"prefix":"-XX:","name":"ImageObjectTreeSuppressTypes","type":"","defaultValue":"\"\"","availability":"Runtime","description":"<pre>Suppress the expansion of specified types. See: Reports.md. <\/pre>"},
{"prefix":"-XX:","name":"ImageSymbolsPrefix","type":"","defaultValue":"\"\"","availability":"Hosted","description":"<pre>Common prefix used by method symbols in image. <\/pre>"},
{"prefix":"-XX:","name":"ImmutableCode","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Try to avoid emitting code where patching is required.<\/pre>"},
{"prefix":"-XX:","name":"IncludeAllTimeZones","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>When true, all time zones will be pre-initialized in the image.<\/pre>"},
{"prefix":"-XX:","name":"IncludeLLVMDebugInfo","type":"int","defaultValue":"0","availability":"Hosted","description":"<pre>Include debugging info in the generated image (for LLVM backend). <\/pre>"},
{"prefix":"-XX:","name":"IncludeNodeSourcePositions","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Track NodeSourcePositions during runtime-compilation.<\/pre>"},
{"prefix":"-XX:","name":"IncludeResourceBundles","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Comma separated list of bundles to be included into the image.<\/pre>"},
{"prefix":"-XX:","name":"IncludeResources","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Regexp to match names of resources to be included in the image.<\/pre>"},
{"prefix":"-XX:","name":"IncludeTimeZones","type":"","defaultValue":"\"\"","availability":"Hosted","description":"<pre>The time zones, in addition to the default zone of the host, that will be pre-initialized in the image. <\/pre>"},
{"prefix":"-XX:","name":"InitialCollectionPolicy","type":"String","defaultValue":"\"com.oracle.svm.core.genscavenge.CollectionPolicy$BySpaceAndTime\"","availability":"Hosted","description":"<pre>\nThe initial garbage collection policy, as a fully-qualified class name (might require quotes or escaping).<\/pre>"},
{"prefix":"-XX:","name":"InitialHeapSize","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>Initial heap size (in bytes); zero means use ergonomics. <\/pre>"},
{"prefix":"-XX:","name":"InitialRAMPercentage","type":"double","defaultValue":"1.5625","availability":"Runtime","description":"<pre>Percentage of real memory used for initial heap size. <\/pre>"},
{"prefix":"-XX:","name":"InitiatingHeapOccupancyPercent","type":"int","defaultValue":"45","availability":"Runtime","description":"<pre>The percent occupancy (IHOP) of the current old generation capacity above which a concurrent mark cycle will be \ninitiated. Its value may change over time if adaptive IHOP is enabled, otherwise the value remains constant. In the\nlatter case a value of 0 will result as frequent as possible concurrent marking cycles. A value of 100 disables\nconcurrent marking. Fragmentation waste in the old generation is not considered free space in this calculation.<\/pre>"},
{"prefix":"-XX:","name":"InlineAllBonus","type":"double","defaultValue":"1.0","availability":"Runtime","description":"<pre>The bonus applied to call nodes that can be fully inlined. <\/pre>"},
{"prefix":"-XX:","name":"InlineAllExplored","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Inline everything previously explored.<\/pre>"},
{"prefix":"-XX:","name":"InlineBeforeAnalysisMaxDepth","type":"int","defaultValue":"9","availability":"Hosted","description":"<pre>Maximum depth when inlining. <\/pre>"},
{"prefix":"-XX:","name":"InlineBeforeAnalysis","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Experimental: Inline methods which folds to constant during parsing before the static analysis.<\/pre>"},
{"prefix":"-XX:","name":"InlineDuringParsingMaxDepth","type":"int","defaultValue":"10","availability":"Runtime","description":"<pre>Maximum depth when inlining during bytecode parsing. <\/pre>"},
{"prefix":"-XX:","name":"InlineDuringParsing","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Inlines trivial methods during bytecode parsing.<\/pre>"},
{"prefix":"-XX:","name":"InlineEverything","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"InlineIntrinsicsDuringParsing","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Inlines intrinsic methods during bytecode parsing.<\/pre>"},
{"prefix":"-XX:","name":"InlineMegamorphicCalls","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Inline calls with megamorphic type profile (i.e., not all types could be recorded).<\/pre>"},
{"prefix":"-XX:","name":"InlineMonomorphicCalls","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Inline calls with monomorphic type profile.<\/pre>"},
{"prefix":"-XX:","name":"InlinePartialIntrinsicExitDuringParsing","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Inlines partial intrinsic exits during bytecode parsing when possible. A partial intrinsic exit is a call within an \nintrinsic to the method being intrinsified and denotes semantics of the original method that the intrinsic does not\nsupport.<\/pre>"},
{"prefix":"-XX:","name":"InlinePolymorphicCalls","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Inline calls with polymorphic type profile.<\/pre>"},
{"prefix":"-XX:","name":"InlineVTableStubs","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"Inline","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Enable inlining.<\/pre>"},
{"prefix":"-XX:","name":"InlinedCompilerNodeLimit","type":"int","defaultValue":"20000","availability":"Runtime","description":"<pre>Controls the maximum number of compiler nodes that can be inlined into the compiled method. <\/pre>"},
{"prefix":"-XX:","name":"InliningCoefficient","type":"double","defaultValue":"0.02","availability":"Runtime","description":"<pre>The coefficient used to compute the inlining threshold; the higher, the more to inline. <\/pre>"},
{"prefix":"-XX:","name":"InliningDepthError","type":"int","defaultValue":"1000","availability":"Runtime","description":"<pre>Maximum inlining depth during partial evaluation before reporting an infinite recursion. <\/pre>"},
{"prefix":"-XX:","name":"InsertPreMainPostOnly","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Do not unroll the main loop, only create pre-main-post.<\/pre>"},
{"prefix":"-XX:","name":"InspectGraphs","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Inspect analysis graphs.<\/pre>"},
{"prefix":"-XX:","name":"InspectServerContentPath","type":"String","defaultValue":"\"inspect\"","availability":"Runtime","description":"<pre>Path to the contents of the Inspect web server. <\/pre>"},
{"prefix":"-XX:","name":"InstallExitHandlers","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Provide java.lang.Terminator exit handlers for executable images.<\/pre>"},
{"prefix":"-XX:","name":"InstallSegfaultHandler","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Install segfault handler that prints register contents and full Java stacktrace.<\/pre>"},
{"prefix":"-XX:","name":"InterceptBailout","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Intercept also bailout exceptions.<\/pre>"},
{"prefix":"-XX:","name":"Intrinsify","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Use compiler intrinsifications.<\/pre>"},
{"prefix":"-XX:","name":"JNIConfigurationFiles","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Files describing program elements to be made accessible via JNI (for syntax, see ReflectionConfigurationFiles).<\/pre>"},
{"prefix":"-XX:","name":"JNIConfigurationResources","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Resources describing program elements to be made accessible via JNI (see JNIConfigurationFiles).<\/pre>"},
{"prefix":"-XX:","name":"JNIExportSymbols","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Export Invocation API symbols.<\/pre>"},
{"prefix":"-XX:","name":"JNIVerboseLookupErrors","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Report information about known JNI elements when lookup fails.<\/pre>"},
{"prefix":"-XX:","name":"JNI","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Enable Java Native Interface (JNI) support.<\/pre>"},
{"prefix":"-XX:","name":"LIRDynMoveProfileMethod","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enable dynamic move profiling per method.<\/pre>"},
{"prefix":"-XX:","name":"LIROptConstantLoadOptimization","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enable constant load optimization. <\/pre>"},
{"prefix":"-XX:","name":"LIROptControlFlowOptimizer","type":"bool","availability":"Runtime"},
{"prefix":"-XX:","name":"LIROptEdgeMoveOptimizer","type":"bool","availability":"Runtime"},
{"prefix":"-XX:","name":"LIROptLSRAEliminateSpillMoves","type":"bool","availability":"Runtime","description":"<pre>Enable spill move elimination. <\/pre>"},
{"prefix":"-XX:","name":"LIROptLSRAOptimizeSpillPosition","type":"bool","availability":"Runtime","description":"<pre>Enable spill position optimization. <\/pre>"},
{"prefix":"-XX:","name":"LIROptLSStackSlotAllocator","type":"bool","availability":"Runtime","description":"<pre>Use linear scan stack slot allocation. <\/pre>"},
{"prefix":"-XX:","name":"LIROptNullCheckOptimizer","type":"bool","availability":"Runtime"},
{"prefix":"-XX:","name":"LIROptRedundantMoveElimination","type":"bool","availability":"Runtime"},
{"prefix":"-XX:","name":"LIROptStackMoveOptimizer","type":"bool","availability":"Runtime"},
{"prefix":"-XX:","name":"LIROptimization","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Enable LIR level optimiztations.<\/pre>"},
{"prefix":"-XX:","name":"LIRProfileMethods","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enables profiling of methods.<\/pre>"},
{"prefix":"-XX:","name":"LIRProfileMoves","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enables profiling of move types on LIR level. Move types are for example stores (register to stack), constant loads \n(constant to register) or copies (register to register).<\/pre>"},
{"prefix":"-XX:","name":"LLVMMaxFunctionsPerBatch","type":"int","defaultValue":"1000","availability":"Hosted","description":"<pre>Maximum size of batches used for LLVM compilation. 0 means a single batch, 1 means all functions separately. <\/pre>"},
{"prefix":"-XX:","name":"LSRAOptSplitOnly","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>LSRA optimization: Only split but do not reassign.<\/pre>"},
{"prefix":"-XX:","name":"LSRAOptimization","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enable LSRA optimization.<\/pre>"},
{"prefix":"-XX:","name":"LargeArrayThreshold","type":"int","defaultValue":"0","availability":"Hosted","description":"<pre>The size at or above which an array will be allocated in its own unaligned chunk. 0 implies (AlignedHeapChunkSize / 8). <\/pre>"},
{"prefix":"-XX:","name":"LargeChildrenCountPenaltyCoefficient","type":"double","defaultValue":"0.005","availability":"Runtime","description":"<pre>\nReduces the likelihood of exploring call graphs that have a lot of children below the root.<\/pre>"},
{"prefix":"-XX:","name":"LimitInlinedInvokes","type":"double","defaultValue":"5.0","availability":"Runtime"},
{"prefix":"-XX:","name":"LimitObjectArrayLength","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enable a limit for the number of objects recorded for each type of a type state before disabling heap sensitivity for \nthat type. The analysis must be heap sensitive.<\/pre>"},
{"prefix":"-XX:","name":"LinkerRPath","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Path passed to the linker as the -rpath (list of comma-separated directories).<\/pre>"},
{"prefix":"-XX:","name":"ListMetrics","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Lists on the console at VM shutdown the metric names available to the Timers, Counters and MemUseTrackers options. Note \nthat this only lists the metrics that were initialized during the VM execution and so will not include metrics for\ncompiler code that is not executed.<\/pre>"},
{"prefix":"-XX:","name":"LoadExceptionObjectInVM","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Use a VM runtime call to load and clear the exception object from the thread at the start of a compiled exception \nhandler.<\/pre>"},
{"prefix":"-XX:","name":"LogFile","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>File to which logging is sent. A %p in the name will be replaced with a string identifying the process, usually the \nprocess id and %t will be replaced by System.currentTimeMillis(). If the current runtime is in an isolate, then %i will\nbe replaced by '<isolate id>' otherwise %i is removed. An %I is the same as %i except that the replacement is '<isolate\nid>@<isolate address>'. Using %o as filename sends logging to System.out whereas %e sends logging to System.err.<\/pre>"},
{"prefix":"-XX:","name":"LogVerbose","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enable more verbose log output when available.<\/pre>"},
{"prefix":"-XX:","name":"Log","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Pattern for specifying scopes in which logging is enabled. See the Dump option for the pattern syntax.<\/pre>"},
{"prefix":"-XX:","name":"LoopHeaderAlignment","type":"int","defaultValue":"16","availability":"Runtime","description":"<pre>Alignment in bytes for loop header blocks. <\/pre>"},
{"prefix":"-XX:","name":"LoopInversion","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Convert loops into their zero trip form.<\/pre>"},
{"prefix":"-XX:","name":"LoopMaxUnswitch","type":"int","defaultValue":"3","availability":"Runtime"},
{"prefix":"-XX:","name":"LoopPeeling","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"LoopPredicationMainPath","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"LoopPredication","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"LoopUnswitchFrequencyBoost","type":"double","defaultValue":"10.0","availability":"Runtime"},
{"prefix":"-XX:","name":"LoopUnswitchMaxIncrease","type":"int","defaultValue":"500","availability":"Runtime"},
{"prefix":"-XX:","name":"LoopUnswitchTrivial","type":"int","defaultValue":"10","availability":"Runtime"},
{"prefix":"-XX:","name":"LoopUnswitch","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"MarkStackSizeMax","type":"int","defaultValue":"536870912","availability":"Runtime","description":"<pre>Maximum size of marking stack. <\/pre>"},
{"prefix":"-XX:","name":"MarkStackSize","type":"int","defaultValue":"4194304","availability":"Runtime","description":"<pre>Size of marking stack. <\/pre>"},
{"prefix":"-XX:","name":"MatchExpressions","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Allow backend to match complex expressions.<\/pre>"},
{"prefix":"-XX:","name":"MaxCallingContextDepth","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>The maximum length of the methods context chains. <\/pre>"},
{"prefix":"-XX:","name":"MaxCallingContextWidth","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>The maximum number of contexts to record for a method. It only affects the analysis when the max and min calling context \ndepth are different.<\/pre>"},
{"prefix":"-XX:","name":"MaxCompilationProblemsPerAction","type":"int","defaultValue":"2","availability":"Runtime","description":"<pre>The maximum number of compilation failures to handle with the action specified by CompilationFailureAction before \nchanging to a less verbose action. This does not apply to the ExitVM action.<\/pre>"},
{"prefix":"-XX:","name":"MaxConstantObjectsPerType","type":"int","defaultValue":"100","availability":"Runtime","description":"<pre>The maximum number of constant objects recorded for each type before merging the constants into one unique constant \nobject per type. The analysis must be heap sensitive. It has a minimum value of 1.<\/pre>"},
{"prefix":"-XX:","name":"MaxCpuLocalsPerCounter","type":"int","defaultValue":"64","availability":"Runtime","description":"<pre>Upper bound on the number of cpu locals per counter. It has to be a power of 2. <\/pre>"},
{"prefix":"-XX:","name":"MaxDirectMemorySize","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>Maximum total size of NIO direct-buffer allocations. <\/pre>"},
{"prefix":"-XX:","name":"MaxDuplicationFactor","type":"double","defaultValue":"2.0","availability":"Runtime","description":"<pre>How much duplication can happen because of irreducible loops before bailing out. <\/pre>"},
{"prefix":"-XX:","name":"MaxGCPauseMillis","type":"int","defaultValue":"200","availability":"Runtime","description":"<pre>Adaptive size policy maximum GC pause time goal in millisecond, or the maximum GC time per MMU time slice. <\/pre>"},
{"prefix":"-XX:","name":"MaxGraphSizeNodeCost","type":"int","defaultValue":"100000","availability":"Runtime","description":"<pre>Maximum node cost graph size for duplication. If a graph is bigger duplication will stop. <\/pre>"},
{"prefix":"-XX:","name":"MaxHeapContextDepth","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>The maximum length of the context used to model a heap object in addition to the allocation site; used only when \nContextSensitiveHeap is enabled.<\/pre>"},
{"prefix":"-XX:","name":"MaxHeapContextWidth","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>The maximum number of contexts to record for a heap object. It only affects the analysis when the max and min calling \ncontext depth are different.<\/pre>"},
{"prefix":"-XX:","name":"MaxHeapSize","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>The maximum heap size at run-time, in bytes. <\/pre>"},
{"prefix":"-XX:","name":"MaxInvokesInTrivialMethod","type":"int","defaultValue":"1","availability":"Hosted","description":"<pre>Maximum number of invokes in a method so that it is considered trivial (for testing only). <\/pre>"},
{"prefix":"-XX:","name":"MaxJavaStackTraceDepth","type":"int","defaultValue":"1024","availability":"Runtime","description":"<pre>The maximum number of lines in the stack trace for Java exceptions (0 means all). <\/pre>"},
{"prefix":"-XX:","name":"MaxMispredictionCostIncreaseFactor","type":"double","defaultValue":"2.0","availability":"Runtime","description":"<pre>Abstract measure of the cost of branch misprediction. Higher values make generation of conditional moves more likely. <\/pre>"},
{"prefix":"-XX:","name":"MaxNewSize","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>The maximum size of the young generation at run-time, in bytes. <\/pre>"},
{"prefix":"-XX:","name":"MaxNodesInTrivialLeafMethod","type":"int","defaultValue":"40","availability":"Hosted","description":"<pre>Maximum number of nodes in a method so that it is considered trivial, if it does not have any invokes. <\/pre>"},
{"prefix":"-XX:","name":"MaxNodesInTrivialMethod","type":"int","defaultValue":"20","availability":"Hosted","description":"<pre>Maximum number of nodes in a method so that it is considered trivial. <\/pre>"},
{"prefix":"-XX:","name":"MaxObjectSetSize","type":"int","defaultValue":"100","availability":"Runtime","description":"<pre>The maximum number of objects recorded for each type of a type state before disabling heap sensitivity for that type. \nThe analysis must be heap sensitive. It has a minimum value of 1.<\/pre>"},
{"prefix":"-XX:","name":"MaxPolymorphicDispatches","type":"int","defaultValue":"3","availability":"Runtime","description":"<pre>The maximum number of dispatches in guarded polymorphic inlining. <\/pre>"},
{"prefix":"-XX:","name":"MaxPriorityInliningPeelingIterations","type":"int","defaultValue":"10","availability":"Runtime","description":"<pre>Max number of precise inlining peeling iterations. <\/pre>"},
{"prefix":"-XX:","name":"MaxRAMPercentage","type":"double","defaultValue":"25.0","availability":"Runtime","description":"<pre>Maximum percentage of real memory used for maximum heap size. <\/pre>"},
{"prefix":"-XX:","name":"MaxRAM","type":"int","defaultValue":"137438953472","availability":"Runtime","description":"<pre>Real memory size (in bytes) used to set maximum heap size. <\/pre>"},
{"prefix":"-XX:","name":"MaxReachableTypes","type":"int","defaultValue":"-1","availability":"Hosted","description":"<pre>Maximum number of types allowed in the image. Used for tests where small number of types is necessary. <\/pre>"},
{"prefix":"-XX:","name":"MaxRuntimeCompileMethods","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Maximum number of methods allowed for runtime compilation.<\/pre>"},
{"prefix":"-XX:","name":"MaxSimulationIterations","type":"int","defaultValue":"2","availability":"Runtime","description":"<pre>Maximum simulation-duplication iterations of the duplication optimization per invocation. <\/pre>"},
{"prefix":"-XX:","name":"MaxSplitsPerNode","type":"int","defaultValue":"32","availability":"Runtime"},
{"prefix":"-XX:","name":"MaxSurvivorSpaces","type":"int","defaultValue":"0","availability":"Hosted","description":"<pre>Maximum number of survivor spaces. <\/pre>"},
{"prefix":"-XX:","name":"MaxTemplatesPerSnippet","type":"int","defaultValue":"50","availability":"Runtime"},
{"prefix":"-XX:","name":"MaxTenuringThreshold","type":"int","defaultValue":"15","availability":"Runtime","description":"<pre>Maximum value for tenuring threshold. <\/pre>"},
{"prefix":"-XX:","name":"MaxThinLockRecursion","type":"int","defaultValue":"20","availability":"Hosted","description":"<pre>Maximum recursive locking depth for thin locks. <\/pre>"},
{"prefix":"-XX:","name":"MaxUnrolledObjectZeroingStores","type":"int","defaultValue":"8","availability":"Hosted","description":"<pre>Define the maximum number of stores for which the loop that zeroes out objects is unrolled. <\/pre>"},
{"prefix":"-XX:","name":"MaxVectorAlignmentUnroll","type":"int","defaultValue":"4","availability":"Runtime","description":"<pre>Maximum number of unrolled alignment instructions. <\/pre>"},
{"prefix":"-XX:","name":"MaxVectorUnroll","type":"int","defaultValue":"16","availability":"Runtime","description":"<pre>Maximum length of linear-code vector operations. <\/pre>"},
{"prefix":"-XX:","name":"MaximumDesiredSize","type":"int","defaultValue":"20000","availability":"Runtime","description":"<pre>Maximum desired size of the compiler graph in nodes. <\/pre>"},
{"prefix":"-XX:","name":"MaximumEscapeAnalysisArrayLength","type":"int","defaultValue":"128","availability":"Runtime","description":"<pre>The maximum length of an array that will be escape analyzed. <\/pre>"},
{"prefix":"-XX:","name":"MaximumHeapSizePercent","type":"int","defaultValue":"80","availability":"Runtime","description":"<pre>The maximum heap size as percent of physical memory. <\/pre>"},
{"prefix":"-XX:","name":"MaximumInliningSize","type":"int","defaultValue":"300","availability":"Runtime","description":"<pre>Inlining is explored up to this number of nodes in the graph for each call site. <\/pre>"},
{"prefix":"-XX:","name":"MaximumLoopExplosionCount","type":"int","defaultValue":"10000","availability":"Runtime","description":"<pre>Max number of loop explosions per method. <\/pre>"},
{"prefix":"-XX:","name":"MaximumRecursiveInlining","type":"int","defaultValue":"5","availability":"Runtime","description":"<pre>Maximum level of recursive inlining. <\/pre>"},
{"prefix":"-XX:","name":"MaximumTransitiveEnabledPullFactor","type":"int","defaultValue":"2","availability":"Runtime","description":"<pre>PullThroughPhiOptimization: Maximum number of algorithm iterations per optimization invocation. <\/pre>"},
{"prefix":"-XX:","name":"MaximumYoungGenerationSizePercent","type":"int","defaultValue":"10","availability":"Runtime","description":"<pre>The maximum size of the young generation as a percentage of the maximum heap size. <\/pre>"},
{"prefix":"-XX:","name":"MegamorphicInliningMinMethodProbability","type":"double","defaultValue":"0.33","availability":"Runtime","description":"<pre>\nMinimum probability for methods to be inlined for megamorphic type profiles.<\/pre>"},
{"prefix":"-XX:","name":"MemUseTrackers","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Comma separated names of memory usage trackers that are enabled irrespective of the value for TrackMemUse option. An \nempty value enables all memory usage trackers unconditionally.<\/pre>"},
{"prefix":"-XX:","name":"MethodFilterRootOnly","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Only check MethodFilter against the root method in the context if true, otherwise check all methods.<\/pre>"},
{"prefix":"-XX:","name":"MethodFilter","type":"String","defaultValue":"None [Extra help available]","availability":"Runtime","description":"<pre>Pattern for matching methods. The syntax for a pattern is:.<\/pre>"},
{"prefix":"-XX:","name":"MethodInlineBailoutLimit","type":"int","defaultValue":"5000","availability":"Runtime","description":"<pre>Per-compilation method inlining exploration limit before giving up (use 0 to disable). <\/pre>"},
{"prefix":"-XX:","name":"Method","type":"String","defaultValue":"\"main\"","availability":"Hosted","description":"<pre>Name of the main entry point method. Optional if --shared is used. <\/pre>"},
{"prefix":"-XX:","name":"MetricsFile","type":"String","defaultValue":"None [Extra help available]","availability":"Runtime","description":"<pre>File to which metrics are dumped per compilation.<\/pre>"},
{"prefix":"-XX:","name":"MidTierPartialUnrolling","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Enable EE partial unrolling in mid tier.<\/pre>"},
{"prefix":"-XX:","name":"MinBlockFrequencyPull","type":"double","defaultValue":"0.66","availability":"Runtime","description":"<pre>PullThroughPhiOptimization: Ignore low frequency branches during duplication. <\/pre>"},
{"prefix":"-XX:","name":"MinCallingContextDepth","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>The minimum length of the methods context chains. <\/pre>"},
{"prefix":"-XX:","name":"MinHeapContextDepth","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>The minimum length of the context used to model a heap object in addition to the allocation site; used only when \nContextSensitiveHeap is enabled.<\/pre>"},
{"prefix":"-XX:","name":"MinHeapDeltaBytes","type":"int","defaultValue":"172032","availability":"Runtime","description":"<pre>The minimum change in heap space due to GC (in bytes). <\/pre>"},
{"prefix":"-XX:","name":"MinHeapFreeRatio","type":"int","defaultValue":"40","availability":"Runtime","description":"<pre>The minimum percentage of heap free after GC to avoid expansion. <\/pre>"},
{"prefix":"-XX:","name":"MinHeapSize","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>The minimum heap size at run-time, in bytes. <\/pre>"},
{"prefix":"-XX:","name":"MinPolymorphicDispatchProbability","type":"double","defaultValue":"0.1","availability":"Runtime","description":"<pre>The minimum probability for using a dispatch in guarded polymorphic inlining. <\/pre>"},
{"prefix":"-XX:","name":"MinRAMPercentage","type":"double","defaultValue":"50.0","availability":"Runtime","description":"<pre>Minimum percentage of real memory used for maximum heap size on systems with small physical memory size. <\/pre>"},
{"prefix":"-XX:","name":"MinTLABSize","type":"int","defaultValue":"2048","availability":"Runtime","description":"<pre>Minimum allowed TLAB size (in bytes). <\/pre>"},
{"prefix":"-XX:","name":"MinimalBulkZeroingSize","type":"int","defaultValue":"2048","availability":"Runtime","description":"<pre>If applicable, use bulk zeroing instructions when the zeroing size in bytes exceeds this threshold. <\/pre>"},
{"prefix":"-XX:","name":"MinimalRegions","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Try to reduce duplication code size to the minimal amount of code.<\/pre>"},
{"prefix":"-XX:","name":"MinimumPeelFrequency","type":"double","defaultValue":"0.35","availability":"Runtime"},
{"prefix":"-XX:","name":"MultiExitCostFactorSink","type":"int","defaultValue":"2","availability":"Runtime","description":"<pre>Cost/Benefit heuristic for EE unrolling: If a loop has multiple exits, cost is increased by this value for every sinking \nloop exit.<\/pre>"},
{"prefix":"-XX:","name":"MultiExitCostFactor","type":"int","defaultValue":"32","availability":"Runtime","description":"<pre>Cost/Benefit heuristic for EE unrolling: If a loop has multiple exits, cost is increased by this value for every \nnone-sinking loop exit.<\/pre>"},
{"prefix":"-XX:","name":"MultiThreaded","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Enable support for threads and and thread-local variables (disable for single-threaded implementation).<\/pre>"},
{"prefix":"-XX:","name":"MustNotSynchronizeWarningsAreFatal","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Warnings for @MustNotSynchronize annotations are fatal.<\/pre>"},
{"prefix":"-XX:","name":"NDCV","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>Run level for NoDeadCodeVerifyHandler (0 = off, 1 = info, 2 = verbose, 3 = fatal). <\/pre>"},
{"prefix":"-XX:","name":"Name","type":"","defaultValue":"\"\"","availability":"Hosted","description":"<pre>Name of the output file to be generated. <\/pre>"},
{"prefix":"-XX:","name":"NativeArchitecture","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Overrides CPUFeatures and uses the native architecture, i.e., the architecture of a machine that builds an image. \nNativeArchitecture takes precedence over CPUFeatures.<\/pre>"},
{"prefix":"-XX:","name":"NativeLinkerOption","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Pass the provided raw option that will be appended to the linker command to produce the final binary. The possible \noptions are platform specific and passed through without any validation.<\/pre>"},
{"prefix":"-XX:","name":"NeverInline","type":"String","defaultValue":"None [Extra help available]","availability":"Hosted","description":"<pre>Pattern for disabling inlining of methods during image generation.<\/pre>"},
{"prefix":"-XX:","name":"NewCAPCache","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Create a C Annotation Processor Cache. Will erase any previous cache at that same location.<\/pre>"},
{"prefix":"-XX:","name":"NewRatio","type":"int","defaultValue":"2","availability":"Runtime","description":"<pre>Ratio of old/new generation sizes. <\/pre>"},
{"prefix":"-XX:","name":"NewSize","type":"int","defaultValue":"1048576","availability":"Runtime","description":"<pre>Initial new generation size (in bytes). <\/pre>"},
{"prefix":"-XX:","name":"NodeCounters","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Counts the number of instances of each node class.<\/pre>"},
{"prefix":"-XX:","name":"NonFatalIdenticalCompilationSnapshots","type":"int","defaultValue":"20","availability":"Runtime","description":"<pre>Number of contiguous identical compiler thread stack traces allowed before the VM exits on the basis of a stuck \ncompilation.<\/pre>"},
{"prefix":"-XX:","name":"NumberOfAnalysisThreads","type":"int","defaultValue":"-1","availability":"Hosted","description":"<pre>The number of threads to use for analysis during native image generation. The number must be smaller than the \nNumberOfThreads.<\/pre>"},
{"prefix":"-XX:","name":"NumberOfThreads","type":"int","defaultValue":"8","availability":"Hosted","description":"<pre>The maximum number of threads to use concurrently during native image generation. <\/pre>"},
{"prefix":"-XX:","name":"ObjdumpExecutables","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Comma separated list of candidate GNU objdump executables. If not specified, disassembling via GNU objdump is disabled. \nOtherwise, the first existing executable in the list is used.<\/pre>"},
{"prefix":"-XX:","name":"OldPLABSize","type":"int","defaultValue":"1024","availability":"Runtime","description":"<pre>Size of old gen promotion LAB's (in HeapWords). <\/pre>"},
{"prefix":"-XX:","name":"OldSize","type":"int","defaultValue":"5242880","availability":"Runtime","description":"<pre>Initial tenured generation size (in bytes). <\/pre>"},
{"prefix":"-XX:","name":"OmitHotExceptionStacktrace","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"OptAssumptions","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"OptBulkAllocation","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"OptCompressedFrameStateValues","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"OptConditionalMoves","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Optimize simple if branches with conditional moves.<\/pre>"},
{"prefix":"-XX:","name":"OptConvertDeoptsToGuards","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"OptDeDuplication","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"OptDeoptimizationGrouping","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"OptDevirtualizeInvokesOptimistically","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"OptDuplication","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"OptEarlyReadElimination","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"OptEliminateGuards","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"OptExactArithmetic","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"OptFloatingReads","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"OptGuardRangeGrouping","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"OptImplicitNullChecks","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"OptInlineImageHeapConstants","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Optimize address operations that involve image heap constants.<\/pre>"},
{"prefix":"-XX:","name":"OptLateDuplication","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"OptLockElimination","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"OptLoopPhiStamps","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Inject stamps on induction variables.<\/pre>"},
{"prefix":"-XX:","name":"OptPullThroughPhi","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"OptReadElimination","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"OptScheduleOutOfLoops","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"OptSpeculativeGuardMovement","type":"bool","defaultValue":"true","availability":"Runtime"},
{"prefix":"-XX:","name":"OptStringConcatDump","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Dump graphs to help debug operation.<\/pre>"},
{"prefix":"-XX:","name":"OptStringConcat","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Optimize StringBuilder construction.<\/pre>"},
{"prefix":"-XX:","name":"OptWriteBarrierElimination","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Eliminate redundant write barriers.<\/pre>"},
{"prefix":"-XX:","name":"OptimisticAliasingAnalysis","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"OptimizeLoopAccesses","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Enable access node optimizations for loops.<\/pre>"},
{"prefix":"-XX:","name":"Optimize","type":"int","defaultValue":"2","availability":"Hosted","description":"<pre>Control native-image code optimizations: 0 - no optimizations, 1 - basic optimizations, 2 - aggressive optimizations. <\/pre>"},
{"prefix":"-XX:","name":"PGOInstrument","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Dump information for Profile Guided Optimizations (true or file name).<\/pre>"},
{"prefix":"-XX:","name":"PGOPathProfileVerify","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Collect PGO counters, and verify that they match the path-profile counters.<\/pre>"},
{"prefix":"-XX:","name":"PGOPathProfile","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Replace PGO profiling counters with path-profiling counters.<\/pre>"},
{"prefix":"-XX:","name":"PLABWeight","type":"int","defaultValue":"75","availability":"Runtime","description":"<pre>Percentage (0-100) used to weight the current sample when computing exponentially decaying average for ResizePLAB. <\/pre>"},
{"prefix":"-XX:","name":"PageSize","type":"int","defaultValue":"0","availability":"Hosted","description":"<pre>Define PageSize of a machine that runs the image. The default = 0 (== same as host machine page size). <\/pre>"},
{"prefix":"-XX:","name":"ParGCArrayScanChunk","type":"int","defaultValue":"50","availability":"Runtime","description":"<pre>Scan a subset of object array and push remainder, if array is bigger than this. <\/pre>"},
{"prefix":"-XX:","name":"ParallelGCBufferWastePct","type":"int","defaultValue":"10","availability":"Runtime","description":"<pre>Wasted fraction of parallel allocation buffer. <\/pre>"},
{"prefix":"-XX:","name":"ParallelGCThreads","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>Number of parallel threads parallel gc will use. <\/pre>"},
{"prefix":"-XX:","name":"ParallelRefProcBalancingEnabled","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Enable balancing of reference processing queues.<\/pre>"},
{"prefix":"-XX:","name":"ParallelRefProcEnabled","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Enable parallel reference processing whenever possible.<\/pre>"},
{"prefix":"-XX:","name":"ParseRuntimeOptions","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Parse and consume standard options and system properties from the command line arguments when the VM is created.<\/pre>"},
{"prefix":"-XX:","name":"PartialEscapeAnalysis","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"PartialRedundancyElimination","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Enable partial redundancy elimination.<\/pre>"},
{"prefix":"-XX:","name":"PartialUnrollCostReductionFactorHighTier","type":"int","defaultValue":"2","availability":"Runtime","description":"<pre>\nCost/Benefit heuristic for EE unrolling in high tier: reduce cost by a constant factor when comparing with relative\nbenefit.<\/pre>"},
{"prefix":"-XX:","name":"PartialUnrollCostReductionFactorMidTier","type":"int","defaultValue":"8","availability":"Runtime","description":"<pre>Cost/Benefit heuristic for EE unrolling in mid tier: reduce cost by a constant factor when comparing with relative \nbenefit.<\/pre>"},
{"prefix":"-XX:","name":"PartialUnrollMaxIterationsHighTier","type":"int","defaultValue":"4","availability":"Runtime","description":"<pre>Maximum number of iterations to unroll for a high tier main loop. <\/pre>"},
{"prefix":"-XX:","name":"PartialUnrollMaxIterationsMidTier","type":"int","defaultValue":"16","availability":"Runtime","description":"<pre>Maximum number of iterations to unroll for a mid tier main loop. <\/pre>"},
{"prefix":"-XX:","name":"PartialUnrollMaxSizeHighTier","type":"int","defaultValue":"256","availability":"Runtime","description":"<pre>Maximum node cost size of a loop to be considered for high tier unrolling. <\/pre>"},
{"prefix":"-XX:","name":"PartialUnrollMaxSizeMidTier","type":"int","defaultValue":"256","availability":"Runtime","description":"<pre>Maximum node cost size of a loop to be considered for mid tier tier unrolling. <\/pre>"},
{"prefix":"-XX:","name":"PartialUnrollMinFrequency","type":"int","defaultValue":"2","availability":"Runtime","description":"<pre>Minimal loop frequency to consider a loop for partial unrolling. <\/pre>"},
{"prefix":"-XX:","name":"PartialUnroll","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"PathProfileCutThreshold","type":"int","defaultValue":"10","availability":"Runtime","description":"<pre>The limit on the number of paths at control-flow merges. Decreasing this value reduces the number of paths, but also \nshortens them.<\/pre>"},
{"prefix":"-XX:","name":"PathProfileDumpFile","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Dump information for path profile (null or file name). If set to null, then dumping is disabled.<\/pre>"},
{"prefix":"-XX:","name":"PathProfileFrequentThreshold","type":"int","defaultValue":"500","availability":"Runtime","description":"<pre>Maximum acceptable number of paths coming from the inbound of a merge if both of them are frequent. <\/pre>"},
{"prefix":"-XX:","name":"PathProfileGlobalLowFrequencyRatio","type":"double","defaultValue":"0.1","availability":"Runtime","description":"<pre>If some block's relative frequency drops below this number times the maximum relative frequency in the graph, then the \nblock is considered infrequent.<\/pre>"},
{"prefix":"-XX:","name":"PathProfileLocalLowFrequencyRatio","type":"double","defaultValue":"10.0","availability":"Runtime","description":"<pre>If the ratio of the merge's frequency with its inbound's frequency is greater than this threshold, then the inbound is \nconsidered infrequent.<\/pre>"},
{"prefix":"-XX:","name":"PathProfileMaxTotalCounters","type":"int","defaultValue":"4000000","availability":"Runtime","description":"<pre>Maximum number of counters to use in path profiling for all instrumented methods. <\/pre>"},
{"prefix":"-XX:","name":"PathProfilePolicy","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Enable or disable the path-profiling algorithm. If it enables it, it also allows to select which mode to execute. <\/pre>"},
{"prefix":"-XX:","name":"PathProfileRegenerate","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Controls whether the path-regeneration algorithm is executed.<\/pre>"},
{"prefix":"-XX:","name":"Path","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Directory of the image file to be generated.<\/pre>"},
{"prefix":"-XX:","name":"PeelALot","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"PeelFoldFactor","type":"int","defaultValue":"120","availability":"Runtime"},
{"prefix":"-XX:","name":"PeelingConsideredMinFrequency","type":"double","defaultValue":"4.0","availability":"Runtime","description":"<pre>Minimal loop frequency necessary to consider peeling. <\/pre>"},
{"prefix":"-XX:","name":"PenalizeComplexLoopControlFlow","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Increase the cost of duplicating control flow splits inside loops if they are not foldable.The generally tend to \ncomplicate control flow and generate worse code in the backend.<\/pre>"},
{"prefix":"-XX:","name":"PercentTimeInIncrementalCollection","type":"int","defaultValue":"50","availability":"Runtime","description":"<pre>Percentage of total collection time that should be spent on young generation collections. <\/pre>"},
{"prefix":"-XX:","name":"PerfDataMemorySize","type":"int","defaultValue":"32768","availability":"Runtime","description":"<pre>Size of performance data memory region. Will be rounded up to a multiple of the native os page size. <\/pre>"},
{"prefix":"-XX:","name":"PerfDataSamplingInterval","type":"int","defaultValue":"200","availability":"Runtime","description":"<pre>Jvmstat instrumentation sampling interval (in milliseconds). <\/pre>"},
{"prefix":"-XX:","name":"PerfMaxStringConstLength","type":"int","defaultValue":"1024","availability":"Runtime","description":"<pre>Maximum PerfStringConstant string length before truncation. <\/pre>"},
{"prefix":"-XX:","name":"PreTouchParallelChunkSize","type":"int","defaultValue":"1073741824","availability":"Runtime","description":"<pre>Per-thread chunk size for parallel memory pre-touch. <\/pre>"},
{"prefix":"-XX:","name":"PreferContainerQuotaForCPUCount","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Calculate the container CPU availability based on the value of quotas (if set), when true. Otherwise, use the CPU shares \nvalue, provided it is less than quota.<\/pre>"},
{"prefix":"-XX:","name":"PrefetchCopyIntervalInBytes","type":"int","defaultValue":"-1","availability":"Runtime","description":"<pre>How far ahead to prefetch destination area (<= 0 means off). <\/pre>"},
{"prefix":"-XX:","name":"PrefetchScanIntervalInBytes","type":"int","defaultValue":"-1","availability":"Runtime","description":"<pre>How far ahead to prefetch scan area (<= 0 means off). <\/pre>"},
{"prefix":"-XX:","name":"PreserveFramePointer","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Saves stack base pointer on the stack on method entry.<\/pre>"},
{"prefix":"-XX:","name":"PrintAOTCompilation","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Print logging information during compilation.<\/pre>"},
{"prefix":"-XX:","name":"PrintAnalysisCallTree","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Print analysis call tree, a breadth-first tree reduction of the call graph.<\/pre>"},
{"prefix":"-XX:","name":"PrintAnalysisStatistics","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Print analysis results statistics.<\/pre>"},
{"prefix":"-XX:","name":"PrintBackendCFG","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enable dumping LIR, register allocation and code generation info to the C1Visualizer.<\/pre>"},
{"prefix":"-XX:","name":"PrintBlockMapping","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enable dumping CFG built during initial BciBlockMapping.<\/pre>"},
{"prefix":"-XX:","name":"PrintCFG","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enable dumping to the C1Visualizer. Enabling this option implies PrintBackendCFG.<\/pre>"},
{"prefix":"-XX:","name":"PrintCanonicalGraphStringFlavor","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>Choose format used when dumping canonical text for graphs: 0 gives a scheduled graph (better for spotting changes \ninvolving the schedule) while 1 gives a CFG containing expressions rooted at fixed nodes (better for spotting small\nstructure differences).<\/pre>"},
{"prefix":"-XX:","name":"PrintCanonicalGraphStrings","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enable dumping canonical text from for graphs.<\/pre>"},
{"prefix":"-XX:","name":"PrintClassInitialization","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Prints class initialization info for all classes detected by analysis.<\/pre>"},
{"prefix":"-XX:","name":"PrintCompilation","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Print an informational line to the console for each completed compilation.<\/pre>"},
{"prefix":"-XX:","name":"PrintDetailedAllocationProfiling","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Print detailed information for each allocation site.<\/pre>"},
{"prefix":"-XX:","name":"PrintFeatures","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Print features-specific information.<\/pre>"},
{"prefix":"-XX:","name":"PrintFlagsWithExtraHelp","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Print extra help, if available, based on comma-separated option names. Pass * to show all options that contain extra \nhelp.<\/pre>"},
{"prefix":"-XX:","name":"PrintFlags","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Show available options based on comma-separated option-types (allowed categories: User, Expert, Debug).<\/pre>"},
{"prefix":"-XX:","name":"PrintGCSummary","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Print summary GC information after application main method returns.<\/pre>"},
{"prefix":"-XX:","name":"PrintGCTimeStamps","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Print a time stamp at each collection, if +PrintGC or +VerboseGC.<\/pre>"},
{"prefix":"-XX:","name":"PrintGCTimes","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Print the time for each of the phases of each collection, if +VerboseGC.<\/pre>"},
{"prefix":"-XX:","name":"PrintGC","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Print summary GC information after each collection.<\/pre>"},
{"prefix":"-XX:","name":"PrintGraphFile","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Setting to true sets PrintGraph=file, setting to false sets PrintGraph=network.<\/pre>"},
{"prefix":"-XX:","name":"PrintGraphHost","type":"double","defaultValue":"\"127.0.0.1\"","availability":"Runtime","description":"<pre>Host part of the address to which graphs are dumped. <\/pre>"},
{"prefix":"-XX:","name":"PrintGraphPort","type":"int","defaultValue":"4445","availability":"Runtime","description":"<pre>Port part of the address to which graphs are dumped in binary format. <\/pre>"},
{"prefix":"-XX:","name":"PrintGraphWithSchedule","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Schedule graphs as they are dumped.<\/pre>"},
{"prefix":"-XX:","name":"PrintGraph","type":"String","defaultValue":"File","availability":"Runtime","description":"<pre>Where IdealGraphVisualizer graph dumps triggered by Dump or DumpOnError should be written. [Extra help available] <\/pre>"},
{"prefix":"-XX:","name":"PrintHeapHistogram","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Print class statistics of native image heap.<\/pre>"},
{"prefix":"-XX:","name":"PrintHeapShape","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Print the shape of the heap before and after each collection, if +VerboseGC.<\/pre>"},
{"prefix":"-XX:","name":"PrintIRWithLIR","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Print HIR along side LIR as the latter is generated.<\/pre>"},
{"prefix":"-XX:","name":"PrintImageElementSizes","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Print the sizes of the elements of the built image.<\/pre>"},
{"prefix":"-XX:","name":"PrintImageHeapPartitionSizes","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Print the sizes of the native image heap as the image is built.<\/pre>"},
{"prefix":"-XX:","name":"PrintImageObjectTree","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Print boot image object hierarchy.<\/pre>"},
{"prefix":"-XX:","name":"PrintJNIMethods","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Print JNI methods added to generated image.<\/pre>"},
{"prefix":"-XX:","name":"PrintLIRWithAssembly","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Include the LIR as comments with the final assembly.<\/pre>"},
{"prefix":"-XX:","name":"PrintMethodHistogram","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Print statistics of methods in native image heap.<\/pre>"},
{"prefix":"-XX:","name":"PrintMustNotSynchronizePath","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Print path for @MustNotSynchronize warnings.<\/pre>"},
{"prefix":"-XX:","name":"PrintMustNotSynchronizeWarnings","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Print warnings for @MustNotSynchronize annotations.<\/pre>"},
{"prefix":"-XX:","name":"PrintPGOStatistics","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Print hit, miss and partial match counts after comparision with collected profiles. It is used for testing.<\/pre>"},
{"prefix":"-XX:","name":"PrintPointsToStatistics","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Report analysis statistics.<\/pre>"},
{"prefix":"-XX:","name":"PrintProfilingInformation","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Print profiling information when parsing a method's bytecode.<\/pre>"},
{"prefix":"-XX:","name":"PrintRestrictHeapAccessPath","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Print path for @RestrictHeapAccess warnings.<\/pre>"},
{"prefix":"-XX:","name":"PrintRestrictHeapAccessWarnings","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Print warnings for @RestrictHeapAccess annotations.<\/pre>"},
{"prefix":"-XX:","name":"PrintRuntimeCompileMethods","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Print call tree of methods available for runtime compilation.<\/pre>"},
{"prefix":"-XX:","name":"PrintStaticTruffleBoundaries","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Print truffle boundaries found during the analysis.<\/pre>"},
{"prefix":"-XX:","name":"PrintSynchronizedAnalysis","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Print types used for Java synchronization.<\/pre>"},
{"prefix":"-XX:","name":"PrintUninterruptibleCalleeDOTGraph","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Print (to stderr) a DOT graph of the @Uninterruptible annotations.<\/pre>"},
{"prefix":"-XX:","name":"PrintUniverse","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Print information about classes, methods, and fields that are present in the native image.<\/pre>"},
{"prefix":"-XX:","name":"PriorityInliningPolicy","type":"","defaultValue":"\"\"","availability":"Runtime","description":"<pre>The policy to use, must be empty for automatic resolution. <\/pre>"},
{"prefix":"-XX:","name":"PriorityInliningTuningPolicy","type":"String","defaultValue":"\"DomainSpecific,BytecodeInterpreter\"","availability":"Runtime","description":"<pre>\nComma-separated list of analysis policies for exploring the methods in the call graph and for inlining, empty for no\npolicy.<\/pre>"},
{"prefix":"-XX:","name":"ProbabilisticProfiling","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Control probabilistic profiling on AMD64.<\/pre>"},
{"prefix":"-XX:","name":"ProfileAllocationsContext","type":"String","defaultValue":"AllocatingMethod","availability":"Runtime","description":"<pre>\nControl the naming and granularity of the counters when using ProfileAllocations. [Extra help available]<\/pre>"},
{"prefix":"-XX:","name":"ProfileAllocations","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enable profiling of allocation sites.<\/pre>"},
{"prefix":"-XX:","name":"ProfileAnalysisOperations","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Track the progress of the static analysis.<\/pre>"},
{"prefix":"-XX:","name":"ProfileBackedges","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Emit profiling of backedges.<\/pre>"},
{"prefix":"-XX:","name":"ProfileCompiledMethods","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"ProfileConstantObjects","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Track the creation of constant objects.<\/pre>"},
{"prefix":"-XX:","name":"ProfileDeoptimization","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Print logging information during object file writing.<\/pre>"},
{"prefix":"-XX:","name":"ProfileDumpPeriod","type":"int","defaultValue":"-1","availability":"Runtime","description":"<pre>Integer greater than zero representing the duration in seconds that will be used to trigger a profile capture. Any \ninteger less than one disables periodic dumps.<\/pre>"},
{"prefix":"-XX:","name":"ProfileInvokes","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Emit profiling of invokes.<\/pre>"},
{"prefix":"-XX:","name":"ProfileLockElimination","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"ProfileMonitors","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enable profiling of monitor operations.<\/pre>"},
{"prefix":"-XX:","name":"ProfileOptBulkAllocation","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"ProfileSelfTime","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Excludes time spent in invoked methods; measures total time including subcalls when turned off.<\/pre>"},
{"prefix":"-XX:","name":"ProfileSimpleMethods","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Profile simple methods.<\/pre>"},
{"prefix":"-XX:","name":"ProfilesCollect","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Instrument AOT compiled code to collect data for profile-guided optimization into default.iprof file.<\/pre>"},
{"prefix":"-XX:","name":"ProfilesDumpFile","type":"String","defaultValue":"\"default.iprof\"","availability":"Runtime","description":"<pre>Value should point to a profile dump file. <\/pre>"},
{"prefix":"-XX:","name":"ProfilesUse","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>A comma-separated list of files from which to read the data collected for profile-guided optimization of AOT compiled \ncode (reads from default.iprof if nothing is specified).<\/pre>"},
{"prefix":"-XX:","name":"ProfilingPointRequiredHitCount","type":"int","defaultValue":"0","availability":"Hosted","description":"<pre>Lower bound for point hit count when compared to collected profiles. It is used for testing. <\/pre>"},
{"prefix":"-XX:","name":"ProtectionKeys","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Enable support for Memory Protection Keys.<\/pre>"},
{"prefix":"-XX:","name":"PruneLargeDominatorUsageTrees","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"PullThroughPhiCodeSizeIncrease","type":"double","defaultValue":"0.1","availability":"Runtime","description":"<pre>PullThroughPhiOptimization: Percentage in node cost graph size for the floating node duplication budget. Computed \nrelative to the method's graph size.<\/pre>"},
{"prefix":"-XX:","name":"QueryCodeDir","type":"","defaultValue":"\"\"","availability":"Hosted","description":"<pre>Directory where query code for target platform should be output. <\/pre>"},
{"prefix":"-XX:","name":"QueuedAllocationWarningCount","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>Number of times an allocation that queues behind a GC will retry before printing a warning. <\/pre>"},
{"prefix":"-XX:","name":"RawConditionalElimination","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"ReadEliminationMaxLoopVisits","type":"int","defaultValue":"5","availability":"Runtime"},
{"prefix":"-XX:","name":"ReassociateExpressions","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Re-associate loop invariants and constants.<\/pre>"},
{"prefix":"-XX:","name":"ReduceDCE","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Disable optional dead code eliminations.<\/pre>"},
{"prefix":"-XX:","name":"RefDiscoveryPolicy","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>Select type of reference discovery policy: reference-based(0) or referent-based(1). <\/pre>"},
{"prefix":"-XX:","name":"ReflectionConfigurationFiles","type":"String","defaultValue":"None [Extra help available]","availability":"Hosted","description":"<pre>One or several (comma-separated) paths to JSON files that specify which program elements should be made available via \nreflection.<\/pre>"},
{"prefix":"-XX:","name":"ReflectionConfigurationResources","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Resources describing program elements to be made available for reflection (see ReflectionConfigurationFiles).<\/pre>"},
{"prefix":"-XX:","name":"ReflectionPluginTracing","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Enable trace logging for reflection plugins.<\/pre>"},
{"prefix":"-XX:","name":"RegisterPressure","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Comma separated list of registers that register allocation is limited to.<\/pre>"},
{"prefix":"-XX:","name":"RelativeBenefitInliningCoefficient","type":"double","defaultValue":"0.001","availability":"Runtime","description":"<pre>The coefficient used to compute the inlining threshold; the higher, the hard to inline. <\/pre>"},
{"prefix":"-XX:","name":"RelaxTypeFlowStateConstraints","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Allow a type flow state to contain types not compatible with its declared type.<\/pre>"},
{"prefix":"-XX:","name":"RemoveNeverExecutedCode","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"RemoveSaturatedTypeFlows","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Enable the type flow saturation analysis performance optimization.<\/pre>"},
{"prefix":"-XX:","name":"RemoveUnusedSymbols","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Use linker option to prevent unreferenced symbols in image.<\/pre>"},
{"prefix":"-XX:","name":"ReplaceInputsWithConstantsBasedOnStamps","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"ReportAnalysisForbiddenType","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Report error if <typename>[:<UsageKind>{,<UsageKind>}] is discovered during analysis (valid values for UsageKind: \nInHeap, Allocated, Reachable).<\/pre>"},
{"prefix":"-XX:","name":"ReportExceptionStackTraces","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Show exception stack traces for exceptions during image building.).<\/pre>"},
{"prefix":"-XX:","name":"ReportUnsafeOffsetWarnings","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Print unsafe operation offset warnings.).<\/pre>"},
{"prefix":"-XX:","name":"ReportUnsupportedElementsAtRuntime","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Report usage of unsupported methods and fields at run time when they are accessed the first time, instead of as an error \nduring image building.<\/pre>"},
{"prefix":"-XX:","name":"ReservedAuxiliaryImageBytes","type":"int","defaultValue":"0","availability":"Hosted","description":"<pre>Size in bytes of an address space to reserve for auxiliary images. <\/pre>"},
{"prefix":"-XX:","name":"ResizePLAB","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Dynamically resize (survivor space) promotion LAB's.<\/pre>"},
{"prefix":"-XX:","name":"ResizeTLAB","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Dynamically resize TLAB size for threads.<\/pre>"},
{"prefix":"-XX:","name":"ResourceConfigurationFiles","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Files describing Java resources to be included in the image.<\/pre>"},
{"prefix":"-XX:","name":"ResourceConfigurationResources","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Resources describing Java resources to be included in the image.<\/pre>"},
{"prefix":"-XX:","name":"RespectVectorization","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Try avoid unrolling vectorizable loops.<\/pre>"},
{"prefix":"-XX:","name":"ReturnAfterAnalysis","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Return after analysis.<\/pre>"},
{"prefix":"-XX:","name":"ReturnSpecialRegs","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Return special registers from functions in LLVM bitcode. This may decrease performance if the target doesn't support \nreturning multiple values from a function.<\/pre>"},
{"prefix":"-XX:","name":"RuntimeAssertions","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Enable or disable Java assert statements at run time.<\/pre>"},
{"prefix":"-XX:","name":"RuntimeDebugInfo","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Provide debuginfo for runtime-compiled code.<\/pre>"},
{"prefix":"-XX:","name":"RuntimeSourceDestDir","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Directory where Java source-files will be placed for the debugger.<\/pre>"},
{"prefix":"-XX:","name":"RuntimeSystemAssertions","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Enable or disable Java system assertions at run time.<\/pre>"},
{"prefix":"-XX:","name":"SafepointPromptnessFailureNanos","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>Exit the VM if I can not come to a safepoint in this many nanoseconds. 0 implies forever. <\/pre>"},
{"prefix":"-XX:","name":"SafepointPromptnessWarningNanos","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>Print a warning if I can not come to a safepoint in this many nanoseconds. 0 implies forever. <\/pre>"},
{"prefix":"-XX:","name":"ScanObjectsParallel","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Object scanning in parallel.<\/pre>"},
{"prefix":"-XX:","name":"ScheduledDuplicationSimulation","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Simulation can either only process fixed nodes or schedule the graph and also process floating nodes.<\/pre>"},
{"prefix":"-XX:","name":"SerializationConfigurationFiles","type":"String","defaultValue":"None \n[Extra help available]","availability":"Hosted","description":"<pre>One or several (comma-separated) paths to JSON files that specify lists of serialization configurations.<\/pre>"},
{"prefix":"-XX:","name":"SerializationConfigurationResources","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Resources describing program elements to be made available for serialization (see SerializationConfigurationFiles).<\/pre>"},
{"prefix":"-XX:","name":"SerializationDenyConfigurationFiles","type":"String","defaultValue":"None \n[Extra help available]","availability":"Hosted","description":"<pre>One or several (comma-separated) paths to JSON files that specify lists of serialization configurations.<\/pre>"},
{"prefix":"-XX:","name":"SerializationDenyConfigurationResources","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Resources describing program elements that must not be made available for serialization.<\/pre>"},
{"prefix":"-XX:","name":"ServiceLoaderFeatureExcludeServiceProviders","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Comma-separated list of service providers that should be excluded.<\/pre>"},
{"prefix":"-XX:","name":"ServiceLoaderFeatureExcludeServices","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Comma-separated list of services that should be excluded.<\/pre>"},
{"prefix":"-XX:","name":"SharedLibrary","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Build shared library.<\/pre>"},
{"prefix":"-XX:","name":"ShowConfiguration","type":"String","defaultValue":"none","availability":"Runtime","description":"<pre>Writes to the VM log information about the compiler configuration selected. <\/pre>"},
{"prefix":"-XX:","name":"ShowDumpFiles","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Print the name of each dump file path as it's created.<\/pre>"},
{"prefix":"-XX:","name":"ShowSubstitutionSourceInfo","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Controls whether the source position information of snippets and method substitutions are exposed to HotSpot. Can be \nuseful when profiling to get more precise position information.<\/pre>"},
{"prefix":"-XX:","name":"SimpleFastInflatedLocking","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Handle simple cases for inflated monitors in the fast-path.<\/pre>"},
{"prefix":"-XX:","name":"SimpleMethodCalls","type":"int","defaultValue":"1","availability":"Runtime","description":"<pre>Maximum number of calls in a simple method. <\/pre>"},
{"prefix":"-XX:","name":"SimpleMethodGraphSize","type":"int","defaultValue":"256","availability":"Runtime","description":"<pre>Maximum number of nodes in a graph for a simple method. <\/pre>"},
{"prefix":"-XX:","name":"SimpleMethodIndirectCalls","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>Maximum number of indirect calls in a simple moethod. <\/pre>"},
{"prefix":"-XX:","name":"SimulationBasedLoopPeeling","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Use DBDS algorithm to simulate the impact of peeling on a loop.<\/pre>"},
{"prefix":"-XX:","name":"SimulationPruneUnlikelyBranches","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Ignore low frequency branches during simulation.<\/pre>"},
{"prefix":"-XX:","name":"SmallCompiledLowLevelGraphSize","type":"int","defaultValue":"330","availability":"Runtime","description":"<pre>If the previous low-level graph size of the method exceeds the threshold, it is not inlined. <\/pre>"},
{"prefix":"-XX:","name":"SmallRootIrPenaltyCoefficient","type":"double","defaultValue":"0.02","availability":"Runtime","description":"<pre>Reduces the likelihood of exploring call graphs with IR size much larger than the root. <\/pre>"},
{"prefix":"-XX:","name":"SnippetCounters","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enable counters for various paths in snippets.<\/pre>"},
{"prefix":"-XX:","name":"SoftRefLRUPolicyMSPerMB","type":"int","defaultValue":"1000","availability":"Runtime","description":"<pre>Number of milliseconds per MB of free space in the heap. <\/pre>"},
{"prefix":"-XX:","name":"SourceLevelDebugFilter","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Constrain debug info generation to the comma-separated list of package prefixes given to this option.<\/pre>"},
{"prefix":"-XX:","name":"SourceLevelDebug","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Preserve the local variable information for every Java source line to allow line-by-line stepping in the debugger. Allow \nthe lookup of Java-level method information, e.g., in stack traces.<\/pre>"},
{"prefix":"-XX:","name":"SourceSearchPath","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>List of used-defined paths (separated by the system's path-separator character) in addition to automatic \nSourceSearchPath detection.<\/pre>"},
{"prefix":"-XX:","name":"SpawnIsolates","type":"bool","defaultValue":"None","availability":"Hosted","description":"<pre>Support multiple isolates. <\/pre>"},
{"prefix":"-XX:","name":"SpectrePHTBarriers","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Select a strategy to mitigate speculative bounds check bypass (aka Spectre-PHT or Spectre V1). [Extra help available] <\/pre>"},
{"prefix":"-XX:","name":"SpectrePHTIndexMasking","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Mask indices to scope access to allocation size after bounds check.<\/pre>"},
{"prefix":"-XX:","name":"SpeculativeStoreCheck","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Speculates that arrays have exact type to optimize store checks.<\/pre>"},
{"prefix":"-XX:","name":"StackRedZoneSize","type":"int","defaultValue":"8192","availability":"Hosted","description":"<pre>Size (in bytes) of the red zone reserved at the end of the stack. This stack space can only be used by critical VM code \nand C code, e.g., to report fatal errors.<\/pre>"},
{"prefix":"-XX:","name":"StackSize","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>The size of each thread stack at run-time, in bytes. <\/pre>"},
{"prefix":"-XX:","name":"StackTrace","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Provide method names for stack traces.<\/pre>"},
{"prefix":"-XX:","name":"StackYellowZoneSize","type":"int","defaultValue":"32768","availability":"Hosted","description":"<pre>Size (in bytes) of the yellow zone reserved at the end of the stack. This stack space is reserved for VM use and cannot \nbe used by the application.<\/pre>"},
{"prefix":"-XX:","name":"StartFlightRecording","type":"","defaultValue":"\"\"","availability":"Runtime","description":"<pre>Start flight recording with options. <\/pre>"},
{"prefix":"-XX:","name":"StaticExecutableWithDynamicLibC","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Builds a statically linked executable with libc dynamically linked.<\/pre>"},
{"prefix":"-XX:","name":"StaticExecutable","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Build statically linked executable (requires static libc and zlib).<\/pre>"},
{"prefix":"-XX:","name":"StressExplicitExceptionCode","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Stress the code emitting explicit exception throwing code.<\/pre>"},
{"prefix":"-XX:","name":"StressInvokeWithExceptionNode","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Stress the code emitting invokes with explicit exception edges.<\/pre>"},
{"prefix":"-XX:","name":"StressTestEarlyReads","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Stress the code by emitting reads at earliest instead of latest point.<\/pre>"},
{"prefix":"-XX:","name":"StrictQueryCodeCompilation","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Use strict checks when performing query code compilation.<\/pre>"},
{"prefix":"-XX:","name":"StringIndexOfLimit","type":"int","defaultValue":"4096","availability":"Runtime","description":"<pre>String.indexOf invocations will be evaluated at compile time if the receiver is a constant and its length is lower than \nthis value.<\/pre>"},
{"prefix":"-XX:","name":"StripDebugInfo","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Strip debug info from the image.<\/pre>"},
{"prefix":"-XX:","name":"SubstitutionFiles","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Comma-separated list of file names with declarative substitutions.<\/pre>"},
{"prefix":"-XX:","name":"SubstitutionResources","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Comma-separated list of resource file names with declarative substitutions.<\/pre>"},
{"prefix":"-XX:","name":"SupportCompileInIsolates","type":"bool","defaultValue":"None","availability":"Hosted","description":"<pre>Support runtime compilation in separate isolates (enable at runtime with option CompileInIsolates). <\/pre>"},
{"prefix":"-XX:","name":"SupportJsrBytecodes","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"SupportOSRWithLocks","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Support OSR compilations with locks. If DeoptAfterOSR is true we can per definition not have unbalanced enter/exits \nmappings. If DeoptAfterOSR is false insert artificial monitor enters after the OSRStart to have balanced enter/exits in\nthe graph.<\/pre>"},
{"prefix":"-XX:","name":"SupportRecurringCallback","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Support a per-thread timer that is called at a specific interval.<\/pre>"},
{"prefix":"-XX:","name":"SuppressStderr","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Suppress console error output for unittests.<\/pre>"},
{"prefix":"-XX:","name":"SuppressStdout","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Suppress console normal output for unittests.<\/pre>"},
{"prefix":"-XX:","name":"SurvivorRatio","type":"int","defaultValue":"8","availability":"Runtime","description":"<pre>Ratio of eden/survivor space size. <\/pre>"},
{"prefix":"-XX:","name":"TLABAllocationWeight","type":"int","defaultValue":"35","availability":"Runtime","description":"<pre>Allocation averaging weight. <\/pre>"},
{"prefix":"-XX:","name":"TLABRefillWasteFraction","type":"int","defaultValue":"64","availability":"Runtime","description":"<pre>Maximum TLAB waste at a refill (internal fragmentation). <\/pre>"},
{"prefix":"-XX:","name":"TLABSize","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>Starting TLAB size (in bytes); zero means set ergonomically. <\/pre>"},
{"prefix":"-XX:","name":"TLABWasteIncrement","type":"int","defaultValue":"4","availability":"Runtime","description":"<pre>Increment allowed waste at slow allocation. <\/pre>"},
{"prefix":"-XX:","name":"TLABWasteTargetPercent","type":"int","defaultValue":"1","availability":"Runtime","description":"<pre>Percentage of Eden that can be wasted. <\/pre>"},
{"prefix":"-XX:","name":"TargetPLABWastePct","type":"int","defaultValue":"10","availability":"Runtime","description":"<pre>Target wasted space in last buffer as percent of overall allocation. <\/pre>"},
{"prefix":"-XX:","name":"TargetPlatform","type":"","defaultValue":"\"\"","availability":"Hosted","description":"<pre>Selects native-image compilation target (in <OS>-<architecture> format). Defaults to host's OS-architecture pair. <\/pre>"},
{"prefix":"-XX:","name":"TargetSurvivorRatio","type":"int","defaultValue":"50","availability":"Runtime","description":"<pre>Desired percentage of survivor space used after scavenge. <\/pre>"},
{"prefix":"-XX:","name":"TearDownFailureNanos","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>The number of nanoseconds before tearing down an isolate gives a failure message. 0 implies no message. <\/pre>"},
{"prefix":"-XX:","name":"TearDownWarningNanos","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>The number of nanoseconds before and between which tearing down an isolate gives a warning message. 0 implies no \nwarning.<\/pre>"},
{"prefix":"-XX:","name":"TempDirectory","type":"","defaultValue":"\"\"","availability":"Hosted","description":"<pre>Directory for temporary files generated during native image generation. If this option is specified, the temporary files \nare not deleted so that you can inspect them after native image generation.<\/pre>"},
{"prefix":"-XX:","name":"TestFile","type":"","defaultValue":"\"\"","availability":"Hosted"},
{"prefix":"-XX:","name":"ThrowUnsafeOffsetErrors","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Throw unsafe operation offset errors.).<\/pre>"},
{"prefix":"-XX:","name":"TierABackedgeNotifyFreqLog","type":"int","defaultValue":"16","availability":"Runtime","description":"<pre>Backedge notification frequency. <\/pre>"},
{"prefix":"-XX:","name":"TierABackedgeProfileProbabilityLog","type":"int","defaultValue":"12","availability":"Runtime","description":"<pre>Backedge profile probability. <\/pre>"},
{"prefix":"-XX:","name":"TierAInvokeInlineeNotifyFreqLog","type":"int","defaultValue":"-1","availability":"Runtime","description":"<pre>Inlinee invocation notification frequency (-1 means count, but do not notify). <\/pre>"},
{"prefix":"-XX:","name":"TierAInvokeNotifyFreqLog","type":"int","defaultValue":"13","availability":"Runtime","description":"<pre>Invocation notification frequency. <\/pre>"},
{"prefix":"-XX:","name":"TierAInvokeProfileProbabilityLog","type":"int","defaultValue":"8","availability":"Runtime","description":"<pre>Invocation profile probability. <\/pre>"},
{"prefix":"-XX:","name":"TieredAOT","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Do profiling and callbacks to tiered runtime.<\/pre>"},
{"prefix":"-XX:","name":"TimeStampProfiling","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Profile method execution time.<\/pre>"},
{"prefix":"-XX:","name":"Time","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Pattern for specifying scopes in which timing is enabled. See the Dump option for the pattern syntax. An empty value \nenables all timers unconditionally.<\/pre>"},
{"prefix":"-XX:","name":"TimedDynamicCounters","type":"int","defaultValue":"-1","availability":"Runtime","description":"<pre>Turn on the benchmark counters, and displays the results every n milliseconds. <\/pre>"},
{"prefix":"-XX:","name":"Timers","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Comma separated names of timers that are enabled irrespective of the value for Time option. An empty value enables all \ntimers unconditionally.<\/pre>"},
{"prefix":"-XX:","name":"TraceAuxiliaryImageClassHistogram","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enables detailed tracing of auxiliary image events.<\/pre>"},
{"prefix":"-XX:","name":"TraceAuxiliaryImageReferenceTree","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enables detailed tracing of auxiliary image events.<\/pre>"},
{"prefix":"-XX:","name":"TraceBytecodeParserLevel","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>The trace level for the bytecode parser. A value of 1 enables instruction tracing and any greater value emits a frame \nstate trace just prior to each instruction trace.Instruction tracing output from multiple compiler threads will be\ninterleaved so use of this option make most sense for single threaded compilation. The MethodFilter option can be used\nto refine tracing to selected methods.<\/pre>"},
{"prefix":"-XX:","name":"TraceClassInitialization","type":"","defaultValue":"\"\"","availability":"Hosted","description":"<pre>Comma-separated list of fully-qualified class names that class initialization is traced for. <\/pre>"},
{"prefix":"-XX:","name":"TraceCodeCache","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Print logging information for runtime code cache modifications.<\/pre>"},
{"prefix":"-XX:","name":"TraceDeoptimizationDetails","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Print verbose logging information for every deoptimization.<\/pre>"},
{"prefix":"-XX:","name":"TraceDeoptimization","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Print logging information for every deoptimization.<\/pre>"},
{"prefix":"-XX:","name":"TraceEscapeAnalysis","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"TraceExceptionHandlerStub","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Trace execution of stub used to handle an exception thrown by a callee.<\/pre>"},
{"prefix":"-XX:","name":"TraceHeapChunks","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Trace heap chunks during collections, if +VerboseGC and +PrintHeapShape.<\/pre>"},
{"prefix":"-XX:","name":"TraceHeapVerification","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Trace heap verification.<\/pre>"},
{"prefix":"-XX:","name":"TraceInlineDuringParsing","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Traces inlining performed during bytecode parsing.<\/pre>"},
{"prefix":"-XX:","name":"TraceInliningForStubsAndSnippets","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enable inlining decision tracing in stubs and snippets.<\/pre>"},
{"prefix":"-XX:","name":"TraceInlining","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enable tracing of inlining decisions.<\/pre>"},
{"prefix":"-XX:","name":"TraceLIRGeneratorLevel","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>The trace level for the LIR generator. <\/pre>"},
{"prefix":"-XX:","name":"TraceLoggingFeature","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>When enabled, logging feature details are printed.<\/pre>"},
{"prefix":"-XX:","name":"TraceMonitorsMethodFilter","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Trace monitor operations in methods whose fully qualified name contains this substring.<\/pre>"},
{"prefix":"-XX:","name":"TraceMonitorsTypeFilter","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Trace monitor operations on objects whose type contains this substring.<\/pre>"},
{"prefix":"-XX:","name":"TraceNativeToolUsage","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Trace all native tool invocations as part of image building.<\/pre>"},
{"prefix":"-XX:","name":"TraceObjectInstantiation","type":"","defaultValue":"\"\"","availability":"Hosted","description":"<pre>Comma-separated list of fully-qualified class names that object instantiation is traced for. <\/pre>"},
{"prefix":"-XX:","name":"TraceObjectPromotion","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Trace each object promotion (generates significant amounts of output).<\/pre>"},
{"prefix":"-XX:","name":"TraceParserPlugins","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Traces use of plugins during bytecode parsing.<\/pre>"},
{"prefix":"-XX:","name":"TraceSecurityServices","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Enable trace logging for the security services feature.<\/pre>"},
{"prefix":"-XX:","name":"TraceServiceLoaderFeature","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>When enabled, each service loader resource and class will be printed out to standard output.<\/pre>"},
{"prefix":"-XX:","name":"TraceStackVerification","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Trace stack verification.<\/pre>"},
{"prefix":"-XX:","name":"TraceUnwindStub","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Trace execution of the stub that routes an exception to a handler in the calling frame.<\/pre>"},
{"prefix":"-XX:","name":"TraceVMOperations","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Trace VMOperation execution.<\/pre>"},
{"prefix":"-XX:","name":"TrackAccessChain","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Track the callers for methods and accessing methods for fields.<\/pre>"},
{"prefix":"-XX:","name":"TrackGraphSizesInDuplication","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enable (if Count is enabled) graph size tracking during every duplication iteration.<\/pre>"},
{"prefix":"-XX:","name":"TrackInliningStatistics","type":"String","defaultValue":"none","availability":"Runtime","description":"<pre>Track inlining statistics (inlining duration, call tree size, compiler node counts, and the number of callsites). One \nof: none, interactive.<\/pre>"},
{"prefix":"-XX:","name":"TrackInputFlows","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Track the input for type flows.<\/pre>"},
{"prefix":"-XX:","name":"TrackMemUse","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Pattern for specifying scopes in which memory use tracking is enabled. See the Dump option for the pattern syntax. An \nempty value enables all memory use trackers unconditionally.<\/pre>"},
{"prefix":"-XX:","name":"TrackNodeInsertion","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Track source stack trace where a node was inserted into the graph.<\/pre>"},
{"prefix":"-XX:","name":"TrackNodeSourcePosition","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Track the NodeSourcePosition.<\/pre>"},
{"prefix":"-XX:","name":"TreatRuntimeCodeInfoReferencesAsWeak","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Determines if references from runtime-compiled code to Java heap objects should be treated as strong or weak.<\/pre>"},
{"prefix":"-XX:","name":"TrivialInliningSize","type":"int","defaultValue":"10","availability":"Runtime","description":"<pre>Graphs with less than this number of nodes are trivial and therefore always inlined. <\/pre>"},
{"prefix":"-XX:","name":"TrivialLoopSizeLimitForPeeling","type":"double","defaultValue":"512.0","availability":"Runtime","description":"<pre>Loop peeling will consider any loop with a size (in terms of estimated machine instructions) below this value to be a \nprime candidate for peeling. Larger loops will only be considered for peeling if the simulated benefit of peeling is\nrelatively high. The larger the loop, the greater the expected benefit has to be.<\/pre>"},
{"prefix":"-XX:","name":"TruffleCheckBlackListedMethods","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Fail if a method known as not suitable for partial evaluation is reachable for runtime compilation.<\/pre>"},
{"prefix":"-XX:","name":"TruffleCheckFrameImplementation","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Enforce that the Truffle runtime provides the only implementation of Frame.<\/pre>"},
{"prefix":"-XX:","name":"TruffleCheckNeverPartOfCompilation","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Check that CompilerAsserts.neverPartOfCompilation is not reachable for runtime compilation.<\/pre>"},
{"prefix":"-XX:","name":"TruffleCompilerConfiguration","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Select a compiler configuration for Truffle compilation (default: use Graal system compiler configuration).<\/pre>"},
{"prefix":"-XX:","name":"TruffleInlineDuringParsing","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Inline trivial methods in Truffle graphs during native image generation.<\/pre>"},
{"prefix":"-XX:","name":"TruffleMultiThreaded","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Enable support for Truffle background compilation.<\/pre>"},
{"prefix":"-XX:","name":"TrufflePropagateCompilationErrors","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Propagate Truffle compilation errors.<\/pre>"},
{"prefix":"-XX:","name":"TrustFinalDefaultFields","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Determines whether to treat final fields with default values as constant.<\/pre>"},
{"prefix":"-XX:","name":"TryExplodeOverPhis","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>PullThroughPhiOptimization: Enable floating node duplication over multiple phi nodes at once.<\/pre>"},
{"prefix":"-XX:","name":"TryPhiPhiPulls","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>PullThroughPhiOptimization: Enable floating node duplication over phis where the target node has different phis as \ninput.<\/pre>"},
{"prefix":"-XX:","name":"TuneInlinerExploration","type":"double","defaultValue":"0.0","availability":"Runtime","description":"<pre>Increases or decreases the time spent exploring inlining opportunities under the assumption that more time results in \nbetter peak performance and less time reduces time to reach (a lower) peak performance. The value of the option is\nclamped between -1 and 1 inclusive. Anything below 0, reduces the exploration time and anything above 0 increases\nexploration time. Note that this option is only a heuristic and should be tuned for any specific application.<\/pre>"},
{"prefix":"-XX:","name":"TypeCheckMaxHints","type":"int","defaultValue":"2","availability":"Runtime","description":"<pre>The maximum number of profiled types that will be used when compiling a profiled type check. Note that \nTypeCheckMinProfileHitProbability also influences whether profiling info is used in compiled type checks.<\/pre>"},
{"prefix":"-XX:","name":"TypeCheckMinProfileHitProbability","type":"double","defaultValue":"0.5","availability":"Runtime","description":"<pre>If the probability that a type check will hit one the profiled types (up to TypeCheckMaxHints) is below this value, the \ntype check will be compiled without profiling info.<\/pre>"},
{"prefix":"-XX:","name":"TypeFlowPrinterInRadius","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>How many levels of inputs to print. A value of 0 prints only the target flow. <\/pre>"},
{"prefix":"-XX:","name":"TypeFlowPrinterOutRadius","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>How many levels of outputs to print. A value of 0 prints only the target flow. <\/pre>"},
{"prefix":"-XX:","name":"TypeFlowSaturationCutoff","type":"int","defaultValue":"20","availability":"Runtime","description":"<pre>The maximum number of types recorded in a type flow. -1 indicates no limitation. <\/pre>"},
{"prefix":"-XX:","name":"TypicalCallGraphSize","type":"int","defaultValue":"200","availability":"Runtime","description":"<pre>Denotes the call graph size that is considered medium size. <\/pre>"},
{"prefix":"-XX:","name":"TypicalGraphSizeInvokeBonus","type":"int","defaultValue":"70","availability":"Runtime","description":"<pre>The increase in estimated typical graph size after inlining, per each extra invoke. <\/pre>"},
{"prefix":"-XX:","name":"TypicalGraphSizeMax","type":"int","defaultValue":"10000","availability":"Runtime","description":"<pre>The maximum in estimated inlined typical graph size. <\/pre>"},
{"prefix":"-XX:","name":"TypicalGraphSize","type":"int","defaultValue":"3250","availability":"Runtime","description":"<pre>The typical graph size at which inlining pressure must start growing. <\/pre>"},
{"prefix":"-XX:","name":"UnresolvedIsError","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Report unresolved elements as errors.<\/pre>"},
{"prefix":"-XX:","name":"UnrollMaxIterations","type":"int","defaultValue":"16","availability":"Runtime"},
{"prefix":"-XX:","name":"UnrollMultiEndLoops","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Unroll loops with multiple loop ends.<\/pre>"},
{"prefix":"-XX:","name":"UnrollMultiExitLoops","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Unroll loops with multiple loop exits.<\/pre>"},
{"prefix":"-XX:","name":"UnsafeAutomaticSubstitutionsLogLevel","type":"int","defaultValue":"1","availability":"Hosted","description":"<pre>Unsafe automatic substitutions logging level: Disabled=0, Basic=1, Info=2, Debug=3.). <\/pre>"},
{"prefix":"-XX:","name":"UnsafeOffsetWarningsAreFatal","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Print unsafe operation offset warnings.).<\/pre>"},
{"prefix":"-XX:","name":"UseBranchesWithin32ByteBoundary","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Force branch instructions to align with 32-bytes boundary, to mitigate the jcc erratum. See \nhttps://www.intel.com/content/dam/support/us/en/documents/processors/mitigations-jump-conditional-code-erratum.pdf for\nmore details. If not set explicitly, the default value will be determined according to the CPU model.<\/pre>"},
{"prefix":"-XX:","name":"UseCAPCache","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Indicate the C Annotation Processor to use previously cached native information when generating C Type information.<\/pre>"},
{"prefix":"-XX:","name":"UseCalleeSavedRegisters","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Use callee saved registers to reduce spilling for low-frequency calls to stubs (if callee saved registers are supported \nby the architecture).<\/pre>"},
{"prefix":"-XX:","name":"UseCardRememberedSetHeap","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Use a card remembered set heap for GC.<\/pre>"},
{"prefix":"-XX:","name":"UseCompilationStatistics","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enables CompilationStatistics.<\/pre>"},
{"prefix":"-XX:","name":"UseCompressedReferenceShift","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Use bit-shifting to enlarge the address range with narrow references.<\/pre>"},
{"prefix":"-XX:","name":"UseCompressedReferences","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Use compressed references (32-bit instead of 64-bit references to Java objects).<\/pre>"},
{"prefix":"-XX:","name":"UseContainerSupport","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Enable detection and runtime container configuration support.<\/pre>"},
{"prefix":"-XX:","name":"UseDedicatedVMOperationThread","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Determines if VM operations should be executed in a dedicated thread.<\/pre>"},
{"prefix":"-XX:","name":"UseDynamicNumberOfGCThreads","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Dynamically choose the number of threads up to a maximum of ParallelGCThreads parallel collectors will use for garbage \ncollection work.<\/pre>"},
{"prefix":"-XX:","name":"UseEncodedGraphs","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Encode and decode snippets and substitutions before parsing to test libgraal code path. This option is ignored in the \ncontext of libgraal.<\/pre>"},
{"prefix":"-XX:","name":"UseExceptionProbability","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"UseG1GC","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Determines if the G1 garbage collector should be used.<\/pre>"},
{"prefix":"-XX:","name":"UseGraalStubs","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Use Graal-generated stubs for complicated LIR operations instead of embedding all the emitted code.<\/pre>"},
{"prefix":"-XX:","name":"UseGraphCache","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Turn on graph caching.<\/pre>"},
{"prefix":"-XX:","name":"UseInlinedPythonHelper","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Embed python helper in binary.<\/pre>"},
{"prefix":"-XX:","name":"UseLibC","type":"String","defaultValue":"None","availability":"Hosted","description":"<pre>Selects the libc implementation to use. Available implementations: glibc, musl, bionic.<\/pre>"},
{"prefix":"-XX:","name":"UseLoopLimitChecks","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"UseMonitorFastPath","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Use thin locking fast path in snippets.<\/pre>"},
{"prefix":"-XX:","name":"UsePartialEscapeSelectiveInlining","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Use PartialEscapeSelectiveInliningPhase to give PartialEscape phase more opportunities.<\/pre>"},
{"prefix":"-XX:","name":"UsePerfData","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Flag to disable jvmstat instrumentation for performance testing.<\/pre>"},
{"prefix":"-XX:","name":"UsePriorityInlining","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Use priority-based inlining.<\/pre>"},
{"prefix":"-XX:","name":"UseReferenceHandlerThread","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Populate reference queues in a separate thread rather than after a garbage collection.<\/pre>"},
{"prefix":"-XX:","name":"UseServiceLoaderFeature","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Automatically register services for run-time lookup using ServiceLoader.<\/pre>"},
{"prefix":"-XX:","name":"UseSnippetGraphCache","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Use a cache for snippet graphs.<\/pre>"},
{"prefix":"-XX:","name":"UseSnippetTemplateCache","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Use a LRU cache for snippet templates.<\/pre>"},
{"prefix":"-XX:","name":"UseStringInlining","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Determines if the string inlining optimization should be used.<\/pre>"},
{"prefix":"-XX:","name":"UseTLAB","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Use thread-local object allocation.<\/pre>"},
{"prefix":"-XX:","name":"UseThinLocking","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Use thin locking to optimize monitor operations.<\/pre>"},
{"prefix":"-XX:","name":"UseTrappingNullChecks","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Use traps for null checks instead of explicit null-checks.<\/pre>"},
{"prefix":"-XX:","name":"UseTypeCheckHints","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"UseTypedArguments","type":"bool","defaultValue":"true","availability":"Hosted","description":"<pre>Use typed unboxed arguments for Truffle compilations.<\/pre>"},
{"prefix":"-XX:","name":"UseTypedResult","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Use typed unboxed return value for Truffle compilations.<\/pre>"},
{"prefix":"-XX:","name":"VTuneAbsoluteFilenames","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Use absolute path for source-filenames in VTune events.<\/pre>"},
{"prefix":"-XX:","name":"VTunePath","type":"","defaultValue":"\"\"","availability":"Hosted","description":"<pre>Path to VTune installation (usually /opt/intel/vtune_amplifier). <\/pre>"},
{"prefix":"-XX:","name":"VectorIntrinsics","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Enable vectorized array copy intrinsics.<\/pre>"},
{"prefix":"-XX:","name":"VectorUnroll","type":"int","defaultValue":"1","availability":"Runtime","description":"<pre>Unroll vectorized loops. <\/pre>"},
{"prefix":"-XX:","name":"Vectorization","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Enable vectorization.<\/pre>"},
{"prefix":"-XX:","name":"VectorizeAllocation","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Enable vectorized array initialization.<\/pre>"},
{"prefix":"-XX:","name":"VectorizeConditional","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Enable vectorization of conditional code.<\/pre>"},
{"prefix":"-XX:","name":"VectorizeDeopts","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Enable vectorization of loops with conditional deopts before writes.<\/pre>"},
{"prefix":"-XX:","name":"VectorizeFoldShaped","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Enable vectorization of loops implementing a higher-order 'fold' function.<\/pre>"},
{"prefix":"-XX:","name":"VectorizeGather","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Enable vectorization of vector gather operations.<\/pre>"},
{"prefix":"-XX:","name":"VectorizeLoops","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Enable vectorization of loops.<\/pre>"},
{"prefix":"-XX:","name":"VectorizeMapShaped","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Enable vectorization of loops implementing a higher-order 'map' function.<\/pre>"},
{"prefix":"-XX:","name":"VectorizeNegativeStride","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Enable vectorization of loops with negative strides.<\/pre>"},
{"prefix":"-XX:","name":"VectorizeSIMD","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Enable detection of SIMD patterns.<\/pre>"},
{"prefix":"-XX:","name":"VectorizeSafepoints","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Enable vectorization of loops with safepoints.<\/pre>"},
{"prefix":"-XX:","name":"VectorizeSequence","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Enable vectorization of sequence values.<\/pre>"},
{"prefix":"-XX:","name":"VerboseGC","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Print more information about the heap before and after each collection.<\/pre>"},
{"prefix":"-XX:","name":"VerificationDumpFile","type":"String","defaultValue":"\"pgoVerification.log\"","availability":"Hosted","description":"<pre>\nValue should point to a file where we dump the output of the verification phase if mismatches were encountered.<\/pre>"},
{"prefix":"-XX:","name":"VerifyAfterGC","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Verify memory system after GC.<\/pre>"},
{"prefix":"-XX:","name":"VerifyBalancedMonitors","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Emit extra code to dynamically check monitor operations are balanced.<\/pre>"},
{"prefix":"-XX:","name":"VerifyBeforeGC","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Verify memory system before GC.<\/pre>"},
{"prefix":"-XX:","name":"VerifyDeoptimizationEntryPoints","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Verify that all possible deoptimization entry points have been properly compiled and registered in the metadata.<\/pre>"},
{"prefix":"-XX:","name":"VerifyDirtyCardsAfterCollection","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Verify dirty cards after each collection.<\/pre>"},
{"prefix":"-XX:","name":"VerifyDirtyCardsBeforeCollection","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Verify dirty cards before each collection.<\/pre>"},
{"prefix":"-XX:","name":"VerifyDuplicationOperations","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"VerifyDuringGC","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Verify memory system during GC (between phases).<\/pre>"},
{"prefix":"-XX:","name":"VerifyGCStartAt","type":"int","defaultValue":"0","availability":"Runtime","description":"<pre>GC invoke count where +VerifyHeap kicks in. <\/pre>"},
{"prefix":"-XX:","name":"VerifyGraalGraphEdges","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Perform expensive verification of graph inputs, usages, successors and predecessors.<\/pre>"},
{"prefix":"-XX:","name":"VerifyGraalGraphs","type":"bool","defaultValue":"true","availability":"Runtime","description":"<pre>Verify graphs often during compilation when assertions are turned on.<\/pre>"},
{"prefix":"-XX:","name":"VerifyGraalPhasesSize","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Verify before - after relation of the relative, computed, code size of a graph.<\/pre>"},
{"prefix":"-XX:","name":"VerifyHeapAfterCollection","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Verify the heap after each collection.<\/pre>"},
{"prefix":"-XX:","name":"VerifyHeapAtReturn","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Perform platform dependent validation of the Java heap at returns.<\/pre>"},
{"prefix":"-XX:","name":"VerifyHeapBeforeCollection","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Verify the heap before each collection.<\/pre>"},
{"prefix":"-XX:","name":"VerifyHeap","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Verify the heap before and after each collection.<\/pre>"},
{"prefix":"-XX:","name":"VerifyKillCFGUnusedNodes","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Verify that there are no new unused nodes when performing killCFG.<\/pre>"},
{"prefix":"-XX:","name":"VerifyNamingConventions","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Verify naming conventions during image construction.<\/pre>"},
{"prefix":"-XX:","name":"VerifyPGOProfiles","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Turn on a verification phase to check all probabilities injected in nodes match profiles.<\/pre>"},
{"prefix":"-XX:","name":"VerifyPhases","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"VerifyRememberedSets","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Verify GC remembered sets.<\/pre>"},
{"prefix":"-XX:","name":"VerifyStackAfterCollection","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Verify stacks after each collection.<\/pre>"},
{"prefix":"-XX:","name":"VerifyStackBeforeCollection","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Verify stacks before each collection.<\/pre>"},
{"prefix":"-XX:","name":"VerifyWriteBarrierElimination","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Add code to verify that eliminated barriers weren't needed.<\/pre>"},
{"prefix":"-XX:","name":"Verify","type":"String","defaultValue":"None","availability":"Runtime","description":"<pre>Pattern for specifying scopes in which logging is enabled. See the Dump option for the pattern syntax.<\/pre>"},
{"prefix":"-XX:","name":"Virtualize","type":"","defaultValue":"\"\"","availability":"Hosted","description":"<pre>Build the native image for a virtualized environment. The argument is a path to a JSON file that specifies the \nvirtualized environment properties.<\/pre>"},
{"prefix":"-XX:","name":"WriteableCodeCache","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Allocate code cache with write access, allowing inlining of objects.<\/pre>"},
{"prefix":"-XX:","name":"YoungPLABSize","type":"int","defaultValue":"4096","availability":"Runtime","description":"<pre>Size of young gen promotion LAB's (in HeapWords). <\/pre>"},
{"prefix":"-XX:","name":"ZapChunks","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Fill unused memory chunks with a sentinel value.<\/pre>"},
{"prefix":"-XX:","name":"ZapConsumedHeapChunks","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>After use, Fill memory chunks with a sentinel value.<\/pre>"},
{"prefix":"-XX:","name":"ZapProducedHeapChunks","type":"bool","defaultValue":"false","availability":"Hosted","description":"<pre>Before use, fill memory chunks with a sentinel value.<\/pre>"},
{"prefix":"-XX:","name":"ZapStackOnMethodEntry","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre><\/pre>"},
{"prefix":"-XX:","name":"ZeroTLAB","type":"bool","defaultValue":"false","availability":"Runtime","description":"<pre>Zero out the newly created TLAB. Default: - (disabled). <\/pre>"}
] }