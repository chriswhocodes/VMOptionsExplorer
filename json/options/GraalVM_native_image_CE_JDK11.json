{ "switches" : [ {"prefix":"-XX:","defaultValue":"true","name":"AOTInline","description":"<pre>Perform method inlining in the AOT compiled native image.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"2.5","name":"AOTInliningDepthToSizeRate","availability":"Runtime","type":"double"},
{"prefix":"-XX:","defaultValue":"300","name":"AOTInliningSizeMaximum","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"50","name":"AOTInliningSizeMinimum","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"true","name":"AOTTrivialInline","description":"<pre>Perform trivial method inlining in the AOT compiled native image.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"AOTVerifyOops","description":"<pre>Generate verify oop checks in AOT code.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"\"graal_\"","name":"APIFunctionPrefix","description":"<pre>Prefix that is added to the names of API functions. <\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"ASMInstructionProfiling","description":"<pre>Enables instruction profiling on assembler level. Valid values are a comma separated list of supported instructions. \nCompare with subclasses of Assembler.InstructionCounter.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"AbortOnBenchmarkCounterOverflow","description":"<pre>Abort VM with SIGILL if benchmark counters controlled by the (Generic|Timed|Benchmark)DynamicCounters.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"-1","name":"ActiveProcessorCount","description":"<pre>Overwrites the available number of processors provided by the OS. Any value <= 0 means using the processor count from \nthe OS.<\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"false","name":"AddAllCharsets","description":"<pre>Make all hosted charsets available at run time.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"AddAllFileSystemProviders","description":"<pre>Make all supported providers returned by FileSystemProvider.installedProviders() available at run time.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"\"\"","name":"AdditionalLinkerOptions","description":"<pre>String which would be appended to the linker call. <\/pre>","availability":"Hosted","type":""},
{"prefix":"-XX:","defaultValue":"None","name":"AggregatedMetricsFile","description":"<pre>File to which aggregated metrics are dumped at shutdown. A CSV format is used if the file ends with .csv otherwise a \nmore human readable format is used. If not specified, metrics are dumped to the console.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"true","name":"AliasArrayTypeFlows","description":"<pre>Model all array type flows using a unique elements type flow abstraction.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"1048576","name":"AlignedHeapChunkSize","description":"<pre>The size of an aligned chunk. <\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"1","name":"AllocateInstancePrefetchLines","description":"<pre>Number of cache lines to load after the object address using prefetch instructions. <\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"256","name":"AllocatePrefetchDistance","description":"<pre>Sets the size (in bytes) of the prefetch distance for object allocation. Memory about to be written with the value of \nnew objects is prefetched up to this distance starting from the address of the last allocated object. Each Java thread\nhas its own allocation point.<\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"0","name":"AllocatePrefetchInstr","description":"<pre>Sets the prefetch instruction to prefetch ahead of the allocation pointer. Possible values are from 0 to 3. The actual \ninstructions behind the values depend on the platform.<\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"3","name":"AllocatePrefetchLines","description":"<pre>Number of cache lines to load after the array allocation using prefetch instructions. <\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"16","name":"AllocatePrefetchStepSize","description":"<pre>Sets the step size (in bytes) for sequential prefetch instructions. <\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"1","name":"AllocatePrefetchStyle","description":"<pre>Generated code style for prefetch instructions: for 0 or less no prefetch instructions are generated and for 1 or more \nprefetch instructions are introduced after each allocation.<\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"1048576","name":"AllocationBeforePhysicalMemorySize","description":"<pre>\nBytes that can be allocated before (re-)querying the physical memory size.<\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"1048576","name":"AllocationProfilingThreshold","description":"<pre>The minimum size in bytes required for printing an allocation profiling entry. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"false","name":"AllocationProfiling","description":"<pre>Enable runtime profiling of allocation.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"AllocationSiteSensitiveHeap","description":"<pre>A context sensitive heap means that each heap allocated object is modeled by using at least the allocation site.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"AllowFoldMethods","description":"<pre>Allow MethodTypeFlow to see @Fold methods.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"AllowIncompleteClasspath","description":"<pre>Allow image building with an incomplete class path: report type resolution errors at run time when they are accessed the \nfirst time, instead of during image building.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"AllowJRTFileSystem","description":"<pre>Enable support for reading Java modules (jimage format) and the jrt:// file system. Requires java.home to be set at \nruntime.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"AllowVMInspection","description":"<pre>Enables features that allow the VM to be inspected during runtime.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"AlwaysInlineIntrinsics","description":"<pre>Unconditionally inline intrinsics.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"AlwaysInlineVTableStubs","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"\"insens\"","name":"AnalysisContextSensitivity","description":"<pre>Controls the static analysis context sensitivity. Available values: insens (context insensitive analysis), allocsens \n(context insensitive analysis, context insensitive heap, allocation site sensitive heap), _1obj (1 object sensitive\nanalysis with a context insensitive heap), _2obj1h (2 object sensitive with a 1 context sensitive heap).<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"8","name":"AnalysisSizeCutoff","description":"<pre>The maximum size of type and method profiles returned by the static analysis. -1 indicates no limitation. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"None","name":"AnalysisStatisticsFile","description":"<pre>Analysis results statistics file.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"true","name":"BenchmarkCounterPrintingCutoff","description":"<pre>Use a cutoff to print only most significant counters.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"BenchmarkCountersDumpDynamic","description":"<pre>Dump dynamic counters.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"BenchmarkCountersDumpStatic","description":"<pre>Dump static counters.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"BenchmarkCountersFile","description":"<pre>File to which benchmark counters are dumped. A CSV format is used if the file ends with .csv otherwise a more human \nreadable format is used. The fields in the CSV format are: category, group, name, value.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"None [Extra help available]","name":"BenchmarkDynamicCounters","description":"<pre>Turn on the benchmark counters. The format of this option is:.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"BitcodeOptimizations","description":"<pre>Enable LLVM bitcode optimizations.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"BootstrapInitializeOnly","description":"<pre>Do not compile anything on bootstrap but just initialize the compiler.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"15.0","name":"BootstrapTimeout","description":"<pre>Maximum time in minutes to spend bootstrapping (0 to disable this limit). <\/pre>","availability":"Runtime","type":"double"},
{"prefix":"-XX:","defaultValue":"0.25","name":"BootstrapWatchDogCriticalRateRatio","description":"<pre>Ratio of the maximum compilation rate below which the bootstrap compilation rate must not fall (0 or less disables \nmonitoring).<\/pre>","availability":"Runtime","type":"double"},
{"prefix":"-XX:","defaultValue":"\"\"","name":"CAPCacheDir","description":"<pre>Directory where information generated by the CAnnotation Processor are cached. <\/pre>","availability":"Hosted","type":""},
{"prefix":"-XX:","defaultValue":"None","name":"CCompilerOption","description":"<pre>Provide custom C compiler option used for query code compilation.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"CCompilerPath","description":"<pre>Provide custom path to C compiler used for query code compilation and linking.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"CLibraryPath","description":"<pre>Search path for C libraries passed to the linker (list of comma-separated directories).<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"CPUFeatures","description":"<pre>Comma separated list of CPU features that will be used for image generation. The specific options available are platform \ndependent. For AMD64, SSE and SSE2 are enabled by default. Available features are: CX8, CMOV, FXSR, HT, MMX,\nAMD_3DNOW_PREFETCH, SSE3, SSSE3, SSE4A, SSE4_1, SSE4_2, POPCNT, LZCNT, TSC, TSCINV, AVX, AVX2, AES, ERMS, CLMUL, BMI1,\nBMI2, RTM, ADX, AVX512F, AVX512DQ, AVX512PF, AVX512ER, AVX512CD, AVX512BW, AVX512VL, SHA, FMA. On AArch64, no features\nare enabled by default. Available features are: FP, ASIMD, EVTSTRM, AES, PMULL, SHA1, SHA2, CRC32, LSE, STXR_PREFETCH,\nA53MAC.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"\"C89\"","name":"CStandard","description":"<pre>C standard to use in header files. Possible values are: [C89, C99, C11]. <\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"true","name":"CanOmitFrame","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"CanonicalGraphStringsCheckConstants","description":"<pre>Exclude virtual nodes when dumping canonical text for graphs.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"CanonicalGraphStringsExcludeVirtuals","description":"<pre>Exclude virtual nodes when dumping canonical text for graphs.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"CanonicalGraphStringsRemoveIdentities","description":"<pre>Attempts to remove object identity hashes when dumping canonical text for graphs.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"CheckRecurringCallbackOnNativeToJavaTransition","description":"<pre>Test whether a thread's recurring callback is pending on each transition from native code to Java.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"CheckToolchain","description":"<pre>Check if native-toolchain is known to work with native-image.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"ClassInitialization","description":"<pre>A comma-separated list of classes appended with their initialization strategy (':build_time', ':rerun', or ':run_time').<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"\"\"","name":"Class","description":"<pre>Class containing the default entry point method. Optional if --shared is used. <\/pre>","availability":"Hosted","type":""},
{"prefix":"-XX:","defaultValue":"false","name":"ClearMetricsAfterBootstrap","description":"<pre>Clear the debug metrics after bootstrap.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"16","name":"CodeAlignment","description":"<pre>Alignment of AOT and JIT compiled code in bytes. <\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"false","name":"CodeCacheCounters","description":"<pre>Count accesses to the image and runtime code info table.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"CodeInfoEncoderCounters","description":"<pre>Statistics about code and deoptimization information.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"256","name":"CodeInfoIndexGranularity","description":"<pre>The granularity of the index for looking up code metadata. Should be a power of 2. Larger values make the index smaller, \nbut access slower.<\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"false","name":"CollectYoungGenerationSeparately","description":"<pre>Determines if a full GC collects the young generation separately or together with the old generation.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"CompilationBailoutAsFailure","description":"<pre>Treat compilation bailouts like compilation failures.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"0","name":"CompilationCountLimit","description":"<pre>The number of compilations allowed for any method before the VM exits (a value of 0 means there is no limit). <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"None","name":"CompilationExcludePhases","description":"<pre>Exclude certain phases from compilation, either unconditionally or with a method filter.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"300","name":"CompilationExpirationPeriod","description":"<pre>Time limit in seconds before a compilation expires (0 to disable the limit). The compilation alarm will be implicitly \ndisabled if assertions are enabled.<\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"Silent","name":"CompilationFailureAction","description":"<pre>Specifies the action to take when compilation fails. [Extra help available] <\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"0","name":"CompilationIsolateAddressSpaceSize","description":"<pre>Size of the reserved address space of each compilation isolate (0: default for new isolates). <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"60.0","name":"CompilationWatchDogStackTraceInterval","description":"<pre>\nInterval in seconds between a watch dog reporting stack traces for long running compilations.<\/pre>","availability":"Runtime","type":"double"},
{"prefix":"-XX:","defaultValue":"0.0","name":"CompilationWatchDogStartDelay","description":"<pre>Delay in seconds before watch dog monitoring a compilation (0 disables monitoring). <\/pre>","availability":"Runtime","type":"double"},
{"prefix":"-XX:","defaultValue":"true","name":"CompileGraalWithC1Only","description":"<pre>In tiered mode compile Graal and JVMCI using optimized first tier code.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"CompileInIsolates","description":"<pre>Activate runtime compilation in separate isolates (enable support during image build with option \nSupportCompileInIsolates).<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"\"lir\"","name":"CompilerBackend","description":"<pre>Backend used by the compiler. <\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"CompilerConfiguration","description":"<pre>Names the compiler configuration to use. If omitted, the compiler configuration with the highest auto-selection priority \nis used. To see the set of available configurations, supply the value 'help' to this option.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"4","name":"ConditionalEliminationMaxIterations","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"true","name":"ConditionalElimination","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"ConfigurationFileDirectories","description":"<pre>Directories directly containing configuration files for dynamic features at runtime.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"ConfigurationResourceRoots","description":"<pre>Resource path above configuration resources for dynamic features at runtime.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"CountWriteBarriers","description":"<pre>Instrument write barriers with counters.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"Count","description":"<pre>Pattern for specifying scopes in which counters are enabled. See the Dump option for the pattern syntax. An empty value \nenables all counters unconditionally.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"Counters","description":"<pre>Comma separated names of counters that are enabled irrespective of the value for Count option. An empty value enables \nall counters unconditionally.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"CrashAt","description":"<pre>Pattern for method(s) that will trigger an exception when compiled. This option exists to test handling compilation \ncrashes gracefully. See the MethodFilter option for the pattern syntax. A ':Bailout' suffix will raise a bailout\nexception and a ':PermanentBailout' suffix will raise a permanent bailout exception.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"\"\"","name":"CustomLD","description":"<pre>Path to a custom ld binary for LLVM linking. <\/pre>","availability":"Hosted","type":""},
{"prefix":"-XX:","defaultValue":"false","name":"DashboardAll","description":"<pre>In the dashboard dump, include all available information about the native image (this takes precedence over more \nspecific flags).<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"DashboardBgv","description":"<pre>Set dashboard to use BGV format for dump.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"DashboardCode","description":"<pre>In the dashboard dump, include the breakdown of the code size across different packages.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"DashboardDump","description":"<pre>Enable dashboard dumps to the specified file.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"DashboardHeap","description":"<pre>In the dashboard dump, include the breakdown of the object sizes in the heap across different classes.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"DashboardJson","description":"<pre>Set dashboard to use JSON format for dump.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"DashboardPointsTo","description":"<pre>In the dashboard dump, include the information about the points-to analysis.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"DashboardPretty","description":"<pre>Set dashboard to use pretty print in JSON format.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"DeadlockWatchdogExitOnTimeout","description":"<pre>Exit the image builder VM after printing call stacks.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"10","name":"DeadlockWatchdogInterval","description":"<pre>The interval in minutes between watchdog checks (0 disables the watchdog). <\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"\"sources\"","name":"DebugInfoSourceCacheRoot","description":"<pre>Directory under which to create source file cache for Application or GraalVM classes. <\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"DebugInfoSourceSearchPath","description":"<pre>Search path for source files for Application or GraalVM classes (list of comma-separated directories or jar files).<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"DebugStubsAndSnippets","description":"<pre>Enable debug output for stub code generation and snippet preparation.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"DeleteLocalSymbols","description":"<pre>Use linker option to remove all local symbols from image.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"DeoptALot","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"DeoptAfterOSR","description":"<pre>Deoptimize OSR compiled code when the OSR entry loop is finished if there is no mature profile available for the rest of \nthe method.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"DeoptimizeAll","description":"<pre>Compiles all methods as deoptimization targets for testing.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"40","name":"DeoptsToDisableOptimisticOptimization","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"false","name":"DetailedAsserts","description":"<pre>Enable expensive assertions if normal assertions (i.e. -ea or -esa) are enabled.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"DetectUserDirectoriesInImageHeap","description":"<pre>When set to true, the image generator verifies that the image heap does not contain a home directory as a substring.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"3","name":"DiagnoseDumpLevel","description":"<pre>Specify the DumpLevel if CompilationFailureAction#Diagnose is used.See CompilationFailureAction for details. \nfile:doc-files/CompilationFailureActionHelp.txt.<\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"false","name":"DisableExplicitGC","description":"<pre>Ignore calls to System.gc().<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"DisableIntercept","description":"<pre>Disable intercepting exceptions in debug scopes.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"DivertParameterReturningMethod","description":"<pre>Analysis: Detect methods that return one of their parameters and hardwire the parameter straight to the return.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"DumpHeap","description":"<pre>Dump the heap at a specific time during image building.The option accepts a list of comma separated phases, any of: \nafter-analysis, before-compilation.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"DumpLLVMStackMap","description":"<pre>Dump contents of the generated stackmap to the specified file.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"DumpOnError","description":"<pre>Send compiler IR to dump handlers on error.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"DumpOnPhaseChange","description":"<pre>Dump a before and after graph if the named phase changes the graph.%nThe argument is substring matched against the \nsimple name of the phase class.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"\"graal_dumps\"","name":"DumpPath","description":"<pre>The directory where various Graal dump files are written. <\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"DumpTargetInfo","description":"<pre>Show native-toolchain information and image-build settings.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"DumpThreadStacksOnSignal","description":"<pre>Dumps all thread stacktraces on SIGQUIT/SIGBREAK.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"None [Extra help available]","name":"Dump","description":"<pre>Filter pattern for specifying scopes in which dumping is enabled.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"DumpingErrorsAreFatal","description":"<pre>Treat any exceptions during dumping as fatal.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"DuplicateIrreducibleLoops","description":"<pre>When enabled, some limited amount of duplication will be performed in order compile code containing irreducible loops.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"DynamicCountersPrintGroupSeparator","description":"<pre>Use grouping separators for number printing.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"None [Extra help available]","name":"DynamicProxyConfigurationFiles","description":"<pre>One or several (comma-separated) paths to JSON files that specify lists of interfaces that define Java proxy classes.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"DynamicProxyConfigurationResources","description":"<pre>Resources describing program elements to be made available for reflection (see ProxyConfigurationFiles).<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"DynamicProxyTracing","description":"<pre>Enable trace logging for dynamic proxy.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"EagerSnippets","description":"<pre>Eagerly construct extra snippet info.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"EmitStringEncodingSubstitutions","description":"<pre>Emit substitutions for UTF16 and latin1 compression.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"EnableAllSecurityServices","description":"<pre>Add all security service classes to the generated image.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"EnableLoggingFeature","description":"<pre>Enable the feature that provides support for logging.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"EnableSecurityServicesFeature","description":"<pre>Enable the feature that provides support for security services.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"EnableURLProtocols","description":"<pre>List of comma separated URL protocols to enable.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"EnforceMaxRuntimeCompileMethods","description":"<pre>Enforce checking of maximum number of methods allowed for runtime compilation. Useful for checking in the gate that the \nnumber of methods does not go up without a good reason.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"\"\"","name":"EntryPointNamePrefix","description":"<pre>Prefix that is added to the names of entry point methods. <\/pre>","availability":"Hosted","type":""},
{"prefix":"-XX:","defaultValue":"2","name":"EscapeAnalysisIterations","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"20","name":"EscapeAnalysisLoopCutoff","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"None","name":"EscapeAnalyzeOnly","description":"<pre><\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"800","name":"ExactFullUnrollMaxNodes","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"200","name":"ExactPartialUnrollMaxNodes","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"None","name":"ExcludeResources","description":"<pre>Regexp to match names of resources to be excluded from the image.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"ExhaustiveHeapScan","description":"<pre>Scan all objects reachable from roots for analysis. By default false.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"ExitAfterAnalysis","description":"<pre>Exit after analysis.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"ExitAfterCAPCache","description":"<pre>Exit image generation after C Annotation Processor Cache creation.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"ExitAfterQueryCodeGeneration","description":"<pre>Output query code for target platform without executing it.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"ExitAfterRelocatableImageWrite","description":"<pre>Exit after writing relocatable file.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"ExitVMOnException","description":"<pre>Alias for CompilationFailureAction=ExitVM.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"ExtendedAsserts","description":"<pre>Enable extended asserts which slow down analysis.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"FailedLoopExplosionIsFatal","description":"<pre>Do not bail out but throw an exception on failed loop explosion.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"FallbackExecutorClasspath","description":"<pre>Internal option used to specify Classpath for FallbackExecutor.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"FallbackExecutorJavaArg","description":"<pre>Internal option used to specify java arguments for FallbackExecutor.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"FallbackExecutorMainClass","description":"<pre>Internal option used to specify MainClass for FallbackExecutor.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"FallbackExecutorRuntimeJavaArg","description":"<pre>Internal option used to specify runtime java arguments for FallbackExecutor.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"FallbackExecutorSystemProperty","description":"<pre>Internal option used to specify system properties for FallbackExecutor.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"5","name":"FallbackThreshold","description":"<pre>Define when fallback-image generation should be used. <\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"None","name":"Features","description":"<pre>A comma-separated list of fully qualified Feature implementation classes.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"true","name":"FoldSecurityManagerGetter","description":"<pre>Fold SecurityManager getter.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"ForceDumpGraphsBeforeCompilation","description":"<pre>Force-dump graphs before compilation.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"ForceNoROSectionRelocations","description":"<pre>Use only a writable native image heap (requires ld.gold linker).<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"15","name":"FullUnrollConstantCompareBoost","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"60","name":"FullUnrollMaxApplication","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"600","name":"FullUnrollMaxIterations","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"400","name":"FullUnrollMaxNodes","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"true","name":"FullUnroll","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"-1","name":"GCDebugStartCycle","description":"<pre>Start tracing compiled GC barriers after N garbage collections (disabled if N <= 0). <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"false","name":"GatherSafepointStatistics","description":"<pre>Gather statistics about each safepoint.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"GenLoopSafepoints","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"0","name":"GenerateDebugInfo","description":"<pre>Insert debug info into the generated native image or library. <\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"false","name":"GeneratePIC","description":"<pre>Generate position independent code.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"GenericDynamicCounters","description":"<pre>Turn on the benchmark counters, and displays the results on VM shutdown.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"GraalArithmeticStubs","description":"<pre>Use Graal arithmetic stubs instead of HotSpot stubs where possible.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"GraalCompileOnly","description":"<pre>A filter applied to a method the VM has selected for compilation by Graal. A method not matching the filter is \nredirected to a lower tier compiler. The filter format is the same as for the MethodFilter option.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"70","name":"GraphCompressionThreshold","description":"<pre>Graal graph compression is performed when percent of live nodes falls below this value. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"false","name":"GreyToBlackObjRefDemographics","description":"<pre>Develop demographics of the object references visited.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"0","name":"GreyToBlackObjectVisitorDiagnosticHistory","description":"<pre>\nLength of GreyToBlackObjectVisitor history for diagnostics. 0 implies no history is kept.<\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"true","name":"GuardPriorities","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"0","name":"HeapChunkHeaderPadding","description":"<pre>Number of bytes at the beginning of each heap chunk that are not used for payload data, i.e., can be freely used as \nmetadata by the heap chunk provider.<\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"true","name":"HeapVerificationFailureIsFatal","description":"<pre>Failed verification of the heap (if enabled) causes termination.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"HotSpotDeoptExplicitExceptions","description":"<pre>Testing only option that forces deopts for exception throws.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"HotSpotPostOnExceptions","description":"<pre>Testing only option that forces deopts for exception throws.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"HotSpotPrintInlining","description":"<pre>Print inlining optimizations.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"HybridStaticContext","description":"<pre>Enable hybrid context for static methods, i.e. uses invocation site as context for static methods.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"ImageHeapCardMarking","description":"<pre>Enables card marking for image heap objects, which arranges them in chunks. Automatically enabled when supported. <\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"\"\"","name":"ImageObjectTreeExpandRoots","description":"<pre>Override the default suppression of specified roots. See: Reports.md. <\/pre>","availability":"Runtime","type":""},
{"prefix":"-XX:","defaultValue":"\"\"","name":"ImageObjectTreeExpandTypes","description":"<pre>Override the default suppression of specified types. See: Reports.md. <\/pre>","availability":"Runtime","type":""},
{"prefix":"-XX:","defaultValue":"\"\"","name":"ImageObjectTreeSuppressRoots","description":"<pre>Suppress the expansion of specified roots. See: Reports.md. <\/pre>","availability":"Runtime","type":""},
{"prefix":"-XX:","defaultValue":"\"\"","name":"ImageObjectTreeSuppressTypes","description":"<pre>Suppress the expansion of specified types. See: Reports.md. <\/pre>","availability":"Runtime","type":""},
{"prefix":"-XX:","defaultValue":"\"\"","name":"ImageSymbolsPrefix","description":"<pre>Common prefix used by method symbols in image. <\/pre>","availability":"Hosted","type":""},
{"prefix":"-XX:","defaultValue":"false","name":"ImmutableCode","description":"<pre>Try to avoid emitting code where patching is required.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"IncludeAllTimeZones","description":"<pre>When true, all time zones will be pre-initialized in the image.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"0","name":"IncludeLLVMDebugInfo","description":"<pre>Include debugging info in the generated image (for LLVM backend). <\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"false","name":"IncludeNodeSourcePositions","description":"<pre>Track NodeSourcePositions during runtime-compilation.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"IncludeResourceBundles","description":"<pre>Comma separated list of bundles to be included into the image.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"IncludeResources","description":"<pre>Regexp to match names of resources to be included in the image.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"\"\"","name":"IncludeTimeZones","description":"<pre>The time zones, in addition to the default zone of the host, that will be pre-initialized in the image. <\/pre>","availability":"Hosted","type":""},
{"prefix":"-XX:","defaultValue":"\"com.oracle.svm.core.genscavenge.CollectionPolicy$BySpaceAndTime\"","name":"InitialCollectionPolicy","description":"<pre>\nThe initial garbage collection policy, as a fully-qualified class name (might require quotes or escaping).<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"9","name":"InlineBeforeAnalysisMaxDepth","description":"<pre>Maximum depth when inlining. <\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"false","name":"InlineBeforeAnalysis","description":"<pre>Experimental: Inline methods which folds to constant during parsing before the static analysis.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"10","name":"InlineDuringParsingMaxDepth","description":"<pre>Maximum depth when inlining during bytecode parsing. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"true","name":"InlineDuringParsing","description":"<pre>Inlines trivial methods during bytecode parsing.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"InlineEverything","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"InlineIntrinsicsDuringParsing","description":"<pre>Inlines intrinsic methods during bytecode parsing.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"InlineMegamorphicCalls","description":"<pre>Inline calls with megamorphic type profile (i.e., not all types could be recorded).<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"InlineMonomorphicCalls","description":"<pre>Inline calls with monomorphic type profile.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"InlinePartialIntrinsicExitDuringParsing","description":"<pre>Inlines partial intrinsic exits during bytecode parsing when possible. A partial intrinsic exit is a call within an \nintrinsic to the method being intrinsified and denotes semantics of the original method that the intrinsic does not\nsupport.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"InlinePolymorphicCalls","description":"<pre>Inline calls with polymorphic type profile.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"InlineVTableStubs","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"Inline","description":"<pre>Enable inlining.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"1000","name":"InliningDepthError","description":"<pre>Maximum inlining depth during partial evaluation before reporting an infinite recursion. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"\"inspect\"","name":"InspectServerContentPath","description":"<pre>Path to the contents of the Inspect web server. <\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"InstallExitHandlers","description":"<pre>Provide java.lang.Terminator exit handlers for executable images.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"InstallSegfaultHandler","description":"<pre>Install segfault handler that prints register contents and full Java stacktrace.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"InterceptBailout","description":"<pre>Intercept also bailout exceptions.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"Intrinsify","description":"<pre>Use compiler intrinsifications.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"JNIConfigurationFiles","description":"<pre>Files describing program elements to be made accessible via JNI (for syntax, see ReflectionConfigurationFiles).<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"JNIConfigurationResources","description":"<pre>Resources describing program elements to be made accessible via JNI (see JNIConfigurationFiles).<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"true","name":"JNIExportSymbols","description":"<pre>Export Invocation API symbols.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"JNIVerboseLookupErrors","description":"<pre>Report information about known JNI elements when lookup fails.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"JNI","description":"<pre>Enable Java Native Interface (JNI) support.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"LIRDynMoveProfileMethod","description":"<pre>Enable dynamic move profiling per method.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"LIROptConstantLoadOptimization","description":"<pre>Enable constant load optimization. <\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","name":"LIROptControlFlowOptimizer","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","name":"LIROptEdgeMoveOptimizer","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","name":"LIROptLSRAEliminateSpillMoves","description":"<pre>Enable spill move elimination. <\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","name":"LIROptLSRAOptimizeSpillPosition","description":"<pre>Enable spill position optimization. <\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","name":"LIROptLSStackSlotAllocator","description":"<pre>Use linear scan stack slot allocation. <\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","name":"LIROptNullCheckOptimizer","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","name":"LIROptRedundantMoveElimination","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","name":"LIROptStackMoveOptimizer","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"LIROptimization","description":"<pre>Enable LIR level optimiztations.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"LIRProfileMethods","description":"<pre>Enables profiling of methods.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"LIRProfileMoves","description":"<pre>Enables profiling of move types on LIR level. Move types are for example stores (register to stack), constant loads \n(constant to register) or copies (register to register).<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"1000","name":"LLVMMaxFunctionsPerBatch","description":"<pre>Maximum size of batches used for LLVM compilation. 0 means a single batch, 1 means all functions separately. <\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"false","name":"LSRAOptSplitOnly","description":"<pre>LSRA optimization: Only split but do not reassign.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"LSRAOptimization","description":"<pre>Enable LSRA optimization.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"0","name":"LargeArrayThreshold","description":"<pre>The size at or above which an array will be allocated in its own unaligned chunk. 0 implies (AlignedHeapChunkSize / 8). <\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"5.0","name":"LimitInlinedInvokes","availability":"Runtime","type":"double"},
{"prefix":"-XX:","defaultValue":"false","name":"LimitObjectArrayLength","description":"<pre>Enable a limit for the number of objects recorded for each type of a type state before disabling heap sensitivity for \nthat type. The analysis must be heap sensitive.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"LinkerRPath","description":"<pre>Path passed to the linker as the -rpath (list of comma-separated directories).<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"ListMetrics","description":"<pre>Lists on the console at VM shutdown the metric names available to the Timers, Counters and MemUseTrackers options. Note \nthat this only lists the metrics that were initialized during the VM execution and so will not include metrics for\ncompiler code that is not executed.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"LoadExceptionObjectInVM","description":"<pre>Use a VM runtime call to load and clear the exception object from the thread at the start of a compiled exception \nhandler.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"LogFile","description":"<pre>File to which logging is sent. A %p in the name will be replaced with a string identifying the process, usually the \nprocess id and %t will be replaced by System.currentTimeMillis(). If the current runtime is in an isolate, then %i will\nbe replaced by '<isolate id>' otherwise %i is removed. An %I is the same as %i except that the replacement is '<isolate\nid>@<isolate address>'. Using %o as filename sends logging to System.out whereas %e sends logging to System.err.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"LogVerbose","description":"<pre>Enable more verbose log output when available.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"Log","description":"<pre>Pattern for specifying scopes in which logging is enabled. See the Dump option for the pattern syntax.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"16","name":"LoopHeaderAlignment","description":"<pre>Alignment in bytes for loop header blocks. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"3","name":"LoopMaxUnswitch","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"true","name":"LoopPeeling","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"LoopPredicationMainPath","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"LoopPredication","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"10.0","name":"LoopUnswitchFrequencyBoost","availability":"Runtime","type":"double"},
{"prefix":"-XX:","defaultValue":"500","name":"LoopUnswitchMaxIncrease","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"10","name":"LoopUnswitchTrivial","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"true","name":"LoopUnswitch","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"MatchExpressions","description":"<pre>Allow backend to match complex expressions.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"0","name":"MaxCallingContextDepth","description":"<pre>The maximum length of the methods context chains. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"0","name":"MaxCallingContextWidth","description":"<pre>The maximum number of contexts to record for a method. It only affects the analysis when the max and min calling context \ndepth are different.<\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"2","name":"MaxCompilationProblemsPerAction","description":"<pre>The maximum number of compilation failures to handle with the action specified by CompilationFailureAction before \nchanging to a less verbose action. This does not apply to the ExitVM action.<\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"100","name":"MaxConstantObjectsPerType","description":"<pre>The maximum number of constant objects recorded for each type before merging the constants into one unique constant \nobject per type. The analysis must be heap sensitive. It has a minimum value of 1.<\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"0","name":"MaxDirectMemorySize","description":"<pre>Maximum total size of NIO direct-buffer allocations. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"2.0","name":"MaxDuplicationFactor","description":"<pre>How much duplication can happen because of irreducible loops before bailing out. <\/pre>","availability":"Runtime","type":"double"},
{"prefix":"-XX:","defaultValue":"0","name":"MaxHeapContextDepth","description":"<pre>The maximum length of the context used to model a heap object in addition to the allocation site; used only when \nContextSensitiveHeap is enabled.<\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"0","name":"MaxHeapContextWidth","description":"<pre>The maximum number of contexts to record for a heap object. It only affects the analysis when the max and min calling \ncontext depth are different.<\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"0","name":"MaxHeapSize","description":"<pre>The maximum heap size at run-time, in bytes. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"1","name":"MaxInvokesInTrivialMethod","description":"<pre>Maximum number of invokes in a method so that it is considered trivial (for testing only). <\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"1024","name":"MaxJavaStackTraceDepth","description":"<pre>The maximum number of lines in the stack trace for Java exceptions (0 means all). <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"0","name":"MaxNewSize","description":"<pre>The maximum size of the young generation at run-time, in bytes. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"40","name":"MaxNodesInTrivialLeafMethod","description":"<pre>Maximum number of nodes in a method so that it is considered trivial, if it does not have any invokes. <\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"20","name":"MaxNodesInTrivialMethod","description":"<pre>Maximum number of nodes in a method so that it is considered trivial. <\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"100","name":"MaxObjectSetSize","description":"<pre>The maximum number of objects recorded for each type of a type state before disabling heap sensitivity for that type. \nThe analysis must be heap sensitive. It has a minimum value of 1.<\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"-1","name":"MaxReachableTypes","description":"<pre>Maximum number of types allowed in the image. Used for tests where small number of types is necessary. <\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"None","name":"MaxRuntimeCompileMethods","description":"<pre>Maximum number of methods allowed for runtime compilation.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"0","name":"MaxSurvivorSpaces","description":"<pre>Maximum number of survivor spaces. <\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"50","name":"MaxTemplatesPerSnippet","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"8","name":"MaxUnrolledObjectZeroingStores","description":"<pre>Define the maximum number of stores for which the loop that zeroes out objects is unrolled. <\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"20000","name":"MaximumDesiredSize","description":"<pre>Maximum desired size of the compiler graph in nodes. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"128","name":"MaximumEscapeAnalysisArrayLength","description":"<pre>The maximum length of an array that will be escape analyzed. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"80","name":"MaximumHeapSizePercent","description":"<pre>The maximum heap size as percent of physical memory. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"300","name":"MaximumInliningSize","description":"<pre>Inlining is explored up to this number of nodes in the graph for each call site. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"10000","name":"MaximumLoopExplosionCount","description":"<pre>Max number of loop explosions per method. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"5","name":"MaximumRecursiveInlining","description":"<pre>Maximum level of recursive inlining. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"10","name":"MaximumYoungGenerationSizePercent","description":"<pre>The maximum size of the young generation as a percentage of the maximum heap size. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"0.33","name":"MegamorphicInliningMinMethodProbability","description":"<pre>\nMinimum probability for methods to be inlined for megamorphic type profiles.<\/pre>","availability":"Runtime","type":"double"},
{"prefix":"-XX:","defaultValue":"None","name":"MemUseTrackers","description":"<pre>Comma separated names of memory usage trackers that are enabled irrespective of the value for TrackMemUse option. An \nempty value enables all memory usage trackers unconditionally.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"MethodFilterRootOnly","description":"<pre>Only check MethodFilter against the root method in the context if true, otherwise check all methods.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"None [Extra help available]","name":"MethodFilter","description":"<pre>Pattern for matching methods. The syntax for a pattern is:.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"5000","name":"MethodInlineBailoutLimit","description":"<pre>Per-compilation method inlining exploration limit before giving up (use 0 to disable). <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"\"main\"","name":"Method","description":"<pre>Name of the main entry point method. Optional if --shared is used. <\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None [Extra help available]","name":"MetricsFile","description":"<pre>File to which metrics are dumped per compilation.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"0","name":"MinCallingContextDepth","description":"<pre>The minimum length of the methods context chains. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"0","name":"MinHeapContextDepth","description":"<pre>The minimum length of the context used to model a heap object in addition to the allocation site; used only when \nContextSensitiveHeap is enabled.<\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"0","name":"MinHeapSize","description":"<pre>The minimum heap size at run-time, in bytes. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"2048","name":"MinimalBulkZeroingSize","description":"<pre>If applicable, use bulk zeroing instructions when the zeroing size in bytes exceeds this threshold. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"0.35","name":"MinimumPeelFrequency","availability":"Runtime","type":"double"},
{"prefix":"-XX:","defaultValue":"true","name":"MultiThreaded","description":"<pre>Enable support for threads and and thread-local variables (disable for single-threaded implementation).<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"MustNotSynchronizeWarningsAreFatal","description":"<pre>Warnings for @MustNotSynchronize annotations are fatal.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"0","name":"NDCV","description":"<pre>Run level for NoDeadCodeVerifyHandler (0 = off, 1 = info, 2 = verbose, 3 = fatal). <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"\"\"","name":"Name","description":"<pre>Name of the output file to be generated. <\/pre>","availability":"Hosted","type":""},
{"prefix":"-XX:","defaultValue":"false","name":"NativeArchitecture","description":"<pre>Overrides CPUFeatures and uses the native architecture, i.e., the architecture of a machine that builds an image. \nNativeArchitecture takes precedence over CPUFeatures.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"NativeLinkerOption","description":"<pre>Pass the provided raw option that will be appended to the linker command to produce the final binary. The possible \noptions are platform specific and passed through without any validation.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None [Extra help available]","name":"NeverInline","description":"<pre>Pattern for disabling inlining of methods during image generation.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"NewCAPCache","description":"<pre>Create a C Annotation Processor Cache. Will erase any previous cache at that same location.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"NodeCounters","description":"<pre>Counts the number of instances of each node class.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"20","name":"NonFatalIdenticalCompilationSnapshots","description":"<pre>Number of contiguous identical compiler thread stack traces allowed before the VM exits on the basis of a stuck \ncompilation.<\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"-1","name":"NumberOfAnalysisThreads","description":"<pre>The number of threads to use for analysis during native image generation. The number must be smaller than the \nNumberOfThreads.<\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"8","name":"NumberOfThreads","description":"<pre>The maximum number of threads to use concurrently during native image generation. <\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"None","name":"ObjdumpExecutables","description":"<pre>Comma separated list of candidate GNU objdump executables. If not specified, disassembling via GNU objdump is disabled. \nOtherwise, the first existing executable in the list is used.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"OmitHotExceptionStacktrace","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"OptAssumptions","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"OptConvertDeoptsToGuards","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"OptDeoptimizationGrouping","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"OptDevirtualizeInvokesOptimistically","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"OptEarlyReadElimination","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"OptEliminateGuards","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"OptFloatingReads","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"OptImplicitNullChecks","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"OptReadElimination","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"OptScheduleOutOfLoops","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"2","name":"Optimize","description":"<pre>Control native-image code optimizations: 0 - no optimizations, 1 - basic optimizations, 2 - aggressive optimizations. <\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"0","name":"PageSize","description":"<pre>Define PageSize of a machine that runs the image. The default = 0 (== same as host machine page size). <\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"true","name":"ParseRuntimeOptions","description":"<pre>Parse and consume standard options and system properties from the command line arguments when the VM is created.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"PartialEscapeAnalysis","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"PartialUnroll","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"Path","description":"<pre>Directory of the image file to be generated.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"PeelALot","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"50","name":"PercentTimeInIncrementalCollection","description":"<pre>Percentage of total collection time that should be spent on young generation collections. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"true","name":"PreferContainerQuotaForCPUCount","description":"<pre>Calculate the container CPU availability based on the value of quotas (if set), when true. Otherwise, use the CPU shares \nvalue, provided it is less than quota.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PreserveFramePointer","description":"<pre>Saves stack base pointer on the stack on method entry.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintAOTCompilation","description":"<pre>Print logging information during compilation.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintAnalysisCallTree","description":"<pre>Print analysis call tree, a breadth-first tree reduction of the call graph.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintAnalysisStatistics","description":"<pre>Print analysis results statistics.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintBackendCFG","description":"<pre>Enable dumping LIR, register allocation and code generation info to the C1Visualizer.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintBlockMapping","description":"<pre>Enable dumping CFG built during initial BciBlockMapping.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintCFG","description":"<pre>Enable dumping to the C1Visualizer. Enabling this option implies PrintBackendCFG.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"0","name":"PrintCanonicalGraphStringFlavor","description":"<pre>Choose format used when dumping canonical text for graphs: 0 gives a scheduled graph (better for spotting changes \ninvolving the schedule) while 1 gives a CFG containing expressions rooted at fixed nodes (better for spotting small\nstructure differences).<\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintCanonicalGraphStrings","description":"<pre>Enable dumping canonical text from for graphs.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintClassInitialization","description":"<pre>Prints class initialization info for all classes detected by analysis.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintCompilation","description":"<pre>Print an informational line to the console for each completed compilation.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"PrintDetailedAllocationProfiling","description":"<pre>Print detailed information for each allocation site.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintFeatures","description":"<pre>Print features-specific information.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"PrintFlagsWithExtraHelp","description":"<pre>Print extra help, if available, based on comma-separated option names. Pass * to show all options that contain extra \nhelp.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"PrintFlags","description":"<pre>Show available options based on comma-separated option-types (allowed categories: User, Expert, Debug).<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintGCSummary","description":"<pre>Print summary GC information after application main method returns.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintGCTimeStamps","description":"<pre>Print a time stamp at each collection, if +PrintGC or +VerboseGC.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintGCTimes","description":"<pre>Print the time for each of the phases of each collection, if +VerboseGC.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintGC","description":"<pre>Print summary GC information after each collection.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"PrintGraphFile","description":"<pre>Setting to true sets PrintGraph=file, setting to false sets PrintGraph=network.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"\"127.0.0.1\"","name":"PrintGraphHost","description":"<pre>Host part of the address to which graphs are dumped. <\/pre>","availability":"Runtime","type":"double"},
{"prefix":"-XX:","defaultValue":"4445","name":"PrintGraphPort","description":"<pre>Port part of the address to which graphs are dumped in binary format. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintGraphWithSchedule","description":"<pre>Schedule graphs as they are dumped.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"File","name":"PrintGraph","description":"<pre>Where IdealGraphVisualizer graph dumps triggered by Dump or DumpOnError should be written. [Extra help available] <\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintHeapHistogram","description":"<pre>Print class statistics of native image heap.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintHeapShape","description":"<pre>Print the shape of the heap before and after each collection, if +VerboseGC.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintIRWithLIR","description":"<pre>Print HIR along side LIR as the latter is generated.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintImageElementSizes","description":"<pre>Print the sizes of the elements of the built image.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintImageHeapPartitionSizes","description":"<pre>Print the sizes of the native image heap as the image is built.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintImageObjectTree","description":"<pre>Print boot image object hierarchy.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintJNIMethods","description":"<pre>Print JNI methods added to generated image.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintLIRWithAssembly","description":"<pre>Include the LIR as comments with the final assembly.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintMethodHistogram","description":"<pre>Print statistics of methods in native image heap.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"PrintMustNotSynchronizePath","description":"<pre>Print path for @MustNotSynchronize warnings.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"PrintMustNotSynchronizeWarnings","description":"<pre>Print warnings for @MustNotSynchronize annotations.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintPointsToStatistics","description":"<pre>Report analysis statistics.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintProfilingInformation","description":"<pre>Print profiling information when parsing a method's bytecode.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"PrintRestrictHeapAccessPath","description":"<pre>Print path for @RestrictHeapAccess warnings.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"PrintRestrictHeapAccessWarnings","description":"<pre>Print warnings for @RestrictHeapAccess annotations.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintRuntimeCompileMethods","description":"<pre>Print call tree of methods available for runtime compilation.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintStaticTruffleBoundaries","description":"<pre>Print truffle boundaries found during the analysis.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintSynchronizedAnalysis","description":"<pre>Print types used for Java synchronization.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintUninterruptibleCalleeDOTGraph","description":"<pre>Print (to stderr) a DOT graph of the @Uninterruptible annotations.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintUniverse","description":"<pre>Print information about classes, methods, and fields that are present in the native image.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"ProbabilisticProfiling","description":"<pre>Control probabilistic profiling on AMD64.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"AllocatingMethod","name":"ProfileAllocationsContext","description":"<pre>\nControl the naming and granularity of the counters when using ProfileAllocations. [Extra help available]<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"ProfileAllocations","description":"<pre>Enable profiling of allocation sites.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"ProfileAnalysisOperations","description":"<pre>Track the progress of the static analysis.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"ProfileBackedges","description":"<pre>Emit profiling of backedges.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"ProfileCompiledMethods","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"ProfileConstantObjects","description":"<pre>Track the creation of constant objects.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"ProfileDeoptimization","description":"<pre>Print logging information during object file writing.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"ProfileInvokes","description":"<pre>Emit profiling of invokes.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"ProfileMonitors","description":"<pre>Enable profiling of monitor operations.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"ProfileSimpleMethods","description":"<pre>Profile simple methods.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"\"\"","name":"QueryCodeDir","description":"<pre>Directory where query code for target platform should be output. <\/pre>","availability":"Hosted","type":""},
{"prefix":"-XX:","defaultValue":"true","name":"RawConditionalElimination","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"5","name":"ReadEliminationMaxLoopVisits","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"true","name":"ReassociateExpressions","description":"<pre>Re-associate loop invariants and constants.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"ReduceDCE","description":"<pre>Disable optional dead code eliminations.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"None [Extra help available]","name":"ReflectionConfigurationFiles","description":"<pre>One or several (comma-separated) paths to JSON files that specify which program elements should be made available via \nreflection.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"ReflectionConfigurationResources","description":"<pre>Resources describing program elements to be made available for reflection (see ReflectionConfigurationFiles).<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"ReflectionPluginTracing","description":"<pre>Enable trace logging for reflection plugins.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"RegisterPressure","description":"<pre>Comma separated list of registers that register allocation is limited to.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"true","name":"RelaxTypeFlowStateConstraints","description":"<pre>Allow a type flow state to contain types not compatible with its declared type.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"RemoveNeverExecutedCode","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"RemoveSaturatedTypeFlows","description":"<pre>Enable the type flow saturation analysis performance optimization.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"RemoveUnusedSymbols","description":"<pre>Use linker option to prevent unreferenced symbols in image.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"ReplaceInputsWithConstantsBasedOnStamps","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"ReportAnalysisForbiddenType","description":"<pre>Report error if <typename>[:<UsageKind>{,<UsageKind>}] is discovered during analysis (valid values for UsageKind: \nInHeap, Allocated, Reachable).<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"ReportExceptionStackTraces","description":"<pre>Show exception stack traces for exceptions during image building.).<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"ReportUnsafeOffsetWarnings","description":"<pre>Print unsafe operation offset warnings.).<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"ReportUnsupportedElementsAtRuntime","description":"<pre>Report usage of unsupported methods and fields at run time when they are accessed the first time, instead of as an error \nduring image building.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"ResourceConfigurationFiles","description":"<pre>Files describing Java resources to be included in the image.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"ResourceConfigurationResources","description":"<pre>Resources describing Java resources to be included in the image.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"ReturnAfterAnalysis","description":"<pre>Return after analysis.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"ReturnSpecialRegs","description":"<pre>Return special registers from functions in LLVM bitcode. This may decrease performance if the target doesn't support \nreturning multiple values from a function.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"RuntimeAssertions","description":"<pre>Enable or disable Java assert statements at run time.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"RuntimeSystemAssertions","description":"<pre>Enable or disable Java system assertions at run time.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"0","name":"SafepointPromptnessFailureNanos","description":"<pre>Exit the VM if I can not come to a safepoint in this many nanoseconds. 0 implies forever. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"0","name":"SafepointPromptnessWarningNanos","description":"<pre>Print a warning if I can not come to a safepoint in this many nanoseconds. 0 implies forever. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"true","name":"ScanObjectsParallel","description":"<pre>Object scanning in parallel.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"None \n[Extra help available]","name":"SerializationConfigurationFiles","description":"<pre>One or several (comma-separated) paths to JSON files that specify lists of serialization configurations.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"SerializationConfigurationResources","description":"<pre>Resources describing program elements to be made available for serialization (see SerializationConfigurationFiles).<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None \n[Extra help available]","name":"SerializationDenyConfigurationFiles","description":"<pre>One or several (comma-separated) paths to JSON files that specify lists of serialization configurations.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"SerializationDenyConfigurationResources","description":"<pre>Resources describing program elements that must not be made available for serialization.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"ServiceLoaderFeatureExcludeServiceProviders","description":"<pre>Comma-separated list of service providers that should be excluded.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"ServiceLoaderFeatureExcludeServices","description":"<pre>Comma-separated list of services that should be excluded.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"SharedLibrary","description":"<pre>Build shared library.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"none","name":"ShowConfiguration","description":"<pre>Writes to the VM log information about the compiler configuration selected. <\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"ShowDumpFiles","description":"<pre>Print the name of each dump file path as it's created.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"ShowSubstitutionSourceInfo","description":"<pre>Controls whether the source position information of snippets and method substitutions are exposed to HotSpot. Can be \nuseful when profiling to get more precise position information.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"SimpleFastInflatedLocking","description":"<pre>Handle simple cases for inflated monitors in the fast-path.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"1","name":"SimpleMethodCalls","description":"<pre>Maximum number of calls in a simple method. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"256","name":"SimpleMethodGraphSize","description":"<pre>Maximum number of nodes in a graph for a simple method. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"0","name":"SimpleMethodIndirectCalls","description":"<pre>Maximum number of indirect calls in a simple moethod. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"330","name":"SmallCompiledLowLevelGraphSize","description":"<pre>If the previous low-level graph size of the method exceeds the threshold, it is not inlined. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"false","name":"SnippetCounters","description":"<pre>Enable counters for various paths in snippets.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"1000","name":"SoftRefLRUPolicyMSPerMB","description":"<pre>Soft references: this number of milliseconds multiplied by the free heap memory in MByte is the time span for which a \nsoft reference will keep its referent alive after its last access.<\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","name":"SpawnIsolates","description":"<pre>Support multiple isolates. <\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"SpectrePHTBarriers","description":"<pre>Select a strategy to mitigate speculative bounds check bypass (aka Spectre-PHT or Spectre V1). [Extra help available] <\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"SpectrePHTIndexMasking","description":"<pre>Mask indices to scope access to allocation size after bounds check.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"8192","name":"StackRedZoneSize","description":"<pre>Size (in bytes) of the red zone reserved at the end of the stack. This stack space can only be used by critical VM code \nand C code, e.g., to report fatal errors.<\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"0","name":"StackSize","description":"<pre>The size of each thread stack at run-time, in bytes. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"true","name":"StackTrace","description":"<pre>Provide method names for stack traces.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"32768","name":"StackYellowZoneSize","description":"<pre>Size (in bytes) of the yellow zone reserved at the end of the stack. This stack space is reserved for VM use and cannot \nbe used by the application.<\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"false","name":"StaticExecutableWithDynamicLibC","description":"<pre>Builds a statically linked executable with libc dynamically linked.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"StaticExecutable","description":"<pre>Build statically linked executable (requires static libc and zlib).<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"StressExplicitExceptionCode","description":"<pre>Stress the code emitting explicit exception throwing code.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"StressInvokeWithExceptionNode","description":"<pre>Stress the code emitting invokes with explicit exception edges.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"StressTestEarlyReads","description":"<pre>Stress the code by emitting reads at earliest instead of latest point.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"StrictQueryCodeCompilation","description":"<pre>Use strict checks when performing query code compilation.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"4096","name":"StringIndexOfLimit","description":"<pre>String.indexOf invocations will be evaluated at compile time if the receiver is a constant and its length is lower than \nthis value.<\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"None","name":"SubstitutionFiles","description":"<pre>Comma-separated list of file names with declarative substitutions.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"SubstitutionResources","description":"<pre>Comma-separated list of resource file names with declarative substitutions.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"SupportCompileInIsolates","description":"<pre>Support runtime compilation in separate isolates (enable at runtime with option CompileInIsolates). <\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"SupportJsrBytecodes","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"SupportOSRWithLocks","description":"<pre>Support OSR compilations with locks. If DeoptAfterOSR is true we can per definition not have unbalanced enter/exits \nmappings. If DeoptAfterOSR is false insert artificial monitor enters after the OSRStart to have balanced enter/exits in\nthe graph.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"SupportRecurringCallback","description":"<pre>Support a per-thread timer that is called at a specific interval.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"SuppressStderr","description":"<pre>Suppress console error output for unittests.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"SuppressStdout","description":"<pre>Suppress console normal output for unittests.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"\"\"","name":"TargetPlatform","description":"<pre>Selects native-image compilation target (in <OS>-<architecture> format). Defaults to host's OS-architecture pair. <\/pre>","availability":"Hosted","type":""},
{"prefix":"-XX:","defaultValue":"0","name":"TearDownFailureNanos","description":"<pre>The number of nanoseconds before tearing down an isolate gives a failure message. 0 implies no message. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"0","name":"TearDownWarningNanos","description":"<pre>The number of nanoseconds before and between which tearing down an isolate gives a warning message. 0 implies no \nwarning.<\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"\"\"","name":"TempDirectory","description":"<pre>Directory for temporary files generated during native image generation. If this option is specified, the temporary files \nare not deleted so that you can inspect them after native image generation.<\/pre>","availability":"Hosted","type":""},
{"prefix":"-XX:","defaultValue":"\"\"","name":"TestFile","availability":"Hosted","type":""},
{"prefix":"-XX:","defaultValue":"true","name":"ThrowUnsafeOffsetErrors","description":"<pre>Throw unsafe operation offset errors.).<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"16","name":"TierABackedgeNotifyFreqLog","description":"<pre>Backedge notification frequency. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"12","name":"TierABackedgeProfileProbabilityLog","description":"<pre>Backedge profile probability. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"-1","name":"TierAInvokeInlineeNotifyFreqLog","description":"<pre>Inlinee invocation notification frequency (-1 means count, but do not notify). <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"13","name":"TierAInvokeNotifyFreqLog","description":"<pre>Invocation notification frequency. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"8","name":"TierAInvokeProfileProbabilityLog","description":"<pre>Invocation profile probability. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"false","name":"TieredAOT","description":"<pre>Do profiling and callbacks to tiered runtime.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"Time","description":"<pre>Pattern for specifying scopes in which timing is enabled. See the Dump option for the pattern syntax. An empty value \nenables all timers unconditionally.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"-1","name":"TimedDynamicCounters","description":"<pre>Turn on the benchmark counters, and displays the results every n milliseconds. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"None","name":"Timers","description":"<pre>Comma separated names of timers that are enabled irrespective of the value for Time option. An empty value enables all \ntimers unconditionally.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"0","name":"TraceBytecodeParserLevel","description":"<pre>The trace level for the bytecode parser. A value of 1 enables instruction tracing and any greater value emits a frame \nstate trace just prior to each instruction trace.Instruction tracing output from multiple compiler threads will be\ninterleaved so use of this option make most sense for single threaded compilation. The MethodFilter option can be used\nto refine tracing to selected methods.<\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"\"\"","name":"TraceClassInitialization","description":"<pre>Comma-separated list of fully-qualified class names that class initialization is traced for. <\/pre>","availability":"Hosted","type":""},
{"prefix":"-XX:","defaultValue":"false","name":"TraceCodeCache","description":"<pre>Print logging information for runtime code cache modifications.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceDeoptimizationDetails","description":"<pre>Print verbose logging information for every deoptimization.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceDeoptimization","description":"<pre>Print logging information for every deoptimization.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceEscapeAnalysis","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceExceptionHandlerStub","description":"<pre>Trace execution of stub used to handle an exception thrown by a callee.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceHeapChunks","description":"<pre>Trace heap chunks during collections, if +VerboseGC and +PrintHeapShape.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceHeapVerification","description":"<pre>Trace heap verification.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceInlineDuringParsing","description":"<pre>Traces inlining performed during bytecode parsing.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceInliningForStubsAndSnippets","description":"<pre>Enable inlining decision tracing in stubs and snippets.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceInlining","description":"<pre>Enable tracing of inlining decisions.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"0","name":"TraceLIRGeneratorLevel","description":"<pre>The trace level for the LIR generator. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceLoggingFeature","description":"<pre>When enabled, logging feature details are printed.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"TraceMonitorsMethodFilter","description":"<pre>Trace monitor operations in methods whose fully qualified name contains this substring.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"None","name":"TraceMonitorsTypeFilter","description":"<pre>Trace monitor operations on objects whose type contains this substring.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceNativeToolUsage","description":"<pre>Trace all native tool invocations as part of image building.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"\"\"","name":"TraceObjectInstantiation","description":"<pre>Comma-separated list of fully-qualified class names that object instantiation is traced for. <\/pre>","availability":"Hosted","type":""},
{"prefix":"-XX:","defaultValue":"false","name":"TraceObjectPromotion","description":"<pre>Trace each object promotion (generates significant amounts of output).<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceParserPlugins","description":"<pre>Traces use of plugins during bytecode parsing.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceSecurityServices","description":"<pre>Enable trace logging for the security services feature.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceServiceLoaderFeature","description":"<pre>When enabled, each service loader resource and class will be printed out to standard output.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceStackVerification","description":"<pre>Trace stack verification.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceUnwindStub","description":"<pre>Trace execution of the stub that routes an exception to a handler in the calling frame.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceVMOperations","description":"<pre>Trace VMOperation execution.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"TrackAccessChain","description":"<pre>Track the callers for methods and accessing methods for fields.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"TrackInputFlows","description":"<pre>Track the input for type flows.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"TrackMemUse","description":"<pre>Pattern for specifying scopes in which memory use tracking is enabled. See the Dump option for the pattern syntax. An \nempty value enables all memory use trackers unconditionally.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"TrackNodeInsertion","description":"<pre>Track source stack trace where a node was inserted into the graph.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"TrackNodeSourcePosition","description":"<pre>Track the NodeSourcePosition.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"TreatRuntimeCodeInfoReferencesAsWeak","description":"<pre>Determines if references from runtime-compiled code to Java heap objects should be treated as strong or weak.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"10","name":"TrivialInliningSize","description":"<pre>Graphs with less than this number of nodes are trivial and therefore always inlined. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"false","name":"TruffleCheckBlackListedMethods","description":"<pre>Fail if a method known as not suitable for partial evaluation is reachable for runtime compilation.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"TruffleCheckFrameImplementation","description":"<pre>Enforce that the Truffle runtime provides the only implementation of Frame.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"TruffleCheckNeverPartOfCompilation","description":"<pre>Check that CompilerAsserts.neverPartOfCompilation is not reachable for runtime compilation.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"TruffleCompilerConfiguration","description":"<pre>Select a compiler configuration for Truffle compilation (default: use Graal system compiler configuration).<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"true","name":"TruffleInlineDuringParsing","description":"<pre>Inline trivial methods in Truffle graphs during native image generation.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"TruffleMultiThreaded","description":"<pre>Enable support for Truffle background compilation.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"TrufflePropagateCompilationErrors","description":"<pre>Propagate Truffle compilation errors.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"TrustFinalDefaultFields","description":"<pre>Determines whether to treat final fields with default values as constant.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"2","name":"TypeCheckMaxHints","description":"<pre>The maximum number of profiled types that will be used when compiling a profiled type check. Note that \nTypeCheckMinProfileHitProbability also influences whether profiling info is used in compiled type checks.<\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"0.5","name":"TypeCheckMinProfileHitProbability","description":"<pre>If the probability that a type check will hit one the profiled types (up to TypeCheckMaxHints) is below this value, the \ntype check will be compiled without profiling info.<\/pre>","availability":"Runtime","type":"double"},
{"prefix":"-XX:","defaultValue":"20","name":"TypeFlowSaturationCutoff","description":"<pre>The maximum number of types recorded in a type flow. -1 indicates no limitation. <\/pre>","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"true","name":"UnresolvedIsError","description":"<pre>Report unresolved elements as errors.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"16","name":"UnrollMaxIterations","availability":"Runtime","type":"int"},
{"prefix":"-XX:","defaultValue":"1","name":"UnsafeAutomaticSubstitutionsLogLevel","description":"<pre>Unsafe automatic substitutions logging level: Disabled=0, Basic=1, Info=2, Debug=3.). <\/pre>","availability":"Hosted","type":"int"},
{"prefix":"-XX:","defaultValue":"false","name":"UnsafeOffsetWarningsAreFatal","description":"<pre>Print unsafe operation offset warnings.).<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"UseBranchesWithin32ByteBoundary","description":"<pre>Force branch instructions to align with 32-bytes boundary, to mitigate the jcc erratum. See \nhttps://www.intel.com/content/dam/support/us/en/documents/processors/mitigations-jump-conditional-code-erratum.pdf for\nmore details. If not set explicitly, the default value will be determined according to the CPU model.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"UseCAPCache","description":"<pre>Indicate the C Annotation Processor to use previously cached native information when generating C Type information.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"UseCalleeSavedRegisters","description":"<pre>Use callee saved registers to reduce spilling for low-frequency calls to stubs (if callee saved registers are supported \nby the architecture).<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"UseCardRememberedSetHeap","description":"<pre>Use a card remembered set heap for GC.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"UseCompilationStatistics","description":"<pre>Enables CompilationStatistics.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"UseContainerSupport","description":"<pre>Enable detection and runtime container configuration support.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"UseDedicatedVMOperationThread","description":"<pre>Determines if VM operations should be executed in a dedicated thread.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"UseEncodedGraphs","description":"<pre>Encode and decode snippets and substitutions before parsing to test libgraal code path. This option is ignored in the \ncontext of libgraal.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"UseExceptionProbability","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"UseGraalStubs","description":"<pre>Use Graal-generated stubs for complicated LIR operations instead of embedding all the emitted code.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"UseLibC","description":"<pre>Selects the libc implementation to use. Available implementations: glibc, musl, bionic.<\/pre>","availability":"Hosted","type":"String"},
{"prefix":"-XX:","defaultValue":"true","name":"UseLoopLimitChecks","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"UseReferenceHandlerThread","description":"<pre>Populate reference queues in a separate thread rather than after a garbage collection.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"UseServiceLoaderFeature","description":"<pre>Automatically register services for run-time lookup using ServiceLoader.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"UseSnippetGraphCache","description":"<pre>Use a cache for snippet graphs.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"UseSnippetTemplateCache","description":"<pre>Use a LRU cache for snippet templates.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"UseTrappingNullChecks","description":"<pre>Use traps for null checks instead of explicit null-checks.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"UseTypeCheckHints","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"VerboseGC","description":"<pre>Print more information about the heap before and after each collection.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyBalancedMonitors","description":"<pre>Emit extra code to dynamically check monitor operations are balanced.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyDeoptimizationEntryPoints","description":"<pre>Verify that all possible deoptimization entry points have been properly compiled and registered in the metadata.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyDirtyCardsAfterCollection","description":"<pre>Verify dirty cards after each collection.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyDirtyCardsBeforeCollection","description":"<pre>Verify dirty cards before each collection.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyGraalGraphEdges","description":"<pre>Perform expensive verification of graph inputs, usages, successors and predecessors.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"true","name":"VerifyGraalGraphs","description":"<pre>Verify graphs often during compilation when assertions are turned on.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyGraalPhasesSize","description":"<pre>Verify before - after relation of the relative, computed, code size of a graph.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyHeapAfterCollection","description":"<pre>Verify the heap after each collection.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyHeapAtReturn","description":"<pre>Perform platform dependent validation of the Java heap at returns.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyHeapBeforeCollection","description":"<pre>Verify the heap before each collection.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyHeap","description":"<pre>Verify the heap before and after each collection.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyKillCFGUnusedNodes","description":"<pre>Verify that there are no new unused nodes when performing killCFG.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyNamingConventions","description":"<pre>Verify naming conventions during image construction.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyPhases","description":"<pre><\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyStackAfterCollection","description":"<pre>Verify stacks after each collection.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyStackBeforeCollection","description":"<pre>Verify stacks before each collection.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"None","name":"Verify","description":"<pre>Pattern for specifying scopes in which logging is enabled. See the Dump option for the pattern syntax.<\/pre>","availability":"Runtime","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"WriteableCodeCache","description":"<pre>Allocate code cache with write access, allowing inlining of objects.<\/pre>","availability":"Runtime","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"ZapChunks","description":"<pre>Fill unused memory chunks with a sentinel value.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"ZapConsumedHeapChunks","description":"<pre>After use, Fill memory chunks with a sentinel value.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"ZapProducedHeapChunks","description":"<pre>Before use, fill memory chunks with a sentinel value.<\/pre>","availability":"Hosted","type":"bool"},
{"prefix":"-XX:","defaultValue":"false","name":"ZapStackOnMethodEntry","description":"<pre>Default: - (disabled). <\/pre>","availability":"Runtime","type":"bool"}
] }