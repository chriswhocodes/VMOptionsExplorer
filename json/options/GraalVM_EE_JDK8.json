{ "switches" : [ {"prefix":"-XX:","defaultValue":"2.5","name":"AOTInliningDepthToSizeRate","type":"Double"},
{"prefix":"-XX:","defaultValue":"300","name":"AOTInliningSizeMaximum","type":"Integer"},
{"prefix":"-XX:","defaultValue":"50","name":"AOTInliningSizeMinimum","type":"Integer"},
{"prefix":"-XX:","defaultValue":"false","name":"AOTVerifyOops","description":"<pre>Generate verify oop checks in AOT code\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"null","name":"ASMInstructionProfiling","description":"<pre>Enables instruction profiling on assembler level. Valid values are a\ncomma separated list of supported instructions. Compare with subclasses\nof Assembler.InstructionCounter.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"AbortOnBenchmarkCounterOverflow","description":"<pre>Abort VM with SIGILL if benchmark counters controlled by the\n(Generic|Timed|Benchmark)DynamicCounters\noption overflow. This feature is only supported on AMD64.\nWARNING: No descriptive error message will be printed! In case of an overflow,\nmanual inspection of the emitted code is required.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"-1","name":"ActiveProcessorCount","description":"<pre>Overwrites the available number of processors provided by the OS. Any\nvalue <= 0 means using the processor count from the OS.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"null","name":"AggregatedMetricsFile","description":"<pre>File to which aggregated metrics are dumped at shutdown. A CSV format\nis used if the file ends with .csv otherwise a more human readable\nformat is used. If not specified, metrics are dumped to the console.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"true","name":"AliasArrayTypeFlows","description":"<pre>Model all array type flows using a unique elements type flow\nabstraction.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"1048576","name":"AllocationProfilingThreshold","description":"<pre>The minimum size in bytes required for printing an allocation profiling\nentry\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"false","name":"AllocationSiteSensitiveHeap","description":"<pre>A context sensitive heap means that each heap allocated object is\nmodeled by using at least the allocation site.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"AlwaysInlineIntrinsics","description":"<pre>Unconditionally inline intrinsics\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"AlwaysInlineVTableStubs","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"AlwaysPreTouch","description":"<pre>Force all freshly committed pages to be pre-touched\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"\"insens\"","name":"AnalysisContextSensitivity","description":"<pre>Controls the static analysis context sensitivity. Available values:\ninsens (context insensitive analysis), allocsens (context insensitive\nanalysis, context insensitive heap, allocation site sensitive heap),\n_1obj (1 object sensitive analysis with a context insensitive heap),\n_2obj1h (2 object sensitive with a 1 context sensitive heap)\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"8","name":"AnalysisSizeCutoff","description":"<pre>The maximum size of type and method profiles returned by the static\nanalysis. -1 indicates no limitation.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"null","name":"AnalysisStatisticsFile","description":"<pre>Analysis results statistics file.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"AuditHandles","description":"<pre>Record stack trace along with scoped foreign object reference wrappers to debug issue with a wrapper being used after its scope has closed.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"120","name":"BaseTargetSpending","description":"<pre>The base target spending used to estimate the inlining threshold; the\nhigher, the likelier it is to inline.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"true","name":"BenchmarkCounterPrintingCutoff","description":"<pre>Use a cutoff to print only most significant counters.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"BenchmarkCountersDumpDynamic","description":"<pre>Dump dynamic counters\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"BenchmarkCountersDumpStatic","description":"<pre>Dump static counters\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"null","name":"BenchmarkCountersFile","description":"<pre>File to which benchmark counters are dumped. A CSV format is used if\nthe file ends with .csv otherwise a more human readable format is used.\nThe fields in the CSV format are: category, group, name, value\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"null","name":"BenchmarkDynamicCounters","description":"<pre>Turn on the benchmark counters. The format of this option is:\n          \n  (err|out),start pattern,end pattern\n  \nStart counting when the start pattern matches on the given stream and stop when the end pattern occurs.\nYou can use \"~\" to match 1 or more digits.\nExamples:\n          \n  err, starting =====, PASSED in\n  out,Iteration ~ (~s) begins:,Iteration ~ (~s) ends:\n  \nThe first pattern matches DaCapo output and the second matches SPECjvm2008 output.\n          \nAs a more detailed example, here are the options to use for getting statistics\nabout allocations within the DaCapo pmd benchmark:\n          \n  -XX:JVMCICounterSize=<value> -XX:-JVMCICountersExcludeCompiler \\\n  -Dgraal.BenchmarkDynamicCounters=\"err, starting ====, PASSED in \" \\\n  -Dgraal.ProfileAllocations=true\n  \nThe JVMCICounterSize value depends on the granularity of the profiling -\n10000 should be sufficient. Omit JVMCICountersExcludeCompiler to exclude\ncounting allocations on the compiler threads.\nThe counters can be further configured by the ProfileAllocationsContext option.\n          \nWe highly recommend the use of -Dgraal.AbortOnBenchmarkCounterOverflow=true to\ndetect counter overflows eagerly.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"512","name":"BlockZeroingLowLimit","description":"<pre>Minimum amount of bytes when block zeroing used. (SPARC only)\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"false","name":"BootstrapInitializeOnly","description":"<pre>Do not compile anything on bootstrap but just initialize the compiler.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"15.0","name":"BootstrapTimeout","description":"<pre>Maximum time in minutes to spend bootstrapping (0 to disable this\nlimit).\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"0.25","name":"BootstrapWatchDogCriticalRateRatio","description":"<pre>Ratio of the maximum compilation rate below which the bootstrap\ncompilation rate must not fall (0 or less disables monitoring).\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"true","name":"BreakChainedPhis","description":"<pre>Break chained phis\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"35000","name":"CallGraphCompilerNodeLimit","description":"<pre>Controls the maximum number of compiler nodes that can appear in the\ncall graph\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"1200","name":"CallGraphSizeLimit","description":"<pre>Controls the maximum size of the call graph before ceasing inlining.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"0.001","name":"CallGraphSizePenaltyCoefficient","description":"<pre>Reduces the likelihood of exploring call graph subtrees that are large.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"true","name":"CanOmitFrame","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"CanonicalGraphStringsCheckConstants","description":"<pre>Exclude virtual nodes when dumping canonical text for graphs.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"CanonicalGraphStringsExcludeVirtuals","description":"<pre>Exclude virtual nodes when dumping canonical text for graphs.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"CanonicalGraphStringsRemoveIdentities","description":"<pre>Attempts to remove object identity hashes when dumping canonical text\nfor graphs.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"ClearMetricsAfterBootstrap","description":"<pre>Clear the debug metrics after bootstrap.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"CollectYoungGenerationSeparately","description":"<pre>Determines if a full GC collects the young generation separately or\ntogether with the old generation.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"CompilationBailoutAsFailure","description":"<pre>Treat compilation bailouts like compilation failures.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"0","name":"CompilationCountLimit","description":"<pre>The number of compilations allowed for any method before the VM exits\n(a value of 0 means there is no limit).\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"null","name":"CompilationExcludePhases","description":"<pre>Exclude certain phases from compilation, either unconditionally or with\na method filter\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"300","name":"CompilationExpirationPeriod","description":"<pre>Time limit in seconds before a compilation expires (0 to disable the\nlimit). The compilation alarm will be implicitly disabled if assertions\nare enabled.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"Silent","name":"CompilationFailureAction","description":"<pre>Specifies the action to take when compilation fails.\n          \nThe accepted values are:\n    Silent  - Print nothing to the console.\n     Print  - Print a stack trace to the console.\n  Diagnose* - Retry the compilation with extra diagnostics.\n    ExitVM  - Same as Diagnose except that the VM process exits after retrying.\n    \n* If \"Diagnose\" is set compilation will be retried with extra diagnostics enabled including dumping (see file:doc-files/DumpHelp.txt). \n  In such a scenario DiagnoseDumpLevel can be used to specify the dump level (DebugContext dump levels) accordingly.\n      \n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"0","name":"CompilationIsolateAddressSpaceSize","description":"<pre>Size of the reserved address space of each compilation isolate (0:\ndefault for new isolates).\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"60.0","name":"CompilationWatchDogStackTraceInterval","description":"<pre>Interval in seconds between a watch dog reporting stack traces for long\nrunning compilations.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"0.0","name":"CompilationWatchDogStartDelay","description":"<pre>Delay in seconds before watch dog monitoring a compilation (0 disables\nmonitoring).\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"true","name":"CompileGraalWithC1Only","description":"<pre>In tiered mode compile Graal and JVMCI using optimized first tier code.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"CompileInIsolates","description":"<pre>Activate runtime compilation in separate isolates (enable support\nduring image build with option SupportCompileInIsolates).\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"CompileInPerThreadReusedIsolates","description":"<pre>Create one reusable isolate per compilation thread as opposed to one\nisolate per compilation (enable through CompileInIsolates).\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"null","name":"CompilerConfiguration","description":"<pre>Names the compiler configuration to use. If omitted, the compiler\nconfiguration with the highest auto-selection priority is used. To see\nthe set of available configurations, supply the value 'help' to this\noption.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"0.006","name":"CompilerNodePenaltyCoefficient","description":"<pre>Controls the likelihood of exploring subtrees that already have a lot\nof code during inlining.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"\"graal\"","name":"Compiler","description":"<pre>Selects the system compiler. This must match the getCompilerName() value returned by a jdk.vm.ci.runtime.JVMCICompilerFactory provider. An empty string or the value \"null\" selects a compiler that will raise an exception upon receiving a compilation request. This property can also be defined by the contents of <java.home>/lib/jvmci/compiler-name.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"0","name":"ConcGCThreads","description":"<pre>Number of threads concurrent gc will use\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"4","name":"ConditionalEliminationMaxIterations","type":"Integer"},
{"prefix":"-XX:","defaultValue":"true","name":"ConditionalElimination","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"ConsiderVectorizableLoops","description":"<pre>Consider the vectorizability of loop during the duplication of a merge\ninside a loop.There are rare cases where duplication can destroy\nvectorization.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"4","name":"CostNewLiveVariable","description":"<pre>PullThroughPhiOptimization: Abstract cost for the creation of a new\nlive value: new values can have a negativeimpact on register\nallocation, therefore we penalize it.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"32.0","name":"CostReductionFactor","description":"<pre>PullThroughPhiOptimization: Cost/Benefit heuristic for EE floating node\nduplication: reduce cost by a constant factor when comparing with\nrelative benefit.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"null","name":"Count","description":"<pre>Pattern for specifying scopes in which counters are enabled. See the\nDump option for the pattern syntax. An empty value enables all counters\nunconditionally.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"null","name":"Counters","description":"<pre>Comma separated names of counters that are enabled irrespective of the\nvalue for Count option. An empty value enables all counters\nunconditionally.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"CrashAtIsFatal","description":"<pre>Converts an exception triggered by the CrashAt option into a fatal\nerror if a non-null pointer was passed in the _fatal option to\nJNI_CreateJavaVM. This option exists for the purpose of testing fatal\nerror handling in libgraal.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"null","name":"CrashAt","description":"<pre>Pattern for method(s) that will trigger an exception when compiled.\nThis option exists to test handling compilation crashes gracefully. See\nthe MethodFilter option for the pattern syntax. A ':Bailout' suffix\nwill raise a bailout exception and a ':PermanentBailout' suffix will\nraise a permanent bailout exception.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"1.0E-5","name":"CutoffCodeSizePenaltyCoefficient","description":"<pre>Controls the likelihood of further exploring subtrees with a lot of\ncode during inlining.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"false","name":"DebugLoopInversion","description":"<pre>Debug the loop inversion transformation.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"DebugPeelingSynonyms","description":"<pre>Debug simulation synonyms during simulation-based loop peeling.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"DebugStubsAndSnippets","description":"<pre>Enable debug output for stub code generation and snippet preparation.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"DeoptALot","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"DeoptAfterOSR","description":"<pre>Deoptimize OSR compiled code when the OSR entry loop is finished if\nthere is no mature profile available for the rest of the method.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"40","name":"DeoptsToDisableOptimisticOptimization","type":"Integer"},
{"prefix":"-XX:","defaultValue":"false","name":"DetailedAsserts","description":"<pre>Enable expensive assertions if normal assertions (i.e. -ea or -esa) are\nenabled.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"3","name":"DiagnoseDumpLevel","description":"<pre>Specify the DumpLevel if CompilationFailureAction#Diagnose is used.See\nCompilationFailureAction for details.\nfile:doc-files/CompilationFailureActionHelp.txt\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"false","name":"DisableExplicitGC","description":"<pre>Ignore calls to System.gc()\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"DisableIntercept","description":"<pre>Disable intercepting exceptions in debug scopes.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"DivertParameterReturningMethod","description":"<pre>Analysis: Detect methods that return one of their parameters and\nhardwire the parameter straight to the return.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"16","name":"DominatorUsageTreeMaxDepth","type":"Integer"},
{"prefix":"-XX:","defaultValue":"false","name":"DumpOnError","description":"<pre>Send compiler IR to dump handlers on error.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"null","name":"DumpOnPhaseChange","description":"<pre>Dump a before and after graph if the named phase changes the\ngraph.%nThe argument is substring matched against the simple name of\nthe phase class\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"\"graal_dumps\"","name":"DumpPath","description":"<pre>The directory where various Graal dump files are written.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"null","name":"Dump","description":"<pre>Filter pattern for specifying scopes in which dumping is enabled.\n          \nA filter is a list of comma-separated terms of the form:\n \n  <pattern>[:<level>]\n \nIf <pattern> contains a \"*\" or \"?\" character, it is interpreted as a glob pattern.\nOtherwise, it is interpreted as a substring. If <pattern> is empty, it\nmatches every scope. If :<level> is omitted, it defaults to 1. The term\n~<pattern> is a shorthand for <pattern>:0 to disable a debug facility for a pattern.\n          \nThe default log level is 0 (disabled). Terms with an empty pattern set\nthe default log level to the specified value. The last\nmatching term with a non-empty pattern selects the level specified. If\nno term matches, the log level is the default level. A filter with no\nterms matches every scope with a log level of 1.\n          \nExamples of debug filters:\n--------- \n  (empty string)\n          \n  Matches any scope with level 1.\n--------- \n  :1\n          \n  Matches any scope with level 1.\n--------- \n  *\n          \n  Matches any scope with level 1.\n--------- \n  CodeGen,CodeInstall\n          \n  Matches scopes containing \"CodeGen\" or \"CodeInstall\", both with level 1.\n--------- \n  CodeGen:2,CodeInstall:1\n          \n  Matches scopes containing \"CodeGen\" with level 2, or \"CodeInstall\" with level 1.\n---------\n  Outer:2,Inner:0}\n          \n  Matches scopes containing \"Outer\" with log level 2, or \"Inner\" with log level 0. If the scope\n  name contains both patterns then the log level will be 0. This is useful for silencing subscopes.\n---------\n  :1,Dead:2\n          \n  Matches scopes containing \"Dead\" with level 2, and all other scopes with level 1.\n--------- \n  Dead:0,:1\n          \n  Matches all scopes with level 1, except those containing \"Dead\".   Note that the location of\n  the :1 doesn't matter since it's specifying the default log level so it's the same as\n  specifying :1,Dead:0.\n--------- \n  Code*\n          \n  Matches scopes starting with \"Code\" with level 1.\n--------- \n  Code,~Dead\n          \n  Matches scopes containing \"Code\" but not \"Dead\", with level 1.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"DumpingErrorsAreFatal","description":"<pre>Treat any exceptions during dumping as fatal.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"DuplicateALot","description":"<pre>Perform Duplications as long as there is any sane improvement.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"DuplicateIrreducibleLoops","description":"<pre>When enabled, some limited amount of duplication will be performed in\norder compile code containing irreducible loops.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"0.5","name":"DuplicationBudgetFactorLate","description":"<pre>Percentage in node cost graph size for the late duplication budget.\nComputed relative to the methods code size.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"0.25","name":"DuplicationBudgetFactor","description":"<pre>Percentage in node cost graph size for the duplication budget. Computed\nrelative to the methods code size.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"64","name":"DuplicationCostReductionFactor","description":"<pre>Cost/Benefit heuristic for EE simulation-based code duplication: reduce\ncost by a constant factor when comparing with relative benefit.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"0.66","name":"DuplicationMinBranchFrequency","description":"<pre>Ignore low frequency branches during duplication.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"true","name":"DynamicCountersPrintGroupSeparator","description":"<pre>Use grouping separators for number printing\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"EagerSnippets","description":"<pre>Eagerly construct extra snippet info.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"EnterpriseCloneReadElimination","description":"<pre>Try to eliminate array clone operations by handling clone operations in\nearly read elimination.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"EnterpriseEarlyReadElimination","description":"<pre>Run more read eliminations early in the compilation pipeline.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"EnterprisePartialUnroll","description":"<pre>Enable EE version of partial loop unrolling that considers more loop\nshapes for unrolling.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"0","name":"ErgoHeapSizeLimit","description":"<pre>Maximum ergonomically set heap size (in bytes); zero means use MaxRAM *\nMaxRAMPercentage / 100\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"2","name":"EscapeAnalysisIterations","type":"Integer"},
{"prefix":"-XX:","defaultValue":"20","name":"EscapeAnalysisLoopCutoff","type":"Integer"},
{"prefix":"-XX:","defaultValue":"null","name":"EscapeAnalyzeOnly","type":"String"},
{"prefix":"-XX:","defaultValue":"800","name":"ExactFullUnrollMaxNodes","type":"Integer"},
{"prefix":"-XX:","defaultValue":"200","name":"ExactPartialUnrollMaxNodes","type":"Integer"},
{"prefix":"-XX:","defaultValue":"null","name":"ExcludeFunctionFromDuplication","description":"<pre>Exclude compilations that MethodFilter.match this string from the\nduplication optimization.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"ExhaustiveHeapScan","description":"<pre>Scan all objects reachable from roots for analysis. By default false.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"ExitVMOnException","description":"<pre>Alias for CompilationFailureAction=ExitVM.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"2.0","name":"ExpandAllProximityBonusInertia","description":"<pre>The inertia at which the expand-all proximity bonus decreases with the\nnumber of yet unexpanded nodes.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"6.0","name":"ExpandAllProximityBonus","description":"<pre>The decrease in call graph expansion pressure when there are few call\nnodes left to explore.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"550","name":"ExpansionInertiaBaseValue","description":"<pre>The slowness at which the expansion pressure grows with code size; the\nhigher it is, the slower the pressure growth.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"14","name":"ExpansionInertiaInvokeBonus","description":"<pre>The extra slowness at which the expansion pressure grows with the code\nsize, for each extra invoke node.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"2000","name":"ExpansionInertiaMax","description":"<pre>The max slowness at which the expansion pressure grows with the code\nsize.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"false","name":"ExplicitGCInvokesConcurrent","description":"<pre>A System.gc() request invokes a concurrent collection\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"ExtendedAsserts","description":"<pre>Enable extended asserts which slow down analysis.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"FailedLoopExplosionIsFatal","description":"<pre>Do not bail out but throw an exception on failed loop explosion.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"\"\"","name":"FallbackExecutorRuntimeJavaArg","description":"<pre>Internal option used to specify runtime java arguments for\nFallbackExecutor.\n<\/pre>","type":"String[]"},
{"prefix":"-XX:","defaultValue":"false","name":"FlightRecorder","description":"<pre>Enable Java Flight Recorder.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"ForceDumpGraphsBeforeCompilation","description":"<pre>Force-dump graphs before compilation\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"ForceUnroll","description":"<pre>Force partial unrolling of loops if at all possible.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"FullUnrollAsPEACleanup","description":"<pre>Perform full unrolling as a Partial Escape Analysis Cleanup\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"15","name":"FullUnrollConstantCompareBoost","type":"Integer"},
{"prefix":"-XX:","defaultValue":"60","name":"FullUnrollMaxApplication","type":"Integer"},
{"prefix":"-XX:","defaultValue":"600","name":"FullUnrollMaxIterations","type":"Integer"},
{"prefix":"-XX:","defaultValue":"400","name":"FullUnrollMaxNodes","type":"Integer"},
{"prefix":"-XX:","defaultValue":"true","name":"FullUnroll","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"10.0","name":"G1ConcMarkStepDurationMillis","description":"<pre>Target duration of individual concurrent marking steps in milliseconds.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"4","name":"G1ConcRSHotCardLimit","description":"<pre>The threshold that defines (>=) a hot card.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"10","name":"G1ConcRSLogCacheSize","description":"<pre>Log base 2 of the length of conc RS hot-card cache.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"0","name":"G1ConcRefinementGreenZone","description":"<pre>The number of update buffers that are left in the queue by the\nconcurrent processing threads. Will be selected ergonomically by\ndefault.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"0","name":"G1ConcRefinementRedZone","description":"<pre>Maximum number of enqueued update buffers before mutator threads start\nprocessing new ones instead of enqueueing them. Will be selected\nergonomically by default.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"300","name":"G1ConcRefinementServiceIntervalMillis","description":"<pre>The last concurrent refinement thread wakes up every specified number\nof milliseconds to do miscellaneous work.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"0","name":"G1ConcRefinementThreads","description":"<pre>The number of parallel rem set update threads. Will be set\nergonomically by default.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"2","name":"G1ConcRefinementThresholdStep","description":"<pre>Each time the rset update queue increases by this amount activate the\nnext refinement thread if available. The actual step size will be\nselected ergonomically by default, with this value used to determine a\nlower bound.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"0","name":"G1ConcRefinementYellowZone","description":"<pre>Number of enqueued update buffers that will trigger concurrent\nprocessing. Will be selected ergonomically by default.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"50","name":"G1ConfidencePercent","description":"<pre>Confidence level for MMU/pause predictions.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"5","name":"G1HeapWastePercent","description":"<pre>Amount of space, expressed as a percentage of the heap size, that G1 is\nwilling not to collect to avoid expensive GCs.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"8","name":"G1MixedGCCountTarget","description":"<pre>The target number of mixed GCs after a marking cycle.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"0","name":"G1PeriodicGCInterval","description":"<pre>Number of milliseconds after a previous GC to wait before triggering a\nperiodic gc. A value of zero disables periodically enforced gc cycles.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"true","name":"G1PeriodicGCInvokesConcurrent","description":"<pre>Determines the kind of periodic GC. Set to true to have G1 perform a\nconcurrent GC as periodic GC, otherwise use a STW Full GC.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"0.0","name":"G1PeriodicGCSystemLoadThreshold","description":"<pre>Maximum recent system wide load as returned by the 1m value of\ngetloadavg() at which G1 triggers a periodic GC. A load above this\nvalue cancels a given periodic GC. A value of zero disables this check.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"0","name":"G1RSetRegionEntries","description":"<pre>Max number of regions for which we keep bitmaps. Will be set\nergonomically by default\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"0","name":"G1RSetSparseRegionEntries","description":"<pre>Max number of entries per region in a sparse table. Will be set\nergonomically by default.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"10","name":"G1RSetUpdatingPauseTimePercent","description":"<pre>A target percentage of time that is allowed to be spend on process RS\nupdate buffers during the collection pause.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"1000","name":"G1RefProcDrainInterval","description":"<pre>The number of discovered reference objects to process before draining\nconcurrent marking work queues.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"10","name":"G1ReservePercent","description":"<pre>It determines the minimum reserve we should have in the heap to\nminimize the probability of promotion failure.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"60","name":"G1SATBBufferEnqueueingThresholdPercent","description":"<pre>Before enqueueing them, each mutator thread tries to do some filtering\non the SATB buffers it generates. If post-filtering the percentage of\nretained entries is over this threshold the buffer will be enqueued for\nprocessing. A value of 0 specifies that mutator threads should not do\nsuch filtering.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"1024","name":"G1SATBBufferSize","description":"<pre>Number of entries in an SATB log buffer.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"256","name":"G1UpdateBufferSize","description":"<pre>Size of an update buffer.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"true","name":"G1UseAdaptiveConcRefinement","description":"<pre>Select green, yellow and red zones adaptively to meet the the pause\nrequirements.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"G1UseAdaptiveIHOP","description":"<pre>Adaptively adjust the initiating heap occupancy from the initial value\nof InitiatingHeapOccupancyPercent. The policy attempts to start marking\nin time based on application behavior.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"G1VerifyBitmaps","description":"<pre>Verifies the consistency of the marking bitmaps\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"G1VerifyHeapRegionCodeRoots","description":"<pre>Verify the code root lists attached to each heap region.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"G1VerifyRSetsDuringFullGC","description":"<pre>If true, perform verification of each heap region's remembered set when\nverifying the heap during a full GC.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"-1","name":"GCDebugStartCycle","description":"<pre>Start tracing compiled GC barriers after N garbage collections\n(disabled if N <= 0).\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"64","name":"GCDrainStackTargetSize","description":"<pre>Number of entries we will try to leave on the stack during parallel gc\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"201","name":"GCPauseIntervalMillis","description":"<pre>Time slice for MMU specification\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"12","name":"GCTimeRatio","description":"<pre>Adaptive size policy application time to GC time ratio\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"true","name":"GenLoopSafepoints","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"GeneratePIC","description":"<pre>Generate position independent code\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"GenerateRuntimeDebugInfo","description":"<pre>Generate debuginfo for runtime-compiled code.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"GenericDynamicCounters","description":"<pre>Turn on the benchmark counters, and displays the results on VM shutdown\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"GraalArithmeticStubs","description":"<pre>Use Graal arithmetic stubs instead of HotSpot stubs where possible\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"null","name":"GraalCompileOnly","description":"<pre>A filter applied to a method the VM has selected for compilation by\nGraal. A method not matching the filter is redirected to a lower tier\ncompiler. The filter format is the same as for the MethodFilter option.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"70","name":"GraphCompressionThreshold","description":"<pre>Graal graph compression is performed when percent of live nodes falls\nbelow this value\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"true","name":"GuardPriorities","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"44040192","name":"HeapSizePerGCThread","description":"<pre>Size of heap (bytes) per GC thread used in calculating the number of GC\nthreads\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"true","name":"HeapVerificationFailureIsFatal","description":"<pre>Failed verification of the heap (if enabled) causes termination.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"HighTierPartialUnrolling","description":"<pre>Enable EE partial unrolling in high tier.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"HotSpotDeoptExplicitExceptions","description":"<pre>Testing only option that forces deopts for exception throws\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"HotSpotPostOnExceptions","description":"<pre>Testing only option that forces deopts for exception throws\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"HotSpotPrintInlining","description":"<pre>Print inlining optimizations\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"HybridStaticContext","description":"<pre>Enable hybrid context for static methods, i.e. uses invocation site as\ncontext for static methods.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"IgnoreBadDuplications","description":"<pre>Ignore duplications with a bad benefit cost relation.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"\"\"","name":"ImageObjectTreeExpandRoots","description":"<pre>Override the default suppression of specified roots. See: Reports.md.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"\"\"","name":"ImageObjectTreeExpandTypes","description":"<pre>Override the default suppression of specified types. See: Reports.md.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"\"\"","name":"ImageObjectTreeSuppressRoots","description":"<pre>Suppress the expansion of specified roots. See: Reports.md.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"\"\"","name":"ImageObjectTreeSuppressTypes","description":"<pre>Suppress the expansion of specified types. See: Reports.md.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"ImmutableCode","description":"<pre>Try to avoid emitting code where patching is required\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"InitTimer","description":"<pre>Specifies if initialization timing is enabled.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"0","name":"InitialHeapSize","description":"<pre>Initial heap size (in bytes); zero means use ergonomics\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"1.5625","name":"InitialRAMPercentage","description":"<pre>Percentage of real memory used for initial heap size\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"45","name":"InitiatingHeapOccupancyPercent","description":"<pre>The percent occupancy (IHOP) of the current old generation capacity\nabove which a concurrent mark cycle will be initiated. Its value may\nchange over time if adaptive IHOP is enabled, otherwise the value\nremains constant. In the latter case a value of 0 will result as\nfrequent as possible concurrent marking cycles. A value of 100 disables\nconcurrent marking. Fragmentation waste in the old generation is not\nconsidered free space in this calculation.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"1.0","name":"InlineAllBonus","description":"<pre>The bonus applied to call nodes that can be fully inlined.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"10","name":"InlineDuringParsingMaxDepth","description":"<pre>Maximum depth when inlining during bytecode parsing.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"true","name":"InlineDuringParsing","description":"<pre>Inlines trivial methods during bytecode parsing.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"InlineEverything","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"InlineIntrinsicsDuringParsing","description":"<pre>Inlines intrinsic methods during bytecode parsing.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"InlineMegamorphicCalls","description":"<pre>Inline calls with megamorphic type profile (i.e., not all types could\nbe recorded).\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"InlineMonomorphicCalls","description":"<pre>Inline calls with monomorphic type profile.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"InlinePartialIntrinsicExitDuringParsing","description":"<pre>Inlines partial intrinsic exits during bytecode parsing when possible.\nA partial intrinsic exit is a call within an intrinsic to the method\nbeing intrinsified and denotes semantics of the original method that\nthe intrinsic does not support.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"InlinePolymorphicCalls","description":"<pre>Inline calls with polymorphic type profile.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"InlineVTableStubs","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"Inline","description":"<pre>Enable inlining\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"20000","name":"InlinedCompilerNodeLimit","description":"<pre>Controls the maximum number of compiler nodes that can be inlined into\nthe compiled method.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"0.02","name":"InliningCoefficient","description":"<pre>The coefficient used to compute the inlining threshold; the higher, the\nmore to inline.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"1000","name":"InliningDepthError","description":"<pre>Maximum inlining depth during partial evaluation before reporting an\ninfinite recursion\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"false","name":"InsertPreMainPostOnly","description":"<pre>Do not unroll the main loop, only create pre-main-post.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"InspectGraphs","description":"<pre>Inspect analysis graphs.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"\"inspect\"","name":"InspectServerContentPath","description":"<pre>Path to the contents of the Inspect web server.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"null","name":"InstallSegfaultHandler","description":"<pre>Install segfault handler that prints register contents and full Java\nstacktrace. Default: enabled for an executable, disabled for a shared\nlibrary.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"InterceptBailout","description":"<pre>Intercept also bailout exceptions\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"Intrinsify","description":"<pre>Use compiler intrinsifications.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"LIRDynMoveProfileMethod","description":"<pre>Enable dynamic move profiling per method.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"LIROptConstantLoadOptimization","description":"<pre>Enable constant load optimization.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"LIROptControlFlowOptimizer","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"LIROptEdgeMoveOptimizer","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"LIROptLSRAEliminateSpillMoves","description":"<pre>Enable spill move elimination.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"LIROptLSRAOptimizeSpillPosition","description":"<pre>Enable spill position optimization\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"LIROptLSStackSlotAllocator","description":"<pre>Use linear scan stack slot allocation.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"LIROptNullCheckOptimizer","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"LIROptRedundantMoveElimination","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"LIROptStackMoveOptimizer","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"LIROptimization","description":"<pre>Enable LIR level optimiztations.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"LIRProfileMethods","description":"<pre>Enables profiling of methods.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"LIRProfileMoves","description":"<pre>Enables profiling of move types on LIR level. Move types are for\nexample stores (register to stack), constant loads (constant to\nregister) or copies (register to register).\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"LSRAOptSplitOnly","description":"<pre>LSRA optimization: Only split but do not reassign\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"LSRAOptimization","description":"<pre>Enable LSRA optimization\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"0.005","name":"LargeChildrenCountPenaltyCoefficient","description":"<pre>Reduces the likelihood of exploring call graphs that have a lot of\nchildren below the root.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"1000","name":"LibGraalManagementDelay","description":"<pre>Milliseconds to delay initialization of the libgraal JMX interface.\nSpecify a negative value to disable the interface altogether.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"5.0","name":"LimitInlinedInvokes","type":"Double"},
{"prefix":"-XX:","defaultValue":"false","name":"LimitObjectArrayLength","description":"<pre>Enable a limit for the number of objects recorded for each type of a\ntype state before disabling heap sensitivity for that type. The\nanalysis must be heap sensitive.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"ListMetrics","description":"<pre>Lists on the console at VM shutdown the metric names available to the\nTimers, Counters and MemUseTrackers options. Note that this only lists\nthe metrics that were initialized during the VM execution and so will\nnot include metrics for compiler code that is not executed.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"LoadExceptionObjectInVM","description":"<pre>Use a VM runtime call to load and clear the exception object from the\nthread at the start of a compiled exception handler.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"null","name":"LogFile","description":"<pre>File to which logging is sent. A %p in the name will be replaced with a\nstring identifying the process, usually the process id and %t will be\nreplaced by System.currentTimeMillis(). If the current runtime is in an\nisolate, then %i will be replaced by '<isolate id>' otherwise %i is\nremoved. An %I is the same as %i except that the replacement is\n'<isolate id>@<isolate address>'. Using %o as filename sends logging to\nSystem.out whereas %e sends logging to System.err.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"LogVerbose","description":"<pre>Enable more verbose log output when available\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"null","name":"Log","description":"<pre>Pattern for specifying scopes in which logging is enabled. See the Dump\noption for the pattern syntax.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"16","name":"LoopHeaderAlignment","description":"<pre>Alignment in bytes for loop header blocks.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"false","name":"LoopInversion","description":"<pre>Convert loops into their zero trip form.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"3","name":"LoopMaxUnswitch","type":"Integer"},
{"prefix":"-XX:","defaultValue":"true","name":"LoopPeeling","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"LoopPredicationMainPath","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"LoopPredication","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"10.0","name":"LoopUnswitchFrequencyBoost","type":"Double"},
{"prefix":"-XX:","defaultValue":"500","name":"LoopUnswitchMaxIncrease","type":"Integer"},
{"prefix":"-XX:","defaultValue":"10","name":"LoopUnswitchTrivial","type":"Integer"},
{"prefix":"-XX:","defaultValue":"true","name":"LoopUnswitch","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"536870912","name":"MarkStackSizeMax","description":"<pre>Maximum size of marking stack\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"4194304","name":"MarkStackSize","description":"<pre>Size of marking stack\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"true","name":"MatchExpressions","description":"<pre>Allow backend to match complex expressions.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"0","name":"MaxCallingContextDepth","description":"<pre>The maximum length of the methods context chains.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"0","name":"MaxCallingContextWidth","description":"<pre>The maximum number of contexts to record for a method. It only affects\nthe analysis when the max and min calling context depth are different.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"2","name":"MaxCompilationProblemsPerAction","description":"<pre>The maximum number of compilation failures to handle with the action\nspecified by CompilationFailureAction before changing to a less verbose\naction. This does not apply to the ExitVM action.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"100","name":"MaxConstantObjectsPerType","description":"<pre>The maximum number of constant objects recorded for each type before\nmerging the constants into one unique constant object per type. The\nanalysis must be heap sensitive. It has a minimum value of 1.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"64","name":"MaxCpuLocalsPerCounter","description":"<pre>Upper bound on the number of cpu locals per counter. It has to be a\npower of 2.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"0","name":"MaxDirectMemorySize","description":"<pre>Maximum total size of NIO direct-buffer allocations\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"2.0","name":"MaxDuplicationFactor","description":"<pre>How much duplication can happen because of irreducible loops before\nbailing out.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"200","name":"MaxGCPauseMillis","description":"<pre>Adaptive size policy maximum GC pause time goal in millisecond, or the\nmaximum GC time per MMU time slice\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"100000","name":"MaxGraphSizeNodeCost","description":"<pre>Maximum node cost graph size for duplication. If a graph is bigger\nduplication will stop.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"0","name":"MaxHeapContextDepth","description":"<pre>The maximum length of the context used to model a heap object in\naddition to the allocation site; used only when ContextSensitiveHeap is\nenabled.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"0","name":"MaxHeapContextWidth","description":"<pre>The maximum number of contexts to record for a heap object. It only\naffects the analysis when the max and min calling context depth are\ndifferent.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"0","name":"MaxHeapSize","description":"<pre>The maximum heap size at run-time, in bytes.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"1024","name":"MaxJavaStackTraceDepth","description":"<pre>The maximum number of lines in the stack trace for Java exceptions (0\nmeans all)\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"2.0","name":"MaxMispredictionCostIncreaseFactor","description":"<pre>Abstract measure of the cost of branch misprediction. Higher values\nmake generation of conditional moves more likely.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"0","name":"MaxNewSize","description":"<pre>The maximum size of the young generation at run-time, in bytes\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"100","name":"MaxObjectSetSize","description":"<pre>The maximum number of objects recorded for each type of a type state\nbefore disabling heap sensitivity for that type. The analysis must be\nheap sensitive. It has a minimum value of 1.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"3","name":"MaxPolymorphicDispatches","description":"<pre>The maximum number of dispatches in guarded polymorphic inlining.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"10","name":"MaxPriorityInliningPeelingIterations","description":"<pre>Max number of precise inlining peeling iterations.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"25.0","name":"MaxRAMPercentage","description":"<pre>Maximum percentage of real memory used for maximum heap size\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"137438953472","name":"MaxRAM","description":"<pre>Real memory size (in bytes) used to set maximum heap size\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"2","name":"MaxSimulationIterations","description":"<pre>Maximum simulation-duplication iterations of the duplication\noptimization per invocation.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"32","name":"MaxSplitsPerNode","type":"Integer"},
{"prefix":"-XX:","defaultValue":"50","name":"MaxTemplatesPerSnippet","type":"Integer"},
{"prefix":"-XX:","defaultValue":"15","name":"MaxTenuringThreshold","description":"<pre>Maximum value for tenuring threshold\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"4","name":"MaxVectorAlignmentUnroll","description":"<pre>Maximum number of unrolled alignment instructions\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"16","name":"MaxVectorUnroll","description":"<pre>Maximum length of linear-code vector operations\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"20000","name":"MaximumDesiredSize","description":"<pre>Maximum desired size of the compiler graph in nodes.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"128","name":"MaximumEscapeAnalysisArrayLength","description":"<pre>The maximum length of an array that will be escape analyzed.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"80","name":"MaximumHeapSizePercent","description":"<pre>The maximum heap size as percent of physical memory\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"300","name":"MaximumInliningSize","description":"<pre>Inlining is explored up to this number of nodes in the graph for each\ncall site.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"10000","name":"MaximumLoopExplosionCount","description":"<pre>Max number of loop explosions per method.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"5","name":"MaximumRecursiveInlining","description":"<pre>Maximum level of recursive inlining.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"2","name":"MaximumTransitiveEnabledPullFactor","description":"<pre>PullThroughPhiOptimization: Maximum number of algorithm iterations per\noptimization invocation.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"10","name":"MaximumYoungGenerationSizePercent","description":"<pre>The maximum size of the young generation as a percentage of the maximum\nheap size\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"0.33","name":"MegamorphicInliningMinMethodProbability","description":"<pre>Minimum probability for methods to be inlined for megamorphic type\nprofiles.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"null","name":"MemUseTrackers","description":"<pre>Comma separated names of memory usage trackers that are enabled\nirrespective of the value for TrackMemUse option. An empty value\nenables all memory usage trackers unconditionally.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"MethodFilterRootOnly","description":"<pre>Only check MethodFilter against the root method in the context if true,\notherwise check all methods\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"null","name":"MethodFilter","description":"<pre>Pattern for matching methods. The syntax for a pattern is:\n          \n  SourcePatterns = SourcePattern [\",\" SourcePatterns] .\n  SourcePattern = [ \"~\" ] [ Class \".\" ] method [ \"(\" [ Parameter { \";\" Parameter } ] \")\" ] .\n  Parameter = Class | \"int\" | \"long\" | \"float\" | \"double\" | \"short\" | \"char\" | \"boolean\" .\n  Class = { package \".\" } class .\n          \nGlob pattern matching (*, ?) is allowed in all parts of the source pattern.\nThe \"~\" prefix negates the pattern.\n          \nPositive patterns are joined by an \"or\" operator: \"A,B\" matches anything\nmatched by \"A\" or \"B\". Negative patterns are joined by \"and not\": \"~A,~B\"\nmatches anything not matched by \"A\" and not matched by \"B\". \"A,~B,~C,D\"\nmatches anything matched by \"A\" or \"D\" and not matched by \"B\" and not\nmatched by \"C\".\n          \nA set of patterns containing negative patterns but no positive ones contains\nan implicit positive \"*\" pattern: \"~A,~B\" is equivalent to \"*,~A,~B\".\n          \nExamples of method filters:\n---------\n  *\n          \n  Matches all methods in all classes.\n---------\n  canonical(CanonicalizerTool;LogicNode;LogicNode)\n          \n  Matches all methods named \"canonical\", with the first parameter of type\n  \"CanonicalizerTool\", and the second and third parameters of type\n  \"LogicNode\".\n  The packages of the parameter types are irrelevant.\n---------\n  arraycopy(Object;;;;)\n          \n  Matches all methods named \"arraycopy\", with the first parameter\n  of type \"Object\", and four more parameters of any type. The\n  packages of the parameter types are irrelevant.\n---------\n  org.graalvm.compiler.nodes.PhiNode.*\n          \n  Matches all methods in the class \"org.graalvm.compiler.nodes.PhiNode\".\n---------\n  org.graalvm.compiler.nodes.*.canonical\n          \n  Matches all methods named \"canonical\" in classes in the package\n  \"org.graalvm.compiler.nodes\".\n---------\n  arraycopy,toString\n          \n  Matches all methods named \"arraycopy\" or \"toString\", meaning that ',' acts\n  as an \"or\" operator.\n---------\n  java.util.*.*.,~java.util.*Array*.*\n  java.util.*.*.,~*Array*.*\n          \n  These patterns are equivalent and match all methods in the package\n  \"java.util\" except for classes that have \"Array\" in their name.\n---------\n  ~java.util.*.*\n          \n  Matches all methods in all classes in all packages except for anything in\n  the \"java.util\" package.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"5000","name":"MethodInlineBailoutLimit","description":"<pre>Per-compilation method inlining exploration limit before giving up (use\n0 to disable)\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"null","name":"MetricsFile","description":"<pre>File to which metrics are dumped per compilation.\nA CSV format is used if the file ends with .csv otherwise a more\nhuman readable format is used. The fields in the CSV format are:\n           compilable - method being compiled\n  compilable_identity - identity hash code of compilable\n       compilation_nr - where this compilation lies in the ordered\n                        sequence of all compilations identified by\n                        compilable_identity\n       compilation_id - runtime issued identifier for the compilation\n          metric_name - name of metric\n         metric_value - value of metric\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"true","name":"MidTierPartialUnrolling","description":"<pre>Enable EE partial unrolling in mid tier.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"0.66","name":"MinBlockFrequencyPull","description":"<pre>PullThroughPhiOptimization: Ignore low frequency branches during\nduplication.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"0","name":"MinCallingContextDepth","description":"<pre>The minimum length of the methods context chains.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"0","name":"MinHeapContextDepth","description":"<pre>The minimum length of the context used to model a heap object in\naddition to the allocation site; used only when ContextSensitiveHeap is\nenabled.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"172032","name":"MinHeapDeltaBytes","description":"<pre>The minimum change in heap space due to GC (in bytes).\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"40","name":"MinHeapFreeRatio","description":"<pre>The minimum percentage of heap free after GC to avoid expansion.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"0","name":"MinHeapSize","description":"<pre>The minimum heap size at run-time, in bytes.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"0.1","name":"MinPolymorphicDispatchProbability","description":"<pre>The minimum probability for using a dispatch in guarded polymorphic\ninlining.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"50.0","name":"MinRAMPercentage","description":"<pre>Minimum percentage of real memory used for maximum heap size on systems\nwith small physical memory size\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"2048","name":"MinTLABSize","description":"<pre>Minimum allowed TLAB size (in bytes)\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"2048","name":"MinimalBulkZeroingSize","description":"<pre>If applicable, use bulk zeroing instructions when the zeroing size in\nbytes exceeds this threshold.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"true","name":"MinimalRegions","description":"<pre>Try to reduce duplication code size to the minimal amount of code.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"0.35","name":"MinimumPeelFrequency","type":"Float"},
{"prefix":"-XX:","defaultValue":"2","name":"MultiExitCostFactorSink","description":"<pre>Cost/Benefit heuristic for EE unrolling: If a loop has multiple exits,\ncost is increased by this value for every sinking loop exit.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"32","name":"MultiExitCostFactor","description":"<pre>Cost/Benefit heuristic for EE unrolling: If a loop has multiple exits,\ncost is increased by this value for every none-sinking loop exit.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"0","name":"NDCV","description":"<pre>Run level for NoDeadCodeVerifyHandler (0 = off, 1 = info, 2 = verbose,\n3 = fatal)\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"2","name":"NewRatio","description":"<pre>Ratio of old/new generation sizes\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"1048576","name":"NewSize","description":"<pre>Initial new generation size (in bytes)\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"false","name":"NodeCounters","description":"<pre>Counts the number of instances of each node class.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"20","name":"NonFatalIdenticalCompilationSnapshots","description":"<pre>Number of contiguous identical compiler thread stack traces allowed\nbefore the VM exits on the basis of a stuck compilation.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"null","name":"ObjdumpExecutables","description":"<pre>Comma separated list of candidate GNU objdump executables. If not\nspecified, disassembling via GNU objdump is disabled. Otherwise, the\nfirst existing executable in the list is used.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"1024","name":"OldPLABSize","description":"<pre>Size of old gen promotion LAB's (in HeapWords)\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"5242880","name":"OldSize","description":"<pre>Initial tenured generation size (in bytes)\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"false","name":"OmitHotExceptionStacktrace","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptAssumptions","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptBulkAllocation","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptCompressedFrameStateValues","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptConditionalMoves","description":"<pre>Optimize simple if branches with conditional moves\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptConvertDeoptsToGuards","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptDeDuplication","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptDeoptimizationGrouping","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptDevirtualizeInvokesOptimistically","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptDuplication","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptEarlyReadElimination","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptEliminateGuards","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptExactArithmetic","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptFloatingReads","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptGuardRangeGrouping","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptImplicitNullChecks","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"OptLateDuplication","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptLockElimination","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptLoopPhiStamps","description":"<pre>Inject stamps on induction variables.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptPullThroughPhi","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptReadElimination","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptScheduleOutOfLoops","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptSpeculativeGuardMovement","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"OptStringConcatDump","description":"<pre>Dump graphs to help debug operation\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptStringConcat","description":"<pre>Optimize StringBuilder construction\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptWriteBarrierElimination","description":"<pre>Eliminate redundant write barriers.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptimisticAliasingAnalysis","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"OptimizeLoopAccesses","description":"<pre>Enable access node optimizations for loops\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"null","name":"PGOInstrument","description":"<pre>Dump information for Profile Guided Optimizations (true or file name)\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"75","name":"PLABWeight","description":"<pre>Percentage (0-100) used to weight the current sample when computing\nexponentially decaying average for ResizePLAB\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"50","name":"ParGCArrayScanChunk","description":"<pre>Scan a subset of object array and push remainder, if array is bigger\nthan this\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"10","name":"ParallelGCBufferWastePct","description":"<pre>Wasted fraction of parallel allocation buffer\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"0","name":"ParallelGCThreads","description":"<pre>Number of parallel threads parallel gc will use\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"true","name":"ParallelRefProcBalancingEnabled","description":"<pre>Enable balancing of reference processing queues\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"ParallelRefProcEnabled","description":"<pre>Enable parallel reference processing whenever possible\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"PartialEscapeAnalysis","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"PartialRedundancyElimination","description":"<pre>Enable partial redundancy elimination\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"2","name":"PartialUnrollCostReductionFactorHighTier","description":"<pre>Cost/Benefit heuristic for EE unrolling in high tier: reduce cost by a\nconstant factor when comparing with relative benefit.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"8","name":"PartialUnrollCostReductionFactorMidTier","description":"<pre>Cost/Benefit heuristic for EE unrolling in mid tier: reduce cost by a\nconstant factor when comparing with relative benefit.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"4","name":"PartialUnrollMaxIterationsHighTier","description":"<pre>Maximum number of iterations to unroll for a high tier main loop.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"16","name":"PartialUnrollMaxIterationsMidTier","description":"<pre>Maximum number of iterations to unroll for a mid tier main loop.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"256","name":"PartialUnrollMaxSizeHighTier","description":"<pre>Maximum node cost size of a loop to be considered for high tier\nunrolling.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"256","name":"PartialUnrollMaxSizeMidTier","description":"<pre>Maximum node cost size of a loop to be considered for mid tier tier\nunrolling.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"2","name":"PartialUnrollMinFrequency","description":"<pre>Minimal loop frequency to consider a loop for partial unrolling\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"true","name":"PartialUnroll","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"10","name":"PathProfileCutThreshold","description":"<pre>The limit on the number of paths at control-flow merges. Decreasing\nthis value reduces the number of paths, but also shortens them.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"null","name":"PathProfileDumpFile","description":"<pre>Dump information for path profile (null or file name). If set to null,\nthen dumping is disabled.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"500","name":"PathProfileFrequentThreshold","description":"<pre>Maximum acceptable number of paths coming from the inbound of a merge\nif both of them are frequent.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"0.1","name":"PathProfileGlobalLowFrequencyRatio","description":"<pre>If some block's relative frequency drops below this number times the\nmaximum relative frequency in the graph, then the block is considered\ninfrequent.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"10.0","name":"PathProfileLocalLowFrequencyRatio","description":"<pre>If the ratio of the merge's frequency with its inbound's frequency is\ngreater than this threshold, then the inbound is considered infrequent.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"4000000","name":"PathProfileMaxTotalCounters","description":"<pre>Maximum number of counters to use in path profiling for all\ninstrumented methods.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"None","name":"PathProfilePolicy","description":"<pre>Enable or disable the path-profiling algorithm. If it enables it, it\nalso allows to select which mode to execute.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"PathProfileRegenerate","description":"<pre>Controls whether the path-regeneration algorithm is executed.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"PeelALot","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"120","name":"PeelFoldFactor","type":"Integer"},
{"prefix":"-XX:","defaultValue":"4.0","name":"PeelingConsideredMinFrequency","description":"<pre>Minimal loop frequency necessary to consider peeling.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"true","name":"PenalizeComplexLoopControlFlow","description":"<pre>Increase the cost of duplicating control flow splits inside loops if\nthey are not foldable.The generally tend to complicate control flow and\ngenerate worse code in the backend.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"50","name":"PercentTimeInIncrementalCollection","description":"<pre>Percentage of total collection time that should be spent on young\ngeneration collections.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"32768","name":"PerfDataMemorySize","description":"<pre>Size of performance data memory region. Will be rounded up to a\nmultiple of the native os page size.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"200","name":"PerfDataSamplingInterval","description":"<pre>Jvmstat instrumentation sampling interval (in milliseconds)\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"1024","name":"PerfMaxStringConstLength","description":"<pre>Maximum PerfStringConstant string length before truncation\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"1073741824","name":"PreTouchParallelChunkSize","description":"<pre>Per-thread chunk size for parallel memory pre-touch.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"true","name":"PreferContainerQuotaForCPUCount","description":"<pre>Calculate the container CPU availability based on the value of quotas\n(if set), when true. Otherwise, use the CPU shares value, provided it\nis less than quota.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"-1","name":"PrefetchCopyIntervalInBytes","description":"<pre>How far ahead to prefetch destination area (<= 0 means off)\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"-1","name":"PrefetchScanIntervalInBytes","description":"<pre>How far ahead to prefetch scan area (<= 0 means off)\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintAnalysisCallTree","description":"<pre>Print analysis call tree, a breadth-first tree reduction of the call\ngraph.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintAnalysisStatistics","description":"<pre>Print analysis results statistics.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintBackendCFG","description":"<pre>Enable dumping LIR, register allocation and code generation info to the\nC1Visualizer.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintBlockMapping","description":"<pre>Enable dumping CFG built during initial BciBlockMapping\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintCFG","description":"<pre>Enable dumping to the C1Visualizer. Enabling this option implies\nPrintBackendCFG.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"0","name":"PrintCanonicalGraphStringFlavor","description":"<pre>Choose format used when dumping canonical text for graphs: 0 gives a\nscheduled graph (better for spotting changes involving the schedule)\nwhile 1 gives a CFG containing expressions rooted at fixed nodes\n(better for spotting small structure differences)\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintCanonicalGraphStrings","description":"<pre>Enable dumping canonical text from for graphs.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintCompilation","description":"<pre>Print an informational line to the console for each completed\ncompilation.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintConfig","description":"<pre>Prints VM configuration available via JVMCI.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"PrintDetailedAllocationProfiling","description":"<pre>Print detailed information for each allocation site\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"null","name":"PrintFlagsWithExtraHelp","description":"<pre>Print extra help, if available, based on comma-separated option names.\nPass * to show all options that contain extra help.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"null","name":"PrintFlags","description":"<pre>Show available options based on comma-separated option-types (allowed\ncategories: User, Expert, Debug).\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintGCSummary","description":"<pre>Print summary GC information after application main method returns.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintGCTimeStamps","description":"<pre>Print a time stamp at each collection, if +PrintGC or +VerboseGC.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintGCTimes","description":"<pre>Print the time for each of the phases of each collection, if\n+VerboseGC.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintGC","description":"<pre>Print summary GC information after each collection\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"PrintGraphFile","description":"<pre>Setting to true sets PrintGraph=file, setting to false sets\nPrintGraph=network\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"\"127.0.0.1\"","name":"PrintGraphHost","description":"<pre>Host part of the address to which graphs are dumped.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"4445","name":"PrintGraphPort","description":"<pre>Port part of the address to which graphs are dumped in binary format.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintGraphWithSchedule","description":"<pre>Schedule graphs as they are dumped.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"File","name":"PrintGraph","description":"<pre>Where IdealGraphVisualizer graph dumps triggered by Dump or DumpOnError\nshould be written.\nThe accepted values are:\n      File - Dump IGV graphs to the local file system (see DumpPath).\n   Network - Dump IGV graphs to the network destination specified by PrintGraphHost and PrintGraphPort.\n             If a network connection cannot be opened, dumping falls back to file dumping. \n   Disable - Do not dump IGV graphs.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintHeapShape","description":"<pre>Print the shape of the heap before and after each collection, if\n+VerboseGC.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintIRWithLIR","description":"<pre>Print HIR along side LIR as the latter is generated\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintImageObjectTree","description":"<pre>Print boot image object hierarchy.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintLIRWithAssembly","description":"<pre>Include the LIR as comments with the final assembly.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintPointsToStatistics","description":"<pre>Report analysis statistics.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintProfilingInformation","description":"<pre>Print profiling information when parsing a method's bytecode\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"PrintSynchronizedAnalysis","description":"<pre>Print types used for Java synchronization.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"\"\"","name":"PriorityInliningPolicy","description":"<pre>The policy to use, must be empty for automatic resolution.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"\"DomainSpecific,BytecodeInterpreter\"","name":"PriorityInliningTuningPolicy","description":"<pre>Comma-separated list of analysis policies for exploring the methods in\nthe call graph and for inlining, empty for no policy.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"true","name":"ProbabilisticProfiling","description":"<pre>Control probabilistic profiling on AMD64\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"AllocatingMethod","name":"ProfileAllocationsContext","description":"<pre>Control the naming and granularity of the counters when using\nProfileAllocations.\nThe accepted values are:\n        AllocatingMethod - a counter per method\n         InstanceOrArray - one counter for all instance allocations and\n                           one counter for all array allocations \n           AllocatedType - one counter per allocated type\n  AllocatedTypesInMethod - one counter per allocated type, per method\n \n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"ProfileAllocations","description":"<pre>Enable profiling of allocation sites.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"ProfileAnalysisOperations","description":"<pre>Track the progress of the static analysis.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"ProfileBackedges","description":"<pre>Emit profiling of backedges\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"ProfileCompiledMethods","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"ProfileConstantObjects","description":"<pre>Track the creation of constant objects.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"-1","name":"ProfileDumpPeriod","description":"<pre>Integer greater than zero representing the duration in seconds that\nwill be used to trigger a profile capture. Any integer less than one\ndisables periodic dumps\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"true","name":"ProfileInvokes","description":"<pre>Emit profiling of invokes\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"ProfileLockElimination","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"ProfileMonitors","description":"<pre>Enable profiling of monitor operations.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"ProfileOptBulkAllocation","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"ProfileSelfTime","description":"<pre>Excludes time spent in invoked methods; measures total time including\nsubcalls when turned off.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"ProfileSimpleMethods","description":"<pre>Profile simple methods\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"\"default.iprof\"","name":"ProfilesDumpFile","description":"<pre>Value should point to a profile dump file.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"true","name":"PruneLargeDominatorUsageTrees","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"0.1","name":"PullThroughPhiCodeSizeIncrease","description":"<pre>PullThroughPhiOptimization: Percentage in node cost graph size for the\nfloating node duplication budget. Computed relative to the method's\ngraph size.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"0","name":"QueuedAllocationWarningCount","description":"<pre>Number of times an allocation that queues behind a GC will retry before\nprinting a warning\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"true","name":"RawConditionalElimination","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"5","name":"ReadEliminationMaxLoopVisits","type":"Integer"},
{"prefix":"-XX:","defaultValue":"true","name":"ReassociateExpressions","description":"<pre>Re-associate loop invariants and constants.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"ReduceDCE","description":"<pre>Disable optional dead code eliminations\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"0","name":"RefDiscoveryPolicy","description":"<pre>Select type of reference discovery policy: reference-based(0) or\nreferent-based(1)\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"null","name":"RegisterPressure","description":"<pre>Comma separated list of registers that register allocation is limited\nto.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"0.001","name":"RelativeBenefitInliningCoefficient","description":"<pre>The coefficient used to compute the inlining threshold; the higher, the\nhard to inline.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"true","name":"RelaxTypeFlowStateConstraints","description":"<pre>Allow a type flow state to contain types not compatible with its\ndeclared type.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"RemoveNeverExecutedCode","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"RemoveSaturatedTypeFlows","description":"<pre>Enable the type flow saturation analysis performance optimization.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"ReplaceInputsWithConstantsBasedOnStamps","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"ResizePLAB","description":"<pre>Dynamically resize (survivor space) promotion LAB's\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"ResizeTLAB","description":"<pre>Dynamically resize TLAB size for threads\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"RespectVectorization","description":"<pre>Try avoid unrolling vectorizable loops.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"null","name":"RuntimeSourceDestDir","description":"<pre>Directory where Java source-files will be placed for the debugger\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"0","name":"SafepointPromptnessFailureNanos","description":"<pre>Exit the VM if I can not come to a safepoint in this many nanoseconds.\n0 implies forever.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"0","name":"SafepointPromptnessWarningNanos","description":"<pre>Print a warning if I can not come to a safepoint in this many\nnanoseconds. 0 implies forever.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"true","name":"ScanObjectsParallel","description":"<pre>Object scanning in parallel\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"ScheduledDuplicationSimulation","description":"<pre>Simulation can either only process fixed nodes or schedule the graph\nand also process floating nodes.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"none","name":"ShowConfiguration","description":"<pre>Writes to the VM log information about the compiler configuration\nselected.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"ShowDumpFiles","description":"<pre>Print the name of each dump file path as it's created.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"ShowSubstitutionSourceInfo","description":"<pre>Controls whether the source position information of snippets and method\nsubstitutions are exposed to HotSpot. Can be useful when profiling to\nget more precise position information.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"SimpleFastInflatedLocking","description":"<pre>Handle simple cases for inflated monitors in the fast-path.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"1","name":"SimpleMethodCalls","description":"<pre>Maximum number of calls in a simple method\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"256","name":"SimpleMethodGraphSize","description":"<pre>Maximum number of nodes in a graph for a simple method\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"0","name":"SimpleMethodIndirectCalls","description":"<pre>Maximum number of indirect calls in a simple moethod\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"true","name":"SimulationBasedLoopPeeling","description":"<pre>Use DBDS algorithm to simulate the impact of peeling on a loop.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"SimulationPruneUnlikelyBranches","description":"<pre>Ignore low frequency branches during simulation.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"330","name":"SmallCompiledLowLevelGraphSize","description":"<pre>If the previous low-level graph size of the method exceeds the\nthreshold, it is not inlined.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"0.02","name":"SmallRootIrPenaltyCoefficient","description":"<pre>Reduces the likelihood of exploring call graphs with IR size much\nlarger than the root.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"false","name":"SnippetCounters","description":"<pre>Enable counters for various paths in snippets.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"1000","name":"SoftRefLRUPolicyMSPerMB","description":"<pre>Number of milliseconds per MB of free space in the heap.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"None","name":"SpectrePHTBarriers","description":"<pre>Select a strategy to mitigate speculative bounds check bypass (aka\nSpectre-PHT or Spectre V1).\nThis is an experimental option - execution of untrusted code is not supported by GraalVM CE.\nThe accepted values are:\n                  None - No mitigations are used in JIT compiled code.\n            AllTargets - Speculative execution on all conditional branch targets is\n                         stopped using speculative execution barrier instructions.\n          GuardTargets - Branch targets relevant to Java memory safety are instrumented\n                         with barrier instructions. This option has less performance impact\n                         than AllTargets. \n  NonDeoptGuardTargets - Same as GuardTargets, except that branches which deoptimize are not\n                         protected since they can not be executed repeatedly and are thus less\n                         likely to be successfully exploited in an attack.\n          \n                         \nNote that all modes except \"None\" will also instrument branch target blocks containing UNSAFE memory accesses\nwith barrier instructions.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"SpectrePHTIndexMasking","description":"<pre>Mask indices to scope access to allocation size after bounds check.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"SpeculativeStoreCheck","description":"<pre>Speculates that arrays have exact type to optimize store checks\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"0","name":"StackSize","description":"<pre>The size of each thread stack at run-time, in bytes.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"\"\"","name":"StartFlightRecording","description":"<pre>Start flight recording with options.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"StressExplicitExceptionCode","description":"<pre>Stress the code emitting explicit exception throwing code.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"StressInvokeWithExceptionNode","description":"<pre>Stress the code emitting invokes with explicit exception edges.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"StressTestEarlyReads","description":"<pre>Stress the code by emitting reads at earliest instead of latest point.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"4096","name":"StringIndexOfLimit","description":"<pre>String.indexOf invocations will be evaluated at compile time if the\nreceiver is a constant and its length is lower than this value.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"true","name":"SupportJsrBytecodes","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"SupportOSRWithLocks","description":"<pre>Support OSR compilations with locks. If DeoptAfterOSR is true we can\nper definition not have unbalanced enter/exits mappings. If\nDeoptAfterOSR is false insert artificial monitor enters after the\nOSRStart to have balanced enter/exits in the graph.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"8","name":"SurvivorRatio","description":"<pre>Ratio of eden/survivor space size\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"35","name":"TLABAllocationWeight","description":"<pre>Allocation averaging weight\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"64","name":"TLABRefillWasteFraction","description":"<pre>Maximum TLAB waste at a refill (internal fragmentation)\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"0","name":"TLABSize","description":"<pre>Starting TLAB size (in bytes); zero means set ergonomically\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"4","name":"TLABWasteIncrement","description":"<pre>Increment allowed waste at slow allocation\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"1","name":"TLABWasteTargetPercent","description":"<pre>Percentage of Eden that can be wasted\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"10","name":"TargetPLABWastePct","description":"<pre>Target wasted space in last buffer as percent of overall allocation\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"50","name":"TargetSurvivorRatio","description":"<pre>Desired percentage of survivor space used after scavenge\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"0","name":"TearDownFailureNanos","description":"<pre>The number of nanoseconds before tearing down an isolate gives a\nfailure message. 0 implies no message.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"0","name":"TearDownWarningNanos","description":"<pre>The number of nanoseconds before and between which tearing down an\nisolate gives a warning message. 0 implies no warning.\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"16","name":"TierABackedgeNotifyFreqLog","description":"<pre>Backedge notification frequency\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"12","name":"TierABackedgeProfileProbabilityLog","description":"<pre>Backedge profile probability\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"-1","name":"TierAInvokeInlineeNotifyFreqLog","description":"<pre>Inlinee invocation notification frequency (-1 means count, but do not\nnotify)\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"13","name":"TierAInvokeNotifyFreqLog","description":"<pre>Invocation notification frequency\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"8","name":"TierAInvokeProfileProbabilityLog","description":"<pre>Invocation profile probability\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"false","name":"TieredAOT","description":"<pre>Do profiling and callbacks to tiered runtime\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"TimeStampProfiling","description":"<pre>Profile method execution time.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"null","name":"Time","description":"<pre>Pattern for specifying scopes in which timing is enabled. See the Dump\noption for the pattern syntax. An empty value enables all timers\nunconditionally.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"-1","name":"TimedDynamicCounters","description":"<pre>Turn on the benchmark counters, and displays the results every n\nmilliseconds\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"null","name":"Timers","description":"<pre>Comma separated names of timers that are enabled irrespective of the\nvalue for Time option. An empty value enables all timers\nunconditionally.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceAuxiliaryImageClassHistogram","description":"<pre>Enables detailed tracing of auxiliary image events.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceAuxiliaryImageReferenceTree","description":"<pre>Enables detailed tracing of auxiliary image events.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"0","name":"TraceBytecodeParserLevel","description":"<pre>The trace level for the bytecode parser. A value of 1 enables\ninstruction tracing and any greater value emits a frame state trace\njust prior to each instruction trace.Instruction tracing output from\nmultiple compiler threads will be interleaved so use of this option\nmake most sense for single threaded compilation. The MethodFilter\noption can be used to refine tracing to selected methods.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceCodeCache","description":"<pre>Print logging information for runtime code cache modifications\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceDeoptimizationDetails","description":"<pre>Print verbose logging information for every deoptimization\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceDeoptimization","description":"<pre>Print logging information for every deoptimization\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceEscapeAnalysis","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceExceptionHandlerStub","description":"<pre>Trace execution of stub used to handle an exception thrown by a callee.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceHeapChunks","description":"<pre>Trace heap chunks during collections, if +VerboseGC and\n+PrintHeapShape.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceInlineDuringParsing","description":"<pre>Traces inlining performed during bytecode parsing.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceInliningForStubsAndSnippets","description":"<pre>Enable inlining decision tracing in stubs and snippets.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceInlining","description":"<pre>Enable tracing of inlining decisions.\nOutput format:\n  compilation of 'Signature of the compilation root method':\n    at 'Signature of the root method' ['Bytecode index']: <'Phase'> 'Child method signature': 'Decision made about this callsite'\n      at 'Signature of the child method' ['Bytecode index']: \n         |--<'Phase 1'> 'Grandchild method signature': 'First decision made about this callsite'\n         \\--<'Phase 2'> 'Grandchild method signature': 'Second decision made about this callsite'\n      at 'Signature of the child method' ['Bytecode index']: <'Phase'> 'Another grandchild method signature': 'The only decision made about this callsite.'\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"0","name":"TraceLIRGeneratorLevel","description":"<pre>The trace level for the LIR generator\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"null","name":"TraceMethodDataFilter","description":"<pre>Enables tracing of profiling info when read by JVMCI.\nEmpty value: trace all methods\nNon-empty value: trace methods whose fully qualified name contains the value.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"null","name":"TraceMonitorsMethodFilter","description":"<pre>Trace monitor operations in methods whose fully qualified name contains\nthis substring.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"null","name":"TraceMonitorsTypeFilter","description":"<pre>Trace monitor operations on objects whose type contains this substring.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceParserPlugins","description":"<pre>Traces use of plugins during bytecode parsing.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"TraceUnwindStub","description":"<pre>Trace execution of the stub that routes an exception to a handler in\nthe calling frame.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"TrackAccessChain","description":"<pre>Track the callers for methods and accessing methods for fields.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"TrackGraphSizesInDuplication","description":"<pre>Enable (if Count is enabled) graph size tracking during every\nduplication iteration.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"none","name":"TrackInliningStatistics","description":"<pre>Track inlining statistics (inlining duration, call tree size, compiler\nnode counts, and the number of callsites). One of: none, interactive\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"TrackInputFlows","description":"<pre>Track the input for type flows.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"null","name":"TrackMemUse","description":"<pre>Pattern for specifying scopes in which memory use tracking is enabled.\nSee the Dump option for the pattern syntax. An empty value enables all\nmemory use trackers unconditionally.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"TrackNodeInsertion","description":"<pre>Track source stack trace where a node was inserted into the graph.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"TrackNodeSourcePosition","description":"<pre>Track the NodeSourcePosition.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"10","name":"TrivialInliningSize","description":"<pre>Graphs with less than this number of nodes are trivial and therefore\nalways inlined.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"512.0","name":"TrivialLoopSizeLimitForPeeling","description":"<pre>Loop peeling will consider any loop with a size (in terms of estimated\nmachine instructions) below this value to be a prime candidate for\npeeling. Larger loops will only be considered for peeling if the\nsimulated benefit of peeling is relatively high. The larger the loop,\nthe greater the expected benefit has to be.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"null","name":"TruffleCompilerConfiguration","description":"<pre>Select a compiler configuration for Truffle compilation (default: use\nGraal system compiler configuration).\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"true","name":"TrustFinalDefaultFields","description":"<pre>Determines whether to treat final fields with default values as\nconstant.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"TryExplodeOverPhis","description":"<pre>PullThroughPhiOptimization: Enable floating node duplication over\nmultiple phi nodes at once.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"TryPhiPhiPulls","description":"<pre>PullThroughPhiOptimization: Enable floating node duplication over phis\nwhere the target node has different phis as input.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"0.0","name":"TuneInlinerExploration","description":"<pre>Increases or decreases the time spent exploring inlining opportunities\nunder the assumption that more time results in better peak performance\nand less time reduces time to reach (a lower) peak performance. The\nvalue of the option is clamped between -1 and 1 inclusive. Anything\nbelow 0, reduces the exploration time and anything above 0 increases\nexploration time. Note that this option is only a heuristic and should\nbe tuned for any specific application.\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"2","name":"TypeCheckMaxHints","description":"<pre>The maximum number of profiled types that will be used when compiling a\nprofiled type check. Note that TypeCheckMinProfileHitProbability also\ninfluences whether profiling info is used in compiled type checks.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"0.5","name":"TypeCheckMinProfileHitProbability","description":"<pre>If the probability that a type check will hit one the profiled types\n(up to TypeCheckMaxHints) is below this value, the type check will be\ncompiled without profiling info\n<\/pre>","type":"Double"},
{"prefix":"-XX:","defaultValue":"0","name":"TypeFlowPrinterInRadius","description":"<pre>How many levels of inputs to print. A value of 0 prints only the target\nflow.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"0","name":"TypeFlowPrinterOutRadius","description":"<pre>How many levels of outputs to print. A value of 0 prints only the\ntarget flow.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"20","name":"TypeFlowSaturationCutoff","description":"<pre>The maximum number of types recorded in a type flow. -1 indicates no\nlimitation.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"200","name":"TypicalCallGraphSize","description":"<pre>Denotes the call graph size that is considered medium size.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"70","name":"TypicalGraphSizeInvokeBonus","description":"<pre>The increase in estimated typical graph size after inlining, per each\nextra invoke.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"10000","name":"TypicalGraphSizeMax","description":"<pre>The maximum in estimated inlined typical graph size.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"3250","name":"TypicalGraphSize","description":"<pre>The typical graph size at which inlining pressure must start growing.\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"true","name":"UnresolvedIsError","description":"<pre>Report unresolved elements as errors.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"16","name":"UnrollMaxIterations","type":"Integer"},
{"prefix":"-XX:","defaultValue":"true","name":"UnrollMultiEndLoops","description":"<pre>Unroll loops with multiple loop ends.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"UnrollMultiExitLoops","description":"<pre>Unroll loops with multiple loop exits.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"UseBranchesWithin32ByteBoundary","description":"<pre>Force branch instructions to align with 32-bytes boundary, to mitigate\nthe jcc erratum. See\nhttps://www.intel.com/content/dam/support/us/en/documents/processors/mitigations-jump-conditional-code-erratum.pdf\nfor more details. If not set explicitly, the default value will be\ndetermined according to the CPU model.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"UseCompilationStatistics","description":"<pre>Enables CompilationStatistics.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"UseDynamicNumberOfGCThreads","description":"<pre>Dynamically choose the number of threads up to a maximum of\nParallelGCThreads parallel collectors will use for garbage collection\nwork\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"UseEncodedGraphs","description":"<pre>Encode and decode snippets and substitutions before parsing to test\nlibgraal code path. This option is ignored in the context of libgraal.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"UseExceptionProbability","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"UseGraalStubs","description":"<pre>Use Graal-generated stubs for complicated LIR operations instead of\nembedding all the emitted code.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"UseGraphCache","description":"<pre>Turn on graph caching.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"UseLoopLimitChecks","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"UsePerfData","description":"<pre>Flag to disable jvmstat instrumentation for performance testing.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"UsePriorityInlining","description":"<pre>Use priority-based inlining.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"UseProfilingInformation","description":"<pre>          \n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"UseSnippetGraphCache","description":"<pre>Use a cache for snippet graphs.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"UseSnippetTemplateCache","description":"<pre>Use a LRU cache for snippet templates.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"UseTrappingNullChecks","description":"<pre>Use traps for null checks instead of explicit null-checks\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"UseTypeCheckHints","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"VTuneAbsoluteFilenames","description":"<pre>Use absolute path for source-filenames in VTune events.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"VectorIntrinsics","description":"<pre>Enable vectorized array copy intrinsics\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"1","name":"VectorUnroll","description":"<pre>Unroll vectorized loops\n<\/pre>","type":"Integer"},
{"prefix":"-XX:","defaultValue":"true","name":"Vectorization","description":"<pre>Enable vectorization.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"VectorizeAllocation","description":"<pre>Enable vectorized array initialization\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"VectorizeConditional","description":"<pre>Enable vectorization of conditional code.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"VectorizeDeopts","description":"<pre>Enable vectorization of loops with conditional deopts before writes.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"VectorizeFoldShaped","description":"<pre>Enable vectorization of loops implementing a higher-order 'fold'\nfunction.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"VectorizeGather","description":"<pre>Enable vectorization of vector gather operations.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"VectorizeLoops","description":"<pre>Enable vectorization of loops\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"VectorizeMapShaped","description":"<pre>Enable vectorization of loops implementing a higher-order 'map'\nfunction.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"VectorizeNegativeStride","description":"<pre>Enable vectorization of loops with negative strides.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"VectorizeSIMD","description":"<pre>Enable detection of SIMD patterns\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"VectorizeSafepoints","description":"<pre>Enable vectorization of loops with safepoints.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"VectorizeSequence","description":"<pre>Enable vectorization of sequence values.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"VerboseGC","description":"<pre>Print more information about the heap before and after each collection\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyAfterGC","description":"<pre>Verify memory system after GC\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyBalancedMonitors","description":"<pre>Emit extra code to dynamically check monitor operations are balanced.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyBeforeGC","description":"<pre>Verify memory system before GC\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyDuplicationOperations","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyDuringGC","description":"<pre>Verify memory system during GC (between phases)\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"0","name":"VerifyGCStartAt","description":"<pre>GC invoke count where +VerifyHeap kicks in\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyGraalGraphEdges","description":"<pre>Perform expensive verification of graph inputs, usages, successors and\npredecessors\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"true","name":"VerifyGraalGraphs","description":"<pre>Verify graphs often during compilation when assertions are turned on\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyGraalPhasesSize","description":"<pre>Verify before - after relation of the relative, computed, code size of\na graph\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyHeapAtReturn","description":"<pre>Perform platform dependent validation of the Java heap at returns\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyKillCFGUnusedNodes","description":"<pre>Verify that there are no new unused nodes when performing killCFG\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyPhases","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyRememberedSets","description":"<pre>Verify GC remembered sets\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"VerifyWriteBarrierElimination","description":"<pre>Add code to verify that eliminated barriers weren't needed.\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"null","name":"Verify","description":"<pre>Pattern for specifying scopes in which logging is enabled. See the Dump\noption for the pattern syntax.\n<\/pre>","type":"String"},
{"prefix":"-XX:","defaultValue":"false","name":"WriteableCodeCache","description":"<pre>Allocate code cache with write access, allowing inlining of objects\n<\/pre>","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"4096","name":"YoungPLABSize","description":"<pre>Size of young gen promotion LAB's (in HeapWords)\n<\/pre>","type":"Long"},
{"prefix":"-XX:","defaultValue":"false","name":"ZapStackOnMethodEntry","type":"Boolean"},
{"prefix":"-XX:","defaultValue":"false","name":"ZeroTLAB","description":"<pre>Zero out the newly created TLAB\n<\/pre>","type":"Boolean"}
] }