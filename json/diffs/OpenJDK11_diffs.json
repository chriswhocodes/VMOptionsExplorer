{"earlierVM": "OpenJDK10",
"laterVM": "OpenJDK11",
"added":[{"availability":"diagnostic","cpu":"x86","defaultValue":"4096","definedIn":"cpu/x86/globals_x86.hpp","description":"Minimum array size in bytes to use AVX512 intrinsics\nfor copy, inflate and fill. When this value is set as zero\ncompare operations can also use AVX512 intrinsics.","name":"AVX3Threshold","prefix":"-XX:","range":"range(0, max_jint)","type":"int"},
{"availability":"diagnostic","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","description":"Abort VM when method had failed to compile.","name":"AbortVMOnCompilationFailure","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","description":"Abort upon failure to reach safepoint (see SafepointTimeout)","name":"AbortVMOnSafepointTimeout","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","description":"Abort upon failure to complete VM operation promptly","name":"AbortVMOnVMOperationTimeout","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"runtime","defaultValue":"1000","definedIn":"share/runtime/globals.hpp","description":"Delay in milliseconds for option AbortVMOnVMOperationTimeout","name":"AbortVMOnVMOperationTimeoutDelay","prefix":"-XX:","range":"range(0, max_intx)","type":"intx"},
{"availability":"diagnostic","defaultValue":"true","definedIn":"os/linux/globals_linux.hpp","description":"If true, sets bit 2 of /proc/PID/coredump_filter, thus \nresulting in file-backed private mappings of the process to \nbe dumped into the corefile.","name":"DumpPrivateMappingsInCore","os":"linux","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","defaultValue":"true","definedIn":"os/linux/globals_linux.hpp","description":"If true, sets bit 3 of /proc/PID/coredump_filter, thus \nresulting in file-backed shared mappings of the process to \nbe dumped into the corefile.","name":"DumpSharedMappingsInCore","os":"linux","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"jvmci","defaultValue":"false","definedIn":"share/jvmci/jvmci_globals.hpp","description":"Force eager JVMCI initialization","name":"EagerJVMCI","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"gc","defaultValue":"true","definedIn":"share/gc/epsilon/epsilon_globals.hpp","description":"Use elastic policy to manage TLAB sizes. This conserves memory \nfor non-actively allocating threads, even when they request \nlarge TLABs for themselves. Active threads would experience \nsmaller TLABs until policy catches up.","name":"EpsilonElasticTLAB","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"gc","defaultValue":"true","definedIn":"share/gc/epsilon/epsilon_globals.hpp","description":"Use timed decays to shrik TLAB sizes. This conserves memory \nfor the threads that allocate in bursts of different sizes, \nfor example the small/rare allocations coming after the initial \nlarge burst.","name":"EpsilonElasticTLABDecay","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"gc","defaultValue":"4 * M","definedIn":"share/gc/epsilon/epsilon_globals.hpp","description":"Max TLAB size to use with Epsilon GC. Larger value improves \nperformance at the expense of per-thread memory waste. This \nasks TLAB machinery to cap TLAB sizes at this value.","name":"EpsilonMaxTLABSize","prefix":"-XX:","range":"range(1, max_intx)","type":"size_t"},
{"availability":"experimental","component":"gc","defaultValue":"128 * M","definedIn":"share/gc/epsilon/epsilon_globals.hpp","description":"Min expansion step for heap. Larger value improves performance \nat the potential expense of memory waste.","name":"EpsilonMinHeapExpand","prefix":"-XX:","range":"range(1, max_intx)","type":"size_t"},
{"availability":"experimental","component":"gc","defaultValue":"20","definedIn":"share/gc/epsilon/epsilon_globals.hpp","description":"Print heap occupancy stats with this number of steps. \n\n0 turns the printing off.","name":"EpsilonPrintHeapSteps","prefix":"-XX:","range":"range(0, max_intx)","type":"size_t"},
{"availability":"experimental","component":"gc","defaultValue":"1000","definedIn":"share/gc/epsilon/epsilon_globals.hpp","description":"TLAB sizing policy decays to initial size after thread had not \nallocated for this long. Time is in milliseconds. Lower value \nimproves memory footprint, but penalizes actively allocating \nthreads.","name":"EpsilonTLABDecayTime","prefix":"-XX:","range":"range(1, max_intx)","type":"size_t"},
{"availability":"experimental","component":"gc","defaultValue":"1.1","definedIn":"share/gc/epsilon/epsilon_globals.hpp","description":"Multiplier to use when deciding on next TLAB size. Larger value \nimproves performance at the expense of per-thread memory waste. \nLower value improves memory footprint, but penalizes actively \nallocating threads.","name":"EpsilonTLABElasticity","prefix":"-XX:","range":"range(1.0, DBL_MAX)","type":"double"},
{"availability":"experimental","component":"gc","defaultValue":"1 * M","definedIn":"share/gc/epsilon/epsilon_globals.hpp","description":"Update heap occupancy counters after allocating this much \nmemory. Higher values would make allocations faster at \nthe expense of lower resolution in heap counters.","name":"EpsilonUpdateCountersStep","prefix":"-XX:","range":"range(1, max_intx)","type":"size_t"},
{"availability":"product","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","description":"If true, error data is printed to stderr instead of a file","name":"ErrorFileToStderr","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","description":"If true, error data is printed to stdout instead of a file","name":"ErrorFileToStdout","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"runtime","defaultValue":"PRODUCT_ONLY(false) NOT_PRODUCT(true)","definedIn":"share/runtime/globals.hpp","description":"Error reports are more extensive.","name":"ExtensiveErrorReports","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","deprecated":"13","description":"Enable Flight Recorder","expired":"","name":"FlightRecorder","obsoleted":"","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"runtime","defaultValue":"NULL","definedIn":"share/runtime/globals.hpp","description":"Flight Recorder options","name":"FlightRecorderOptions","prefix":"-XX:","type":"ccstr"},
{"availability":"experimental","component":"gc","defaultValue":"256 * K","definedIn":"share/gc/g1/g1_globals.hpp","description":"Chunk size used for rebuilding the remembered set.","name":"G1RebuildRemSetChunkSize","prefix":"-XX:","range":"range(4 * K, 32 * M)","type":"size_t"},
{"availability":"experimental","component":"gc","defaultValue":"true","definedIn":"share/gc/g1/g1_globals.hpp","description":"Concurrently preclean java.lang.ref.references instances \nbefore the Remark pause.","name":"G1UseReferencePrecleaning","prefix":"-XX:","type":"bool"},
{"availability":"develop","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","description":"Inject thread creation failures for \nUseDynamicNumberOfCompilerThreads","name":"InjectCompilerCreationFailure","prefix":"-XX:","type":"bool"},
{"availability":"product","defaultValue":"true","definedIn":"os/linux/globals_linux.hpp","description":"Calculate the container CPU availability based on the value\n of quotas (if set), when true. Otherwise, use the CPU\n shares value, provided it is less than quota.","name":"PreferContainerQuotaForCPUCount","os":"linux","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","description":"Print more information in thread dump","name":"PrintExtendedThreadInfo","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"runtime","defaultValue":"true","definedIn":"share/runtime/globals.hpp","description":"Reduce the number of parallel compiler threads when they \nare not used","name":"ReduceNumberOfCompilerThreads","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"gc","defaultValue":"1000","definedIn":"share/gc/shared/gc_globals.hpp","description":"Ergonomically start one thread for this amount of \nreferences for reference processing if \nParallelRefProcEnabled is true. Specify 0 to disable and \nuse all threads.","name":"ReferencesPerThread","prefix":"-XX:","type":"size_t"},
{"availability":"diagnostic","component":"gc","defaultValue":"false","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Testing: make lots of artificial allocation failures.","name":"ShenandoahAllocFailureALot","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"gc","defaultValue":"5","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"How much of heap should some heuristics reserve for absorbing \nthe allocation spikes. Larger value wastes more memory in \nnon-emergency cases, but provides more safety in emergency \ncases. In percents of (soft) max heap size.","name":"ShenandoahAllocSpikeFactor","prefix":"-XX:","range":"range(0,100)","type":"uintx"},
{"availability":"experimental","component":"gc","defaultValue":"0","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"How many new allocations should happen since the last GC cycle \nbefore some heuristics trigger the collection. In percents of \n(soft) max heap size. Set to zero to effectively disable.","name":"ShenandoahAllocationThreshold","prefix":"-XX:","range":"range(0,100)","type":"uintx"},
{"availability":"experimental","component":"gc","defaultValue":"false","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Unconditionally clear soft references, instead of using any \nother cleanup policy. This minimizes footprint at expense of\nmore soft reference churn in applications.","name":"ShenandoahAlwaysClearSoftRefs","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"gc","defaultValue":"true","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Turn on/off CAS barriers in Shenandoah","name":"ShenandoahCASBarrier","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"gc","defaultValue":"true","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Turn on/off clone barriers in Shenandoah","name":"ShenandoahCloneBarrier","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"gc","defaultValue":"2","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Use this style to scan the code cache roots:\n 0 - sequential iterator;\n 1 - parallel iterator;\n 2 - parallel iterator with cset filters;","name":"ShenandoahCodeRootsStyle","prefix":"-XX:","type":"uintx"},
{"availability":"experimental","component":"gc","defaultValue":"1000","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"The time period for one step in control loop interval \nadjustment. Lower values make adjustments faster, at the \nexpense of higher perf overhead. Time is in milliseconds.","name":"ShenandoahControlIntervalAdjustPeriod","prefix":"-XX:","type":"uintx"},
{"availability":"experimental","component":"gc","defaultValue":"10","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"The maximum sleep interval for control loop that drives \nthe cycles. Lower values would increase GC responsiveness \nto changing heap conditions, at the expense of higher perf \noverhead. Time is in milliseconds.","name":"ShenandoahControlIntervalMax","prefix":"-XX:","type":"uintx"},
{"availability":"experimental","component":"gc","defaultValue":"1","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"The minimum sleep interval for the control loop that drives \nthe cycles. Lower values would increase GC responsiveness \nto changing heap conditions, at the expense of higher perf \noverhead. Time is in milliseconds.","name":"ShenandoahControlIntervalMin","prefix":"-XX:","type":"uintx"},
{"availability":"experimental","component":"gc","defaultValue":"1","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"How much of the heap needs to be free after recovery cycles, \neither Degenerated or Full GC to be claimed successful. If this \nmuch space is not available, next recovery step would be \ntriggered.","name":"ShenandoahCriticalFreeThreshold","prefix":"-XX:","range":"range(0, 100)","type":"uintx"},
{"availability":"diagnostic","component":"gc","defaultValue":"true","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Enable Degenerated GC as the graceful degradation step. \nDisabling this option leads to degradation to Full GC instead. \nWhen running in passive mode, this can be toggled to measure \neither Degenerated GC or Full GC costs.","name":"ShenandoahDegeneratedGC","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"gc","defaultValue":"true","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Use Elastic TLABs with Shenandoah","name":"ShenandoahElasticTLAB","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"gc","defaultValue":"5","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"How much of heap to reserve for evacuations. Larger values make \nGC evacuate more live objects on every cycle, while leaving \nless headroom for application to allocate in. In percents of \ntotal heap size.","name":"ShenandoahEvacReserve","prefix":"-XX:","range":"range(1,100)","type":"uintx"},
{"availability":"experimental","component":"gc","defaultValue":"true","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Allow evacuations to overflow the reserved space. Enabling it \nwill make evacuations more resilient when evacuation \nreserve/waste is incorrect, at the risk that application \nruns out of memory too early.","name":"ShenandoahEvacReserveOverflow","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"gc","defaultValue":"1.2","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"How much waste evacuations produce within the reserved space. \nLarger values make evacuations more resilient against \nevacuation conflicts, at expense of evacuating less on each \nGC cycle.","name":"ShenandoahEvacWaste","prefix":"-XX:","range":"range(1.0,100.0)","type":"double"},
{"availability":"experimental","component":"gc","defaultValue":"3","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"How many back-to-back Degenerated GCs should happen before \ngoing to a Full GC.","name":"ShenandoahFullGCThreshold","prefix":"-XX:","type":"uintx"},
{"availability":"product","component":"gc","defaultValue":"adaptive","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"GC heuristics to use. This fine-tunes the GC mode selected, \nby choosing when to start the GC, how much to process on each \ncycle, and what other features to automatically enable. \nPossible values are:\n adaptive - adapt to maintain the given amount of free heap \nat all times, even during the GC cycle;\n static - trigger GC when free heap falls below the threshold;\n aggressive - run GC continuously, try to evacuate everything;\n compact - run GC more frequently and with deeper targets to \nfree up more memory.","name":"ShenandoahGCHeuristics","prefix":"-XX:","type":"ccstr"},
{"availability":"product","component":"gc","defaultValue":"satb","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"GC mode to use. Among other things, this defines which \nbarriers are in in use. Possible values are:\n satb - snapshot-at-the-beginning concurrent GC (three pass mark-evac-update);\n iu - incremental-update concurrent GC (three pass mark-evac-update);\n passive - stop the world GC only (either degenerated or full)","name":"ShenandoahGCMode","prefix":"-XX:","type":"ccstr"},
{"availability":"experimental","component":"gc","defaultValue":"25","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"How much garbage a region has to contain before it would be \ntaken for collection. This a guideline only, as GC heuristics \nmay select the region for collection even if it has little \ngarbage. This also affects how much internal fragmentation the \ncollector accepts. In percents of heap region size.","name":"ShenandoahGarbageThreshold","prefix":"-XX:","range":"range(0,100)","type":"uintx"},
{"availability":"experimental","component":"gc","defaultValue":"5*60*1000","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Many heuristics would guarantee a concurrent GC cycle at \nleast with this interval. This is useful when large idle \nintervals are present, where GC can run without stealing \ntime from active application. Time is in milliseconds. \nSetting this to 0 disables the feature.","name":"ShenandoahGuaranteedGCInterval","prefix":"-XX:","type":"uintx"},
{"availability":"diagnostic","component":"gc","defaultValue":"true","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Allow moving humongous regions. This makes GC more resistant \nto external fragmentation that may otherwise fail other \nhumongous allocations, at the expense of higher GC copying \ncosts. Currently affects stop-the-world (Full) cycle only.","name":"ShenandoahHumongousMoves","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"gc","defaultValue":"100","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Humongous objects are allocated in separate regions. \nThis setting defines how large the object should be to be \ndeemed humongous. Value is in percents of heap region size. \nThis also caps the maximum TLAB size.","name":"ShenandoahHumongousThreshold","prefix":"-XX:","range":"range(1, 100)","type":"intx"},
{"availability":"diagnostic","component":"gc","defaultValue":"false","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Turn on/off I-U barriers barriers in Shenandoah","name":"ShenandoahIUBarrier","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"gc","defaultValue":"90","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"The cycle may shortcut when enough garbage can be reclaimed \nfrom the immediate garbage (completely garbage regions). \nIn percents of total garbage found. Setting this threshold \nto 100 effectively disables the shortcut.","name":"ShenandoahImmediateThreshold","prefix":"-XX:","range":"range(0,100)","type":"uintx"},
{"availability":"experimental","component":"gc","defaultValue":"false","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Should internally-caused GC requests invoke concurrent cycles, \nshould they do the stop-the-world (Degenerated / Full GC)? \nMany heuristics automatically enable this. This option is \nsimilar to global ExplicitGCInvokesConcurrent.","name":"ShenandoahImplicitGCInvokesConcurrent","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"gc","defaultValue":"70","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"How much heap should be free before some heuristics trigger the \ninitial (learning) cycles. Affects cycle frequency on startup \nand after drastic state changes, e.g. after degenerated/full \nGC cycles. In percents of (soft) max heap size.","name":"ShenandoahInitFreeThreshold","prefix":"-XX:","range":"range(0,100)","type":"uintx"},
{"availability":"experimental","component":"gc","defaultValue":"5","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"The number of cycles some heuristics take to collect in order \nto learn application and GC performance.","name":"ShenandoahLearningSteps","prefix":"-XX:","range":"range(0,100)","type":"uintx"},
{"availability":"diagnostic","component":"gc","defaultValue":"true","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Turn on/off load-reference barriers in Shenandoah","name":"ShenandoahLoadRefBarrier","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"gc","defaultValue":"true","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Attempt more loop opts after barrier expansion.","name":"ShenandoahLoopOptsAfterExpansion","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"gc","defaultValue":"1000","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"How many items to process during one marking iteration before \nchecking for cancellation, yielding, etc. Larger values improve \nmarking performance at expense of responsiveness.","name":"ShenandoahMarkLoopStride","prefix":"-XX:","type":"uintx"},
{"availability":"experimental","component":"gc","defaultValue":"32","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"How many objects to prefetch ahead when traversing mark bitmaps.\nSet to 0 to disable prefetching.","name":"ShenandoahMarkScanPrefetch","prefix":"-XX:","range":"range(0, 256)","type":"intx"},
{"availability":"experimental","component":"gc","defaultValue":"32 * M","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"With automatic region sizing, the regions would be at most \nthis large.","name":"ShenandoahMaxRegionSize","prefix":"-XX:","type":"size_t"},
{"availability":"experimental","component":"gc","defaultValue":"5","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"How many times to maximum attempt to flush SATB buffers at the \nend of concurrent marking.","name":"ShenandoahMaxSATBBufferFlushes","prefix":"-XX:","type":"uintx"},
{"availability":"experimental","component":"gc","defaultValue":"10","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"How much heap should be free before most heuristics trigger the \ncollection, even without other triggers. Provides the safety \nmargin for many heuristics. In percents of (soft) max heap size.","name":"ShenandoahMinFreeThreshold","prefix":"-XX:","range":"range(0,100)","type":"uintx"},
{"availability":"experimental","component":"gc","defaultValue":"256 * K","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"With automatic region sizing, the regions would be at least \nthis large.","name":"ShenandoahMinRegionSize","prefix":"-XX:","type":"size_t"},
{"availability":"diagnostic","component":"gc","defaultValue":"false","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Testing: simulate OOM during evacuation.","name":"ShenandoahOOMDuringEvacALot","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"gc","defaultValue":"true","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Optimize barriers on static final fields. \nTurn it off for maximum compatibility with reflection or JNI \ncode that manipulates final fields.","name":"ShenandoahOptimizeStaticFinals","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"gc","defaultValue":"true","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Pace application allocations to give GC chance to start \nand complete before allocation failure is reached.","name":"ShenandoahPacing","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"gc","defaultValue":"10","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"How much of free space to take as non-taxable allocations \nthe GC cycle. Larger value makes the pacing milder at the \nbeginning of the GC cycle. Lower value makes the pacing less \nuniform during the cycle. In percent of free space.","name":"ShenandoahPacingCycleSlack","prefix":"-XX:","range":"range(0, 100)","type":"uintx"},
{"availability":"experimental","component":"gc","defaultValue":"2","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"How much of heap counted as non-taxable allocations during idle \nphases. Larger value makes the pacing milder when collector is \nidle, requiring less rendezvous with control thread. Lower \nvalue makes the pacing control less responsive to out-of-cycle \nallocs. In percent of total heap size.","name":"ShenandoahPacingIdleSlack","prefix":"-XX:","range":"range(0, 100)","type":"uintx"},
{"availability":"experimental","component":"gc","defaultValue":"10","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Max delay for pacing application allocations. Larger values \nprovide more resilience against out of memory, at expense at \nhiding the GC latencies in the allocation path. Time is in \nmilliseconds. Setting it to arbitrarily large value makes \nGC effectively stall the threads indefinitely instead of going \nto degenerated or Full GC.","name":"ShenandoahPacingMaxDelay","prefix":"-XX:","type":"uintx"},
{"availability":"experimental","component":"gc","defaultValue":"1.1","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Additional pacing tax surcharge to help unclutter the heap. \nLarger values makes the pacing more aggressive. Lower values \nrisk GC cycles finish with less memory than were available at \nthe beginning of it.","name":"ShenandoahPacingSurcharge","prefix":"-XX:","range":"range(1.0, 100.0)","type":"double"},
{"availability":"experimental","component":"gc","defaultValue":"1024","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"How many regions to process at once during parallel region \niteration. Affects heaps with lots of regions.","name":"ShenandoahParallelRegionStride","prefix":"-XX:","type":"uintx"},
{"availability":"diagnostic","component":"gc","defaultValue":"true","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Do concurrent preclean phase before final mark: process \ndefinitely alive references to avoid dealing with them during \npause.","name":"ShenandoahPreclean","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"gc","defaultValue":"5","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Process process weak (soft, phantom, finalizers) references \nevery Nth cycle. Normally affects concurrent GC cycles only, \nas degenerated and full GCs would try to process references \nregardless. Set to zero to disable reference processing \ncompletely.","name":"ShenandoahRefProcFrequency","prefix":"-XX:","type":"uintx"},
{"availability":"experimental","component":"gc","defaultValue":"false","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Provide heap region sampling data via jvmstat.","name":"ShenandoahRegionSampling","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"gc","defaultValue":"40","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Sampling rate for heap region sampling. In milliseconds between \nthe samples. Higher values provide more fidelity, at expense \nof more sampling overhead.","name":"ShenandoahRegionSamplingRate","prefix":"-XX:","type":"int"},
{"availability":"experimental","component":"gc","defaultValue":"0","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Static heap region size. Set zero to enable automatic sizing.","name":"ShenandoahRegionSize","prefix":"-XX:","type":"size_t"},
{"availability":"diagnostic","component":"gc","defaultValue":"true","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Turn on/off SATB barriers in Shenandoah","name":"ShenandoahSATBBarrier","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"gc","defaultValue":"1 * K","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Number of entries in an SATB log buffer.","name":"ShenandoahSATBBufferSize","prefix":"-XX:","range":"range(1, max_uintx)","type":"size_t"},
{"availability":"diagnostic","component":"gc","defaultValue":"true","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Fix references with load reference barrier. Disabling this \nmight degrade performance.","name":"ShenandoahSelfFixing","prefix":"-XX:","type":"bool"},
{"availability":"manageable","component":"gc","defaultValue":"0","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Soft limit for maximum heap size (in bytes)","name":"ShenandoahSoftMaxHeapSize","prefix":"-XX:","type":"size_t"},
{"availability":"experimental","component":"gc","defaultValue":"false","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Suspend concurrent GC worker threads at safepoints","name":"ShenandoahSuspendibleWorkers","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"gc","defaultValue":"2048","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"With automatic region sizing, this is the approximate number \nof regions that would be used, within min/max region size \nlimits.","name":"ShenandoahTargetNumRegions","prefix":"-XX:","type":"size_t"},
{"availability":"experimental","component":"gc","defaultValue":"true","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Allow to uncommit memory under unused regions and metadata. \nThis optimizes footprint at expense of allocation latency in \nregions that require committing back. Uncommits would be \ndisabled by some heuristics, or with static heap size.","name":"ShenandoahUncommit","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"gc","defaultValue":"5*60*1000","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Uncommit memory for regions that were not used for more than \nthis time. First use after that would incur allocation stalls. \nActively used regions would never be uncommitted, because they \ndo not become unused longer than this delay. Time is in \nmilliseconds. Setting this delay to 0 effectively uncommits \nregions almost immediately after they become unused.","name":"ShenandoahUncommitDelay","prefix":"-XX:","type":"uintx"},
{"availability":"experimental","component":"gc","defaultValue":"100","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Unload the classes every Nth cycle. Normally affects concurrent \nGC cycles, as degenerated and full GCs would try to unload \nclasses regardless. Set to zero to disable class unloading.","name":"ShenandoahUnloadClassesFrequency","prefix":"-XX:","type":"uintx"},
{"availability":"diagnostic","component":"gc","defaultValue":"false","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Enable internal verification. This would catch many GC bugs, \nbut it would also stall the collector during the verification, \nwhich prolongs the pauses and might hide other bugs.","name":"ShenandoahVerify","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"gc","defaultValue":"4","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Verification level, higher levels check more, taking more time. \nAccepted values are:\n 0 = basic heap checks; \n 1 = previous level, plus basic region checks; \n 2 = previous level, plus all roots; \n 3 = previous level, plus all reachable objects; \n 4 = previous level, plus all marked objects","name":"ShenandoahVerifyLevel","prefix":"-XX:","type":"intx"},
{"availability":"develop","component":"gc","defaultValue":"false","definedIn":"share/gc/shenandoah/shenandoah_globals.hpp","description":"Verify no missing barriers in C2.","name":"ShenandoahVerifyOptoBarriers","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","description":"On internal errors, include registers in error report.","name":"ShowRegistersOnAssert","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"runtime","defaultValue":"NULL","definedIn":"share/runtime/globals.hpp","description":"Start flight recording with options","name":"StartFlightRecording","prefix":"-XX:","type":"ccstr"},
{"availability":"develop","component":"c2","defaultValue":"false","definedIn":"share/opto/c2_globals.hpp","description":"Stress inlining through method handle linkers","name":"StressMethodHandleLinkerInlining","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","description":"Trace creation and removal of compiler threads","name":"TraceCompilerThreads","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","description":"Use intrinsics for java.util.Base64","name":"UseBASE64Intrinsics","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"runtime","defaultValue":"1","definedIn":"share/runtime/globals.hpp","description":"0: when resolving InDy or ConDy, force all BSM arguments to be \nresolved before the bootstrap method is called; 1: when a BSM \nthat may accept a BootstrapCallInfo is detected, use that API \nto pass BSM arguments, which allows the BSM to delay their \nresolution; 2+: stress test the BCI API by calling more BSMs \nvia that API, instead of with the eagerly-resolved array.","name":"UseBootstrapCallInfo","prefix":"-XX:","type":"int"},
{"availability":"product","cpu":"ppc","defaultValue":"false","definedIn":"cpu/ppc/globals_ppc.hpp","description":"Use byte reverse instructions.","name":"UseByteReverseInstructions","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"c2","defaultValue":"false","definedIn":"share/opto/c2_globals.hpp","description":"Enables intrinsification of java.lang.Character functions","name":"UseCharacterCompareIntrinsics","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","description":"Enables intrinsification of Math.copySign","name":"UseCopySignIntrinsic","prefix":"-XX:","type":"bool"},
{"availability":"product","cpu":"ppc","defaultValue":"false","definedIn":"cpu/ppc/globals_ppc.hpp","description":"Use count trailing zeros instructions.","name":"UseCountTrailingZerosInstructionsPPC64","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"runtime","defaultValue":"true","definedIn":"share/runtime/globals.hpp","description":"Dynamically choose the number of parallel compiler threads","name":"UseDynamicNumberOfCompilerThreads","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"gc","defaultValue":"false","definedIn":"share/gc/shared/gc_globals.hpp","description":"Use the Epsilon (no-op) garbage collector","name":"UseEpsilonGC","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","description":"Use platform unstable time where supported for timestamps only","name":"UseFastUnorderedTimeStamps","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","description":"Use the original JNI name escaping scheme","name":"UseLegacyJNINameEscaping","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"c2","defaultValue":"true","definedIn":"share/opto/c2_globals.hpp","description":"move predicates out of loops based on profiling data","name":"UseProfiledLoopPredicate","prefix":"-XX:","type":"bool"},
{"availability":"product","cpu":"aarch64","defaultValue":"true","definedIn":"cpu/aarch64/globals_aarch64.hpp","description":"Use SIMD instructions in generated array equals code","name":"UseSIMDForArrayEquals","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","description":"Enables intrinsification of Math.signum","name":"UseSignumIntrinsic","prefix":"-XX:","type":"bool"},
{"availability":"product","cpu":"aarch64","defaultValue":"false","definedIn":"cpu/aarch64/globals_aarch64.hpp","description":"Use simpliest and shortest implementation for array equals","name":"UseSimpleArrayEquals","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"runtime","defaultValue":"true","definedIn":"share/runtime/globals.hpp","description":"leverage profiling for table/lookup switch","name":"UseSwitchProfiling","prefix":"-XX:","type":"bool"},
{"availability":"product","cpu":"x86","defaultValue":"false","definedIn":"cpu/x86/globals_x86.hpp","description":"Use XMM/YMM MOVDQU instruction for Object Initialization","name":"UseXMMForObjInit","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"gc","defaultValue":"false","definedIn":"share/gc/shared/gc_globals.hpp","description":"Use the Z garbage collector","name":"UseZGC","prefix":"-XX:","type":"bool"},
{"availability":"develop","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","description":"Verify metaspace on chunk movements.","name":"VerifyMetaspace","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"gc","defaultValue":"2.0","definedIn":"share/gc/z/z_globals.hpp","description":"Allocation spike tolerance factor","name":"ZAllocationSpikeTolerance","prefix":"-XX:","type":"double"},
{"availability":"product","component":"gc","defaultValue":"0","definedIn":"share/gc/z/z_globals.hpp","description":"Force GC at a fixed time interval (in seconds)","name":"ZCollectionInterval","prefix":"-XX:","type":"uint"},
{"availability":"diagnostic","component":"gc","defaultValue":"true","definedIn":"share/gc/z/z_globals.hpp","description":"Clean JNI WeakGlobalRefs concurrently","name":"ZConcurrentJNIWeakGlobalHandles","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"gc","defaultValue":"true","definedIn":"share/gc/z/z_globals.hpp","description":"Clean StringTable concurrently","name":"ZConcurrentStringTable","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"gc","defaultValue":"true","definedIn":"share/gc/z/z_globals.hpp","description":"Clean VM WeakHandles concurrently","name":"ZConcurrentVMWeakHandles","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"gc","defaultValue":"25.0","definedIn":"share/gc/z/z_globals.hpp","description":"Maximum allowed heap fragmentation","name":"ZFragmentationLimit","prefix":"-XX:","type":"double"},
{"availability":"product","component":"gc","defaultValue":"NOT_LP64(512*M) LP64_ONLY(8*G)","definedIn":"share/gc/z/z_globals.hpp","description":"Maximum number of bytes allocated for marking stacks","name":"ZMarkStacksMax","prefix":"-XX:","range":"range(32*M, NOT_LP64(512*M) LP64_ONLY(1024*G))","type":"size_t"},
{"availability":"diagnostic","component":"gc","defaultValue":"true","definedIn":"share/gc/z/z_globals.hpp","description":"Apply load barrier optimizations","name":"ZOptimizeLoadBarriers","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"gc","defaultValue":"NULL","definedIn":"share/gc/z/z_globals.hpp","description":"Filesystem path for Java heap backing storage \n(must be a tmpfs or a hugetlbfs filesystem)","name":"ZPath","prefix":"-XX:","type":"ccstr"},
{"availability":"diagnostic","component":"gc","defaultValue":"true","definedIn":"share/gc/z/z_globals.hpp","description":"Enable proactive GC cycles","name":"ZProactive","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"gc","defaultValue":"true","definedIn":"share/gc/z/z_globals.hpp","description":"Allow Java threads to stall and wait for GC to complete \ninstead of immediately throwing an OutOfMemoryError","name":"ZStallOnOutOfMemory","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"gc","defaultValue":"false","definedIn":"share/gc/z/z_globals.hpp","description":"Force tracing of ZStats","name":"ZStatisticsForceTrace","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"gc","defaultValue":"10","definedIn":"share/gc/z/z_globals.hpp","description":"Time between statistics print outs (in seconds)","name":"ZStatisticsInterval","prefix":"-XX:","range":"range(1, (uint)-1)","type":"uint"},
{"availability":"diagnostic","component":"gc","defaultValue":"false","definedIn":"share/gc/z/z_globals.hpp","description":"Unload unused VM symbols","name":"ZSymbolTableUnloading","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"gc","defaultValue":"false","definedIn":"share/gc/z/z_globals.hpp","description":"Unmap bad (inactive) heap views","name":"ZUnmapBadViews","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"gc","defaultValue":"false","definedIn":"share/gc/z/z_globals.hpp","description":"Verify forwarding tables","name":"ZVerifyForwarding","prefix":"-XX:","type":"bool"},
{"availability":"develop","component":"gc","defaultValue":"false","definedIn":"share/gc/z/z_globals.hpp","description":"Verify that reference loads are followed by barriers","name":"ZVerifyLoadBarriers","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"gc","defaultValue":"false","definedIn":"share/gc/z/z_globals.hpp","description":"Verify marking stacks","name":"ZVerifyMarking","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"gc","defaultValue":"true","definedIn":"share/gc/z/z_globals.hpp","description":"Treat JNI WeakGlobalRefs and StringTable as weak roots","name":"ZWeakRoots","prefix":"-XX:","type":"bool"}
],
"removed":[{"availability":"product","defaultValue":"1000","definedIn":"os/aix/globals_aix.hpp","description":"Timeout in ms the attach listener waits for a request","name":"AttachListenerTimeout","os":"aix","prefix":"-XX:","range":"range(0, 2147483)","type":"intx"},
{"availability":"notproduct","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","deprecated":"","description":"Temporary - see javaClasses.cpp","expired":"12","name":"CheckAssertionStatusDirectives","obsoleted":"11","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","deprecated":"10","description":"Verify the endorsed and extension directories are not used","expired":"12","name":"CheckEndorsedAndExtDirs","obsoleted":"11","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"runtime","defaultValue":"-1","definedIn":"share/runtime/globals.hpp","deprecated":"10","description":"(Unsafe,Unstable,Deprecated) \nNumber of iterations in safepoint loop \nbefore changing safepoint polling page to RO","expired":"12","name":"DeferPollingPageLoopCount","obsoleted":"11","prefix":"-XX:","range":"range(-1, max_jint-1)","type":"intx"},
{"availability":"product","component":"runtime","defaultValue":"4000","definedIn":"share/runtime/globals.hpp","deprecated":"10","description":"(Unstable, Deprecated) \nNumber of times to iterate in safepoint loop \nbefore blocking VM threads","expired":"12","name":"DeferThrSuspendLoopCount","obsoleted":"11","prefix":"-XX:","range":"range(-1, max_jint-1)","type":"intx"},
{"availability":"develop","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","description":"Die upon failure to reach safepoint (see SafepointTimeout)","name":"DieOnSafepointTimeout","prefix":"-XX:","type":"bool"},
{"availability":"product","cpu":"aarch64","defaultValue":"true","definedIn":"cpu/aarch64/globals_aarch64.hpp","description":"tell sim not to invoke bccheck callback","name":"DisableBCCheck","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","deprecated":"","description":"Enable event-based tracing","expired":"12","name":"EnableTracing","obsoleted":"11","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","deprecated":"10","description":"(Deprecated) Use fast TLAB refill code","expired":"12","name":"FastTLABRefill","obsoleted":"11","prefix":"-XX:","type":"bool"},
{"availability":"develop","component":"gc","defaultValue":"true","definedIn":"share/gc/g1/g1_globals.hpp","description":"If true, generate region filtering code in RS barrier","name":"G1RSBarrierRegionFilter","prefix":"-XX:","type":"bool"},
{"availability":"develop","component":"gc","defaultValue":"true","definedIn":"share/gc/g1/g1_globals.hpp","description":"When true, do RS scrubbing after cleanup.","name":"G1ScrubRemSets","prefix":"-XX:","type":"bool"},
{"availability":"develop","component":"gc","defaultValue":"5","definedIn":"share/gc/g1/g1_globals.hpp","description":"The number of regions we will add to the secondary free list \nat every append operation","name":"G1SecondaryFreeListAppendLength","prefix":"-XX:","type":"uintx"},
{"availability":"develop","component":"gc","defaultValue":"false","definedIn":"share/gc/g1/g1_globals.hpp","description":"It stresses the concurrent region freeing operation","name":"G1StressConcRegionFreeing","prefix":"-XX:","type":"bool"},
{"availability":"develop","component":"gc","defaultValue":"0","definedIn":"share/gc/g1/g1_globals.hpp","description":"Artificial delay during concurrent region freeing","name":"G1StressConcRegionFreeingDelayMillis","prefix":"-XX:","type":"uintx"},
{"availability":"diagnostic","component":"runtime","defaultValue":"true","definedIn":"share/runtime/globals.hpp","deprecated":"","description":"intrinsify subset of notify","expired":"12","name":"InlineNotify","obsoleted":"11","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","deprecated":"10","description":"Call loadClassInternal() rather than loadClass()","expired":"12","name":"MustCallLoadClassInternal","obsoleted":"11","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"runtime","defaultValue":"0","definedIn":"share/runtime/globals.hpp","deprecated":"","description":"(Unstable)","expired":"12","name":"NativeMonitorFlags","obsoleted":"11","prefix":"-XX:","type":"intx"},
{"availability":"experimental","component":"runtime","defaultValue":"20","definedIn":"share/runtime/globals.hpp","deprecated":"","description":"(Unstable)","expired":"12","name":"NativeMonitorSpinLimit","obsoleted":"11","prefix":"-XX:","type":"intx"},
{"availability":"experimental","component":"runtime","defaultValue":"-1","definedIn":"share/runtime/globals.hpp","deprecated":"","description":"(Unstable)","expired":"12","name":"NativeMonitorTimeout","obsoleted":"11","prefix":"-XX:","type":"intx"},
{"availability":"product","cpu":"aarch64","defaultValue":"UseBuiltinSim","definedIn":"cpu/aarch64/globals_aarch64.hpp","description":"tell the AArch64 sim where we are in method code","name":"NotifySimulator","prefix":"-XX:","type":"bool"},
{"availability":"develop","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","deprecated":"","description":"Print all malloc/free calls","expired":"12","name":"PrintMalloc","obsoleted":"11","prefix":"-XX:","type":"bool"},
{"availability":"notproduct","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","deprecated":"","description":"Trace calls to C heap malloc/free allocation","expired":"12","name":"PrintMallocFree","obsoleted":"11","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"runtime","defaultValue":"2000","definedIn":"share/runtime/globals.hpp","deprecated":"10","description":"(Unstable, Deprecated)","expired":"12","name":"SafepointSpinBeforeYield","obsoleted":"11","prefix":"-XX:","range":"range(0, max_intx)","type":"intx"},
{"availability":"define_pd_global","cpu":"aarch64","defaultValue":"true","definedIn":"cpu/aarch64/globals_aarch64.hpp","name":"ShareVtableStubs","prefix":"-XX:","type":"bool"},
{"availability":"develop","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","deprecated":"","description":"Show message about safepoint synchronization","expired":"12","name":"ShowSafepointMsgs","obsoleted":"11","prefix":"-XX:","type":"bool"},
{"availability":"notproduct","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","deprecated":"","description":"Trace scavenge","expired":"12","name":"TraceScavenge","obsoleted":"11","prefix":"-XX:","type":"bool"},
{"availability":"diagnostic","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","deprecated":"10","description":"Unstable: VM calls loadClass unsynchronized. Custom \nclass loader must call VM synchronized for findClass \nand defineClass.","expired":"12","name":"UnsyncloadClass","obsoleted":"11","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","deprecated":"","description":"Enable Application Class Data Sharing when using shared spaces","expired":"12","name":"UseAppCDS","obsoleted":"11","prefix":"-XX:","type":"bool"},
{"availability":"experimental","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","deprecated":"10","description":"Use CGroup memory limit as physical memory limit for heap \nsizing\nDeprecated, replaced by container support","expired":"11","name":"UseCGroupMemoryLimitForHeap","obsoleted":"","prefix":"-XX:","type":"bool"},
{"availability":"product","component":"runtime","defaultValue":"false","definedIn":"share/runtime/globals.hpp","deprecated":"","description":"Use locked-tracing when doing event-based tracing","expired":"12","name":"UseLockedTracing","obsoleted":"11","prefix":"-XX:","type":"bool"},
{"availability":"product","cpu":"aarch64","defaultValue":"false","definedIn":"cpu/aarch64/globals_aarch64.hpp","description":"tell sim to cache memory updates until exclusive op occurs","name":"UseSimulatorCache","prefix":"-XX:","type":"bool"},
{"availability":"product","defaultValue":"true","definedIn":"os/windows/globals_windows.hpp","deprecated":"","description":"Adjust the timestamp returned from stat() to be UTC","expired":"12","name":"UseUTCFileTimestamp","obsoleted":"11","os":"windows","prefix":"-XX:","type":"bool"}
]
}