{
    "removed": [
        {
            "os": "aix",
            "prefix": "-XX:",
            "definedIn": "os/aix/globals_aix.hpp",
            "defaultValue": "1000",
            "name": "AttachListenerTimeout",
            "range": "range(0, 2147483)",
            "description": "Timeout in ms the attach listener waits for a request",
            "availability": "product",
            "type": "intx"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "CheckAssertionStatusDirectives",
            "description": "Temporary - see javaClasses.cpp",
            "availability": "notproduct",
            "deprecation": "<span style=\"white-space:nowrap\">Obsoleted in JDK11<\/span><br><span style=\"white-space:nowrap\">Expired in JDK12<\/span>",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "CheckEndorsedAndExtDirs",
            "description": "Verify the endorsed and extension directories are not used",
            "availability": "product",
            "deprecation": "<span style=\"white-space:nowrap\">Deprecated in JDK10<\/span><br><span style=\"white-space:nowrap\">Obsoleted in JDK11<\/span><br><span style=\"white-space:nowrap\">Expired in JDK12<\/span>",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "-1",
            "name": "DeferPollingPageLoopCount",
            "range": "range(-1, max_jint-1)",
            "description": "(Unsafe,Unstable,Deprecated) Number of iterations in safepoint loop before changing safepoint polling page to RO",
            "availability": "product",
            "deprecation": "<span style=\"white-space:nowrap\">Deprecated in JDK10<\/span><br><span style=\"white-space:nowrap\">Obsoleted in JDK11<\/span><br><span style=\"white-space:nowrap\">Expired in JDK12<\/span>",
            "type": "intx"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "4000",
            "name": "DeferThrSuspendLoopCount",
            "range": "range(-1, max_jint-1)",
            "description": "(Unstable, Deprecated) Number of times to iterate in safepoint loop before blocking VM threads",
            "availability": "product",
            "deprecation": "<span style=\"white-space:nowrap\">Deprecated in JDK10<\/span><br><span style=\"white-space:nowrap\">Obsoleted in JDK11<\/span><br><span style=\"white-space:nowrap\">Expired in JDK12<\/span>",
            "type": "intx"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "DieOnSafepointTimeout",
            "description": "Die upon failure to reach safepoint (see SafepointTimeout)",
            "availability": "develop",
            "type": "bool"
        },
        {
            "prefix": "-XX:",
            "definedIn": "cpu/aarch64/globals_aarch64.hpp",
            "defaultValue": "true",
            "name": "DisableBCCheck",
            "cpu": "aarch64",
            "description": "tell sim not to invoke bccheck callback",
            "availability": "product",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "EnableTracing",
            "description": "Enable event-based tracing",
            "availability": "product",
            "deprecation": "<span style=\"white-space:nowrap\">Obsoleted in JDK11<\/span><br><span style=\"white-space:nowrap\">Expired in JDK12<\/span>",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "FastTLABRefill",
            "description": "(Deprecated) Use fast TLAB refill code",
            "availability": "product",
            "deprecation": "<span style=\"white-space:nowrap\">Deprecated in JDK10<\/span><br><span style=\"white-space:nowrap\">Obsoleted in JDK11<\/span><br><span style=\"white-space:nowrap\">Expired in JDK12<\/span>",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/g1/g1_globals.hpp",
            "defaultValue": "true",
            "name": "G1RSBarrierRegionFilter",
            "description": "If true, generate region filtering code in RS barrier",
            "availability": "develop",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/g1/g1_globals.hpp",
            "defaultValue": "true",
            "name": "G1ScrubRemSets",
            "description": "When true, do RS scrubbing after cleanup.",
            "availability": "develop",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/g1/g1_globals.hpp",
            "defaultValue": "5",
            "name": "G1SecondaryFreeListAppendLength",
            "description": "The number of regions we will add to the secondary free list at every append operation",
            "availability": "develop",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/g1/g1_globals.hpp",
            "defaultValue": "false",
            "name": "G1StressConcRegionFreeing",
            "description": "It stresses the concurrent region freeing operation",
            "availability": "develop",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/g1/g1_globals.hpp",
            "defaultValue": "0",
            "name": "G1StressConcRegionFreeingDelayMillis",
            "description": "Artificial delay during concurrent region freeing",
            "availability": "develop",
            "type": "uintx"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "true",
            "name": "InlineNotify",
            "description": "intrinsify subset of notify",
            "availability": "diagnostic",
            "deprecation": "<span style=\"white-space:nowrap\">Obsoleted in JDK11<\/span><br><span style=\"white-space:nowrap\">Expired in JDK12<\/span>",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "MustCallLoadClassInternal",
            "description": "Call loadClassInternal() rather than loadClass()",
            "availability": "product",
            "deprecation": "<span style=\"white-space:nowrap\">Deprecated in JDK10<\/span><br><span style=\"white-space:nowrap\">Obsoleted in JDK11<\/span><br><span style=\"white-space:nowrap\">Expired in JDK12<\/span>",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "0",
            "name": "NativeMonitorFlags",
            "description": "(Unstable)",
            "availability": "experimental",
            "deprecation": "<span style=\"white-space:nowrap\">Obsoleted in JDK11<\/span><br><span style=\"white-space:nowrap\">Expired in JDK12<\/span>",
            "type": "intx"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "20",
            "name": "NativeMonitorSpinLimit",
            "description": "(Unstable)",
            "availability": "experimental",
            "deprecation": "<span style=\"white-space:nowrap\">Obsoleted in JDK11<\/span><br><span style=\"white-space:nowrap\">Expired in JDK12<\/span>",
            "type": "intx"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "-1",
            "name": "NativeMonitorTimeout",
            "description": "(Unstable)",
            "availability": "experimental",
            "deprecation": "<span style=\"white-space:nowrap\">Obsoleted in JDK11<\/span><br><span style=\"white-space:nowrap\">Expired in JDK12<\/span>",
            "type": "intx"
        },
        {
            "prefix": "-XX:",
            "definedIn": "cpu/aarch64/globals_aarch64.hpp",
            "defaultValue": "UseBuiltinSim",
            "name": "NotifySimulator",
            "cpu": "aarch64",
            "description": "tell the AArch64 sim where we are in method code",
            "availability": "product",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "PrintMalloc",
            "description": "Print all malloc/free calls",
            "availability": "develop",
            "deprecation": "<span style=\"white-space:nowrap\">Obsoleted in JDK11<\/span><br><span style=\"white-space:nowrap\">Expired in JDK12<\/span>",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "PrintMallocFree",
            "description": "Trace calls to C heap malloc/free allocation",
            "availability": "notproduct",
            "deprecation": "<span style=\"white-space:nowrap\">Obsoleted in JDK11<\/span><br><span style=\"white-space:nowrap\">Expired in JDK12<\/span>",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "2000",
            "name": "SafepointSpinBeforeYield",
            "range": "range(0, max_intx)",
            "description": "(Unstable, Deprecated)",
            "availability": "product",
            "deprecation": "<span style=\"white-space:nowrap\">Deprecated in JDK10<\/span><br><span style=\"white-space:nowrap\">Obsoleted in JDK11<\/span><br><span style=\"white-space:nowrap\">Expired in JDK12<\/span>",
            "type": "intx"
        },
        {
            "prefix": "-XX:",
            "definedIn": "cpu/aarch64/globals_aarch64.hpp",
            "defaultValue": "true",
            "name": "ShareVtableStubs",
            "cpu": "aarch64",
            "availability": "define_pd_global",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "ShowSafepointMsgs",
            "description": "Show message about safepoint synchronization",
            "availability": "develop",
            "deprecation": "<span style=\"white-space:nowrap\">Obsoleted in JDK11<\/span><br><span style=\"white-space:nowrap\">Expired in JDK12<\/span>",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "TraceScavenge",
            "description": "Trace scavenge",
            "availability": "notproduct",
            "deprecation": "<span style=\"white-space:nowrap\">Obsoleted in JDK11<\/span><br><span style=\"white-space:nowrap\">Expired in JDK12<\/span>",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "UnsyncloadClass",
            "description": "Unstable: VM calls loadClass unsynchronized. Custom class loader must call VM synchronized for findClass and defineClass.",
            "availability": "diagnostic",
            "deprecation": "<span style=\"white-space:nowrap\">Deprecated in JDK10<\/span><br><span style=\"white-space:nowrap\">Obsoleted in JDK11<\/span><br><span style=\"white-space:nowrap\">Expired in JDK12<\/span>",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "UseAppCDS",
            "description": "Enable Application Class Data Sharing when using shared spaces",
            "availability": "product",
            "deprecation": "<span style=\"white-space:nowrap\">Obsoleted in JDK11<\/span><br><span style=\"white-space:nowrap\">Expired in JDK12<\/span>",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "UseCGroupMemoryLimitForHeap",
            "description": "Use CGroup memory limit as physical memory limit for heap sizingDeprecated, replaced by container support",
            "availability": "experimental",
            "deprecation": "<span style=\"white-space:nowrap\">Deprecated in JDK10<\/span><br><span style=\"white-space:nowrap\">Expired in JDK11<\/span>",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "UseLockedTracing",
            "description": "Use locked-tracing when doing event-based tracing",
            "availability": "product",
            "deprecation": "<span style=\"white-space:nowrap\">Obsoleted in JDK11<\/span><br><span style=\"white-space:nowrap\">Expired in JDK12<\/span>",
            "type": "bool"
        },
        {
            "prefix": "-XX:",
            "definedIn": "cpu/aarch64/globals_aarch64.hpp",
            "defaultValue": "false",
            "name": "UseSimulatorCache",
            "cpu": "aarch64",
            "description": "tell sim to cache memory updates until exclusive op occurs",
            "availability": "product",
            "type": "bool"
        },
        {
            "os": "windows",
            "prefix": "-XX:",
            "definedIn": "os/windows/globals_windows.hpp",
            "defaultValue": "true",
            "name": "UseUTCFileTimestamp",
            "description": "Adjust the timestamp returned from stat() to be UTC",
            "availability": "product",
            "deprecation": "<span style=\"white-space:nowrap\">Obsoleted in JDK11<\/span><br><span style=\"white-space:nowrap\">Expired in JDK12<\/span>",
            "type": "bool"
        }
    ],
    "added": [
        {
            "prefix": "-XX:",
            "definedIn": "cpu/x86/globals_x86.hpp",
            "defaultValue": "4096",
            "name": "AVX3Threshold",
            "range": "range(0, max_jint)",
            "cpu": "x86",
            "description": "Minimum array size in bytes to use AVX512 intrinsicsfor copy, inflate and fill. When this value is set as zerocompare operations can also use AVX512 intrinsics.",
            "availability": "diagnostic",
            "type": "int"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "AbortVMOnCompilationFailure",
            "description": "Abort VM when method had failed to compile.",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "AbortVMOnSafepointTimeout",
            "description": "Abort upon failure to reach safepoint (see SafepointTimeout)",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "AbortVMOnVMOperationTimeout",
            "description": "Abort upon failure to complete VM operation promptly",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "1000",
            "name": "AbortVMOnVMOperationTimeoutDelay",
            "range": "range(0, max_intx)",
            "description": "Delay in milliseconds for option AbortVMOnVMOperationTimeout",
            "availability": "diagnostic",
            "type": "intx"
        },
        {
            "os": "linux",
            "prefix": "-XX:",
            "definedIn": "os/linux/globals_linux.hpp",
            "defaultValue": "true",
            "name": "DumpPrivateMappingsInCore",
            "description": "If true, sets bit 2 of /proc/PID/coredump_filter, thus resulting in file-backed private mappings of the process to be dumped into the corefile.",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "os": "linux",
            "prefix": "-XX:",
            "definedIn": "os/linux/globals_linux.hpp",
            "defaultValue": "true",
            "name": "DumpSharedMappingsInCore",
            "description": "If true, sets bit 3 of /proc/PID/coredump_filter, thus resulting in file-backed shared mappings of the process to be dumped into the corefile.",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "jvmci",
            "prefix": "-XX:",
            "definedIn": "share/jvmci/jvmci_globals.hpp",
            "defaultValue": "false",
            "name": "EagerJVMCI",
            "description": "Force eager JVMCI initialization",
            "availability": "experimental",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/epsilon/epsilon_globals.hpp",
            "defaultValue": "true",
            "name": "EpsilonElasticTLAB",
            "description": "Use elastic policy to manage TLAB sizes. This conserves memory for non-actively allocating threads, even when they request large TLABs for themselves. Active threads would experience smaller TLABs until policy catches up.",
            "availability": "experimental",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/epsilon/epsilon_globals.hpp",
            "defaultValue": "true",
            "name": "EpsilonElasticTLABDecay",
            "description": "Use timed decays to shrik TLAB sizes. This conserves memory for the threads that allocate in bursts of different sizes, for example the small/rare allocations coming after the initial large burst.",
            "availability": "experimental",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/epsilon/epsilon_globals.hpp",
            "defaultValue": "4 * M",
            "name": "EpsilonMaxTLABSize",
            "range": "range(1, max_intx)",
            "description": "Max TLAB size to use with Epsilon GC. Larger value improves performance at the expense of per-thread memory waste. This asks TLAB machinery to cap TLAB sizes at this value.",
            "availability": "experimental",
            "type": "size_t"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/epsilon/epsilon_globals.hpp",
            "defaultValue": "128 * M",
            "name": "EpsilonMinHeapExpand",
            "range": "range(1, max_intx)",
            "description": "Min expansion step for heap. Larger value improves performance at the potential expense of memory waste.",
            "availability": "experimental",
            "type": "size_t"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/epsilon/epsilon_globals.hpp",
            "defaultValue": "20",
            "name": "EpsilonPrintHeapSteps",
            "range": "range(0, max_intx)",
            "description": "Print heap occupancy stats with this number of steps. <br>0 turns the printing off.",
            "availability": "experimental",
            "type": "size_t"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/epsilon/epsilon_globals.hpp",
            "defaultValue": "1000",
            "name": "EpsilonTLABDecayTime",
            "range": "range(1, max_intx)",
            "description": "TLAB sizing policy decays to initial size after thread had not allocated for this long. Time is in milliseconds. Lower value improves memory footprint, but penalizes actively allocating threads.",
            "availability": "experimental",
            "type": "size_t"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/epsilon/epsilon_globals.hpp",
            "defaultValue": "1.1",
            "name": "EpsilonTLABElasticity",
            "range": "range(1.0, DBL_MAX)",
            "description": "Multiplier to use when deciding on next TLAB size. Larger value improves performance at the expense of per-thread memory waste. Lower value improves memory footprint, but penalizes actively allocating threads.",
            "availability": "experimental",
            "type": "double"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/epsilon/epsilon_globals.hpp",
            "defaultValue": "1 * M",
            "name": "EpsilonUpdateCountersStep",
            "range": "range(1, max_intx)",
            "description": "Update heap occupancy counters after allocating this much memory. Higher values would make allocations faster at the expense of lower resolution in heap counters.",
            "availability": "experimental",
            "type": "size_t"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "ErrorFileToStderr",
            "description": "If true, error data is printed to stderr instead of a file",
            "availability": "product",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "ErrorFileToStdout",
            "description": "If true, error data is printed to stdout instead of a file",
            "availability": "product",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "PRODUCT_ONLY(false) NOT_PRODUCT(true)",
            "name": "ExtensiveErrorReports",
            "description": "Error reports are more extensive.",
            "availability": "product",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "FlightRecorder",
            "description": "Enable Flight Recorder",
            "availability": "product",
            "deprecation": "<span style=\"white-space:nowrap\">Deprecated in JDK13<\/span>",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "NULL",
            "name": "FlightRecorderOptions",
            "description": "Flight Recorder options",
            "availability": "product",
            "type": "ccstr"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/g1/g1_globals.hpp",
            "defaultValue": "256 * K",
            "name": "G1RebuildRemSetChunkSize",
            "range": "range(4 * K, 32 * M)",
            "description": "Chunk size used for rebuilding the remembered set.",
            "availability": "experimental",
            "type": "size_t"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/g1/g1_globals.hpp",
            "defaultValue": "true",
            "name": "G1UseReferencePrecleaning",
            "description": "Concurrently preclean java.lang.ref.references instances before the Remark pause.",
            "availability": "experimental",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "InjectCompilerCreationFailure",
            "description": "Inject thread creation failures for UseDynamicNumberOfCompilerThreads",
            "availability": "develop",
            "type": "bool"
        },
        {
            "os": "linux",
            "prefix": "-XX:",
            "definedIn": "os/linux/globals_linux.hpp",
            "defaultValue": "true",
            "name": "PreferContainerQuotaForCPUCount",
            "description": "Calculate the container CPU availability based on the value of quotas (if set), when true. Otherwise, use the CPU shares value, provided it is less than quota.",
            "availability": "product",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "PrintExtendedThreadInfo",
            "description": "Print more information in thread dump",
            "availability": "product",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "true",
            "name": "ReduceNumberOfCompilerThreads",
            "description": "Reduce the number of parallel compiler threads when they are not used",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shared/gc_globals.hpp",
            "defaultValue": "1000",
            "name": "ReferencesPerThread",
            "description": "Ergonomically start one thread for this amount of references for reference processing if ParallelRefProcEnabled is true. Specify 0 to disable and use all threads.",
            "availability": "experimental",
            "type": "size_t"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "false",
            "name": "ShenandoahAllocFailureALot",
            "description": "Testing: make lots of artificial allocation failures.",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "5",
            "name": "ShenandoahAllocSpikeFactor",
            "range": "range(0,100)",
            "description": "How much of heap should some heuristics reserve for absorbing the allocation spikes. Larger value wastes more memory in non-emergency cases, but provides more safety in emergency cases. In percents of (soft) max heap size.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "0",
            "name": "ShenandoahAllocationThreshold",
            "range": "range(0,100)",
            "description": "How many new allocations should happen since the last GC cycle before some heuristics trigger the collection. In percents of (soft) max heap size. Set to zero to effectively disable.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "false",
            "name": "ShenandoahAlwaysClearSoftRefs",
            "description": "Unconditionally clear soft references, instead of using any other cleanup policy. This minimizes footprint at expense ofmore soft reference churn in applications.",
            "availability": "experimental",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "true",
            "name": "ShenandoahCASBarrier",
            "description": "Turn on/off CAS barriers in Shenandoah",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "true",
            "name": "ShenandoahCloneBarrier",
            "description": "Turn on/off clone barriers in Shenandoah",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "2",
            "name": "ShenandoahCodeRootsStyle",
            "description": "Use this style to scan the code cache roots: 0 - sequential iterator; 1 - parallel iterator; 2 - parallel iterator with cset filters;",
            "availability": "diagnostic",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "1000",
            "name": "ShenandoahControlIntervalAdjustPeriod",
            "description": "The time period for one step in control loop interval adjustment. Lower values make adjustments faster, at the expense of higher perf overhead. Time is in milliseconds.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "10",
            "name": "ShenandoahControlIntervalMax",
            "description": "The maximum sleep interval for control loop that drives the cycles. Lower values would increase GC responsiveness to changing heap conditions, at the expense of higher perf overhead. Time is in milliseconds.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "1",
            "name": "ShenandoahControlIntervalMin",
            "description": "The minimum sleep interval for the control loop that drives the cycles. Lower values would increase GC responsiveness to changing heap conditions, at the expense of higher perf overhead. Time is in milliseconds.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "1",
            "name": "ShenandoahCriticalFreeThreshold",
            "range": "range(0, 100)",
            "description": "How much of the heap needs to be free after recovery cycles, either Degenerated or Full GC to be claimed successful. If this much space is not available, next recovery step would be triggered.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "true",
            "name": "ShenandoahDegeneratedGC",
            "description": "Enable Degenerated GC as the graceful degradation step. Disabling this option leads to degradation to Full GC instead. When running in passive mode, this can be toggled to measure either Degenerated GC or Full GC costs.",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "true",
            "name": "ShenandoahElasticTLAB",
            "description": "Use Elastic TLABs with Shenandoah",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "5",
            "name": "ShenandoahEvacReserve",
            "range": "range(1,100)",
            "description": "How much of heap to reserve for evacuations. Larger values make GC evacuate more live objects on every cycle, while leaving less headroom for application to allocate in. In percents of total heap size.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "true",
            "name": "ShenandoahEvacReserveOverflow",
            "description": "Allow evacuations to overflow the reserved space. Enabling it will make evacuations more resilient when evacuation reserve/waste is incorrect, at the risk that application runs out of memory too early.",
            "availability": "experimental",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "1.2",
            "name": "ShenandoahEvacWaste",
            "range": "range(1.0,100.0)",
            "description": "How much waste evacuations produce within the reserved space. Larger values make evacuations more resilient against evacuation conflicts, at expense of evacuating less on each GC cycle.",
            "availability": "experimental",
            "type": "double"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "3",
            "name": "ShenandoahFullGCThreshold",
            "description": "How many back-to-back Degenerated GCs should happen before going to a Full GC.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "adaptive",
            "name": "ShenandoahGCHeuristics",
            "description": "GC heuristics to use. This fine-tunes the GC mode selected, by choosing when to start the GC, how much to process on each cycle, and what other features to automatically enable. Possible values are: adaptive - adapt to maintain the given amount of free heap at all times, even during the GC cycle; static - trigger GC when free heap falls below the threshold; aggressive - run GC continuously, try to evacuate everything; compact - run GC more frequently and with deeper targets to free up more memory.",
            "availability": "product",
            "type": "ccstr"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "satb",
            "name": "ShenandoahGCMode",
            "description": "GC mode to use. Among other things, this defines which barriers are in in use. Possible values are: satb - snapshot-at-the-beginning concurrent GC (three pass mark-evac-update); iu - incremental-update concurrent GC (three pass mark-evac-update); passive - stop the world GC only (either degenerated or full)",
            "availability": "product",
            "type": "ccstr"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "25",
            "name": "ShenandoahGarbageThreshold",
            "range": "range(0,100)",
            "description": "How much garbage a region has to contain before it would be taken for collection. This a guideline only, as GC heuristics may select the region for collection even if it has little garbage. This also affects how much internal fragmentation the collector accepts. In percents of heap region size.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "5*60*1000",
            "name": "ShenandoahGuaranteedGCInterval",
            "description": "Many heuristics would guarantee a concurrent GC cycle at least with this interval. This is useful when large idle intervals are present, where GC can run without stealing time from active application. Time is in milliseconds. Setting this to 0 disables the feature.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "true",
            "name": "ShenandoahHumongousMoves",
            "description": "Allow moving humongous regions. This makes GC more resistant to external fragmentation that may otherwise fail other humongous allocations, at the expense of higher GC copying costs. Currently affects stop-the-world (Full) cycle only.",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "100",
            "name": "ShenandoahHumongousThreshold",
            "range": "range(1, 100)",
            "description": "Humongous objects are allocated in separate regions. This setting defines how large the object should be to be deemed humongous. Value is in percents of heap region size. This also caps the maximum TLAB size.",
            "availability": "experimental",
            "type": "intx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "90",
            "name": "ShenandoahImmediateThreshold",
            "range": "range(0,100)",
            "description": "The cycle may shortcut when enough garbage can be reclaimed from the immediate garbage (completely garbage regions). In percents of total garbage found. Setting this threshold to 100 effectively disables the shortcut.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "false",
            "name": "ShenandoahImplicitGCInvokesConcurrent",
            "description": "Should internally-caused GC requests invoke concurrent cycles, should they do the stop-the-world (Degenerated / Full GC)? Many heuristics automatically enable this. This option is similar to global ExplicitGCInvokesConcurrent.",
            "availability": "experimental",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "70",
            "name": "ShenandoahInitFreeThreshold",
            "range": "range(0,100)",
            "description": "How much heap should be free before some heuristics trigger the initial (learning) cycles. Affects cycle frequency on startup and after drastic state changes, e.g. after degenerated/full GC cycles. In percents of (soft) max heap size.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "5",
            "name": "ShenandoahLearningSteps",
            "range": "range(0,100)",
            "description": "The number of cycles some heuristics take to collect in order to learn application and GC performance.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "true",
            "name": "ShenandoahLoadRefBarrier",
            "description": "Turn on/off load-reference barriers in Shenandoah",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "true",
            "name": "ShenandoahLoopOptsAfterExpansion",
            "description": "Attempt more loop opts after barrier expansion.",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "1000",
            "name": "ShenandoahMarkLoopStride",
            "description": "How many items to process during one marking iteration before checking for cancellation, yielding, etc. Larger values improve marking performance at expense of responsiveness.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "32",
            "name": "ShenandoahMarkScanPrefetch",
            "range": "range(0, 256)",
            "description": "How many objects to prefetch ahead when traversing mark bitmaps.Set to 0 to disable prefetching.",
            "availability": "experimental",
            "type": "intx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "32 * M",
            "name": "ShenandoahMaxRegionSize",
            "description": "With automatic region sizing, the regions would be at most this large.",
            "availability": "experimental",
            "type": "size_t"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "10",
            "name": "ShenandoahMinFreeThreshold",
            "range": "range(0,100)",
            "description": "How much heap should be free before most heuristics trigger the collection, even without other triggers. Provides the safety margin for many heuristics. In percents of (soft) max heap size.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "256 * K",
            "name": "ShenandoahMinRegionSize",
            "description": "With automatic region sizing, the regions would be at least this large.",
            "availability": "experimental",
            "type": "size_t"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "false",
            "name": "ShenandoahOOMDuringEvacALot",
            "description": "Testing: simulate OOM during evacuation.",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "true",
            "name": "ShenandoahOptimizeStaticFinals",
            "description": "Optimize barriers on static final fields. Turn it off for maximum compatibility with reflection or JNI code that manipulates final fields.",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "true",
            "name": "ShenandoahPacing",
            "description": "Pace application allocations to give GC chance to start and complete before allocation failure is reached.",
            "availability": "experimental",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "10",
            "name": "ShenandoahPacingCycleSlack",
            "range": "range(0, 100)",
            "description": "How much of free space to take as non-taxable allocations the GC cycle. Larger value makes the pacing milder at the beginning of the GC cycle. Lower value makes the pacing less uniform during the cycle. In percent of free space.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "2",
            "name": "ShenandoahPacingIdleSlack",
            "range": "range(0, 100)",
            "description": "How much of heap counted as non-taxable allocations during idle phases. Larger value makes the pacing milder when collector is idle, requiring less rendezvous with control thread. Lower value makes the pacing control less responsive to out-of-cycle allocs. In percent of total heap size.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "10",
            "name": "ShenandoahPacingMaxDelay",
            "description": "Max delay for pacing application allocations. Larger values provide more resilience against out of memory, at expense at hiding the GC latencies in the allocation path. Time is in milliseconds. Setting it to arbitrarily large value makes GC effectively stall the threads indefinitely instead of going to degenerated or Full GC.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "1.1",
            "name": "ShenandoahPacingSurcharge",
            "range": "range(1.0, 100.0)",
            "description": "Additional pacing tax surcharge to help unclutter the heap. Larger values makes the pacing more aggressive. Lower values risk GC cycles finish with less memory than were available at the beginning of it.",
            "availability": "experimental",
            "type": "double"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "1024",
            "name": "ShenandoahParallelRegionStride",
            "description": "How many regions to process at once during parallel region iteration. Affects heaps with lots of regions.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "true",
            "name": "ShenandoahPreclean",
            "description": "Do concurrent preclean phase before final mark: process definitely alive references to avoid dealing with them during pause.",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "5",
            "name": "ShenandoahRefProcFrequency",
            "description": "Process process weak (soft, phantom, finalizers) references every Nth cycle. Normally affects concurrent GC cycles only, as degenerated and full GCs would try to process references regardless. Set to zero to disable reference processing completely.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "false",
            "name": "ShenandoahRegionSampling",
            "description": "Provide heap region sampling data via jvmstat.",
            "availability": "experimental",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "40",
            "name": "ShenandoahRegionSamplingRate",
            "description": "Sampling rate for heap region sampling. In milliseconds between the samples. Higher values provide more fidelity, at expense of more sampling overhead.",
            "availability": "experimental",
            "type": "int"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "0",
            "name": "ShenandoahRegionSize",
            "description": "Static heap region size. Set zero to enable automatic sizing.",
            "availability": "experimental",
            "type": "size_t"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "true",
            "name": "ShenandoahSATBBarrier",
            "description": "Turn on/off SATB barriers in Shenandoah",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "100",
            "name": "ShenandoahSATBBufferFlushInterval",
            "description": "Forcefully flush non-empty SATB buffers at this interval. Time is in milliseconds.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "1 * K",
            "name": "ShenandoahSATBBufferSize",
            "range": "range(1, max_uintx)",
            "description": "Number of entries in an SATB log buffer.",
            "availability": "experimental",
            "type": "size_t"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "true",
            "name": "ShenandoahSelfFixing",
            "description": "Fix references with load reference barrier. Disabling this might degrade performance.",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "0",
            "name": "ShenandoahSoftMaxHeapSize",
            "description": "Soft limit for maximum heap size (in bytes)",
            "availability": "manageable",
            "type": "size_t"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "false",
            "name": "ShenandoahStoreValEnqueueBarrier",
            "description": "Turn on/off enqueuing of oops for storeval barriers",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "false",
            "name": "ShenandoahSuspendibleWorkers",
            "description": "Suspend concurrent GC worker threads at safepoints",
            "availability": "experimental",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "2048",
            "name": "ShenandoahTargetNumRegions",
            "description": "With automatic region sizing, this is the approximate number of regions that would be used, within min/max region size limits.",
            "availability": "experimental",
            "type": "size_t"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "true",
            "name": "ShenandoahUncommit",
            "description": "Allow to uncommit memory under unused regions and metadata. This optimizes footprint at expense of allocation latency in regions that require committing back. Uncommits would be disabled by some heuristics, or with static heap size.",
            "availability": "experimental",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "5*60*1000",
            "name": "ShenandoahUncommitDelay",
            "description": "Uncommit memory for regions that were not used for more than this time. First use after that would incur allocation stalls. Actively used regions would never be uncommitted, because they do not become unused longer than this delay. Time is in milliseconds. Setting this delay to 0 effectively uncommits regions almost immediately after they become unused.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "100",
            "name": "ShenandoahUnloadClassesFrequency",
            "description": "Unload the classes every Nth cycle. Normally affects concurrent GC cycles, as degenerated and full GCs would try to unload classes regardless. Set to zero to disable class unloading.",
            "availability": "experimental",
            "type": "uintx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "false",
            "name": "ShenandoahVerify",
            "description": "Enable internal verification. This would catch many GC bugs, but it would also stall the collector during the verification, which prolongs the pauses and might hide other bugs.",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "4",
            "name": "ShenandoahVerifyLevel",
            "description": "Verification level, higher levels check more, taking more time. Accepted values are: 0 = basic heap checks; 1 = previous level, plus basic region checks; 2 = previous level, plus all roots; 3 = previous level, plus all reachable objects; 4 = previous level, plus all marked objects",
            "availability": "diagnostic",
            "type": "intx"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shenandoah/shenandoah_globals.hpp",
            "defaultValue": "false",
            "name": "ShenandoahVerifyOptoBarriers",
            "description": "Verify no missing barriers in C2.",
            "availability": "develop",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "ShowRegistersOnAssert",
            "description": "On internal errors, include registers in error report.",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "NULL",
            "name": "StartFlightRecording",
            "description": "Start flight recording with options",
            "availability": "product",
            "type": "ccstr"
        },
        {
            "component": "c2",
            "prefix": "-XX:",
            "definedIn": "share/opto/c2_globals.hpp",
            "defaultValue": "false",
            "name": "StressMethodHandleLinkerInlining",
            "description": "Stress inlining through method handle linkers",
            "availability": "develop",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "TraceCompilerThreads",
            "description": "Trace creation and removal of compiler threads",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "UseBASE64Intrinsics",
            "description": "Use intrinsics for java.util.Base64",
            "availability": "product",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "1",
            "name": "UseBootstrapCallInfo",
            "description": "0: when resolving InDy or ConDy, force all BSM arguments to be resolved before the bootstrap method is called; 1: when a BSM that may accept a BootstrapCallInfo is detected, use that API to pass BSM arguments, which allows the BSM to delay their resolution; 2+: stress test the BCI API by calling more BSMs via that API, instead of with the eagerly-resolved array.",
            "availability": "diagnostic",
            "type": "int"
        },
        {
            "prefix": "-XX:",
            "definedIn": "cpu/ppc/globals_ppc.hpp",
            "defaultValue": "false",
            "name": "UseByteReverseInstructions",
            "cpu": "ppc",
            "description": "Use byte reverse instructions.",
            "availability": "product",
            "type": "bool"
        },
        {
            "component": "c2",
            "prefix": "-XX:",
            "definedIn": "share/opto/c2_globals.hpp",
            "defaultValue": "false",
            "name": "UseCharacterCompareIntrinsics",
            "description": "Enables intrinsification of java.lang.Character functions",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "prefix": "-XX:",
            "definedIn": "cpu/ppc/globals_ppc.hpp",
            "defaultValue": "false",
            "name": "UseCountTrailingZerosInstructionsPPC64",
            "cpu": "ppc",
            "description": "Use count trailing zeros instructions.",
            "availability": "product",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "true",
            "name": "UseDynamicNumberOfCompilerThreads",
            "description": "Dynamically choose the number of parallel compiler threads",
            "availability": "product",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shared/gc_globals.hpp",
            "defaultValue": "false",
            "name": "UseEpsilonGC",
            "description": "Use the Epsilon (no-op) garbage collector",
            "availability": "experimental",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "UseFastUnorderedTimeStamps",
            "description": "Use platform unstable time where supported for timestamps only",
            "availability": "experimental",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "UseLegacyJNINameEscaping",
            "description": "Use the original JNI name escaping scheme",
            "availability": "product",
            "type": "bool"
        },
        {
            "component": "c2",
            "prefix": "-XX:",
            "definedIn": "share/opto/c2_globals.hpp",
            "defaultValue": "true",
            "name": "UseProfiledLoopPredicate",
            "description": "move predicates out of loops based on profiling data",
            "availability": "product",
            "type": "bool"
        },
        {
            "prefix": "-XX:",
            "definedIn": "cpu/aarch64/globals_aarch64.hpp",
            "defaultValue": "true",
            "name": "UseSIMDForArrayEquals",
            "cpu": "aarch64",
            "description": "Use SIMD instructions in generated array equals code",
            "availability": "product",
            "type": "bool"
        },
        {
            "prefix": "-XX:",
            "definedIn": "cpu/aarch64/globals_aarch64.hpp",
            "defaultValue": "false",
            "name": "UseSimpleArrayEquals",
            "cpu": "aarch64",
            "description": "Use simpliest and shortest implementation for array equals",
            "availability": "product",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "true",
            "name": "UseSwitchProfiling",
            "description": "leverage profiling for table/lookup switch",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "prefix": "-XX:",
            "definedIn": "cpu/x86/globals_x86.hpp",
            "defaultValue": "false",
            "name": "UseXMMForObjInit",
            "cpu": "x86",
            "description": "Use XMM/YMM MOVDQU instruction for Object Initialization",
            "availability": "product",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/shared/gc_globals.hpp",
            "defaultValue": "false",
            "name": "UseZGC",
            "description": "Use the Z garbage collector",
            "availability": "experimental",
            "type": "bool"
        },
        {
            "component": "runtime",
            "prefix": "-XX:",
            "definedIn": "share/runtime/globals.hpp",
            "defaultValue": "false",
            "name": "VerifyMetaspace",
            "description": "Verify metaspace on chunk movements.",
            "availability": "develop",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/z/z_globals.hpp",
            "defaultValue": "2.0",
            "name": "ZAllocationSpikeTolerance",
            "description": "Allocation spike tolerance factor",
            "availability": "product",
            "type": "double"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/z/z_globals.hpp",
            "defaultValue": "0",
            "name": "ZCollectionInterval",
            "description": "Force GC at a fixed time interval (in seconds)",
            "availability": "product",
            "type": "uint"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/z/z_globals.hpp",
            "defaultValue": "true",
            "name": "ZConcurrentJNIWeakGlobalHandles",
            "description": "Clean JNI WeakGlobalRefs concurrently",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/z/z_globals.hpp",
            "defaultValue": "true",
            "name": "ZConcurrentStringTable",
            "description": "Clean StringTable concurrently",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/z/z_globals.hpp",
            "defaultValue": "true",
            "name": "ZConcurrentVMWeakHandles",
            "description": "Clean VM WeakHandles concurrently",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/z/z_globals.hpp",
            "defaultValue": "25.0",
            "name": "ZFragmentationLimit",
            "description": "Maximum allowed heap fragmentation",
            "availability": "product",
            "type": "double"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/z/z_globals.hpp",
            "defaultValue": "NOT_LP64(512*M) LP64_ONLY(8*G)",
            "name": "ZMarkStacksMax",
            "range": "range(32*M, NOT_LP64(512*M) LP64_ONLY(1024*G))",
            "description": "Maximum number of bytes allocated for marking stacks",
            "availability": "product",
            "type": "size_t"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/z/z_globals.hpp",
            "defaultValue": "true",
            "name": "ZOptimizeLoadBarriers",
            "description": "Apply load barrier optimizations",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/z/z_globals.hpp",
            "defaultValue": "NULL",
            "name": "ZPath",
            "description": "Filesystem path for Java heap backing storage (must be a tmpfs or a hugetlbfs filesystem)",
            "availability": "product",
            "type": "ccstr"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/z/z_globals.hpp",
            "defaultValue": "true",
            "name": "ZProactive",
            "description": "Enable proactive GC cycles",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/z/z_globals.hpp",
            "defaultValue": "true",
            "name": "ZStallOnOutOfMemory",
            "description": "Allow Java threads to stall and wait for GC to complete instead of immediately throwing an OutOfMemoryError",
            "availability": "product",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/z/z_globals.hpp",
            "defaultValue": "false",
            "name": "ZStatisticsForceTrace",
            "description": "Force tracing of ZStats",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/z/z_globals.hpp",
            "defaultValue": "10",
            "name": "ZStatisticsInterval",
            "range": "range(1, (uint)-1)",
            "description": "Time between statistics print outs (in seconds)",
            "availability": "product",
            "type": "uint"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/z/z_globals.hpp",
            "defaultValue": "false",
            "name": "ZSymbolTableUnloading",
            "description": "Unload unused VM symbols",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/z/z_globals.hpp",
            "defaultValue": "false",
            "name": "ZUnmapBadViews",
            "description": "Unmap bad (inactive) heap views",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/z/z_globals.hpp",
            "defaultValue": "false",
            "name": "ZVerifyForwarding",
            "description": "Verify forwarding tables",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/z/z_globals.hpp",
            "defaultValue": "false",
            "name": "ZVerifyLoadBarriers",
            "description": "Verify that reference loads are followed by barriers",
            "availability": "develop",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/z/z_globals.hpp",
            "defaultValue": "false",
            "name": "ZVerifyMarking",
            "description": "Verify marking stacks",
            "availability": "diagnostic",
            "type": "bool"
        },
        {
            "component": "gc",
            "prefix": "-XX:",
            "definedIn": "share/gc/z/z_globals.hpp",
            "defaultValue": "true",
            "name": "ZWeakRoots",
            "description": "Treat JNI WeakGlobalRefs and StringTable as weak roots",
            "availability": "diagnostic",
            "type": "bool"
        }
    ],
    "laterVM": "OpenJDK11",
    "earlierVM": "OpenJDK10"
}